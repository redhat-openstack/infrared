---
- name: Installing Virtual BMC and its requirements
  delegate_to: "{{ vbmc_inventory_host }}"
  block:
  - block:
    - name: Install packages required for python-virtualbmc pip package
      package:
          name:
            - gcc
            - libvirt
            - libvirt-devel
            - "{{ (hostvars[vbmc_inventory_host].ansible_distribution_major_version|default('7') == '8') | ternary('platform-python-devel', 'python-devel') }}"
            - "{{ (hostvars[vbmc_inventory_host].ansible_distribution_major_version|default('7') == '8') | ternary('python3-setuptools', 'python-setuptools') }}"
            - ipmitool
            - "{{ (hostvars[vbmc_inventory_host].ansible_distribution_major_version|default('7') == '8') | ternary('python3-libvirt', 'libvirt-python') }}"
          state: latest
          disable_gpg_check: yes

    - name: Disable and remove the libvirt default network (BZ#1807092)
      shell: |
        RETURN_CODE=0
        if virsh net-list --name | egrep -q "^default$"; then
          virsh net-autostart default --disable
          virsh net-destroy default
          RETURN_CODE=2
        fi
        exit ${RETURN_CODE}
      arguments:
        executable: /bin/bash
      register: _disable_libvirt_default_net
      changed_when: _disable_libvirt_default_net.rc == 2
      failed_when: _disable_libvirt_default_net.rc not in [0,2]
      when: vbmc_inventory_host == 'undercloud-0'

    - name: install pip
      easy_install:
          name: pip
      when: hostvars[vbmc_inventory_host].ansible_distribution_major_version|default('8') == '7'
    become: yes

  - name: gather info about PATH/env variables
    setup:

  - name: "check if there's a virtualenv already installed (i.e.: a system-wide RPM package)"
    command: virtualenv --version
    changed_when: false
    failed_when: false
    register: virtualenv_installed_check

  - name: install virtualenv pip module
    pip:
        name: virtualenv
        extra_args: "--user"
    when: virtualenv_installed_check.rc != 0

  - name: Install python-virtualbmc with pip
    pip:
        virtualenv: "{{ vbmc_virtualenv }}"
        name: virtualbmc
        version: "{{ vbmc_version }}"
        virtualenv_site_packages: yes
    environment:
      PATH: "{{ vbmc_home }}/.local/bin:{{ ansible_env.PATH }}"
      # to find 'virtualenv' command if available in user's ~/.local/bin, otherwise will find a system-wide one

  # When a virtualenv is setup, it does not copy the selinux labels.
  # ref: https://github.com/pypa/virtualenv/issues/1334
  - name: Set the correct label on the virtualenv to allow systemd to start the service
    file:
        path: "{{ vbmc_virtualenv }}/bin"
        state: directory
        setype: "bin_t"
        recurse: yes

  - block:
      - name: adds VirtualBMC as systemd service
        copy:
          mode: 0664
          dest: "/etc/systemd/system/virtualbmc.service"
          content: |
            [Unit]
            Description=Virtual Baseboard Management Controller Emulation service
            After=syslog.target network.target

            [Service]
            Type=simple
            User={{ vbmc_user }}
            ExecStart={{ vbmc_virtualenv }}/bin/python {{ vbmcd_bin }} --foreground
            Restart=always
            RestartSec=1

            [Install]
            WantedBy=multi-user.target

      - name: Create VirtualBMC directories
        file:
          path: "{{ item }}"
          state: directory
          mode: 0640
          owner: root
          group: root
        with_items:
          - "/etc/virtualbmc"
          - "/var/log/virtualbmc"

      - name: Create VirtualBMC configuration file
        copy:
          mode: 0640
          dest: "/etc/virtualbmc/virtualbmc.conf"
          content: |
            [default]
            config_dir= {{ vbmc_config_dir }}
            [log]
            logfile=/var/log/virtualbmc/virtualbmc.log
            debug=True
            [ipmi]
            session_timout=20

      - name: reload systemd
        systemd:
            daemon_reload: yes

      - name: restart virtualbmc
        service:
            name: virtualbmc
            state: restarted
    become: true

  - name: Start the Virtual BMCs
    become: true
    systemd:
      name: virtualbmc
      state: started
      enabled: yes
