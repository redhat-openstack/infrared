---
- name: Installing Virtual BMC and its requirements
  delegate_to: "{{ vbmc_inventory_host }}"
  vars:
    _is_py2_host: "{{ (ansible_distribution | default(RedHat)) in ['CentOS', 'RedHat'] and (ansible_distribution_major_version | default(7)) | int < 8 }}"
  block:
  - name: Install packages required for python-virtualbmc pip package
    package:
      name:
        - gcc
        - ipmitool
        - libvirt
        - libvirt-devel
        - "{{ (_is_py2_host | bool) | ternary('libvirt-python', 'python3-libvirt') }}"
        - "{{ (_is_py2_host | bool) | ternary('python-devel', 'python3-devel') }}"
      state: present
      disable_gpg_check: yes
    become: true

  - name: Collect the version of virtualenv that is installed (if any)
    shell: |
      virtualenv --version 2>/dev/null || echo 'none'
    args:
      executable: /bin/bash
    changed_when: false
    failed_when: false
    register: _virtualenv_version

  - name: Install python-virtualenv on hosts < RHEL8
    package:
      name: python-virtualenv
      state: present
      disable_gpg_check: yes
    become: true
    when:
      - _virtualenv_version.stdout | trim) == 'none'
      - _is_py2_host | bool

  # We use the OpenStack upper-constraints file to help
  # insulate us from problems with new releases of
  # pypi-sourced dependencies when installing virtualbmc.
  - name: Download the OpenStack upper-constraints file
    get_url:
      url: "https://releases.openstack.org/constraints/upper/master"
      dest: "{{ vbmc_home }}/vbmc-upper-constraints.txt"

  # We deliberately avoid downloading newer versions of pip,
  # setuptools and wheel when creating the virtualenv. By
  # doing this we avoid breaking every time one of them does
  # a new release. For python3 this is the default behaviour
  # when using 'python3 -m venv', but for the 'virtualenv'
  # tool we need to pass it a CLI argument.
  - name: Install python-virtualbmc with pip
    pip:
      name: virtualbmc
      version: "{{ vbmc_version }}"
      extra_args: "--constraint {{ vbmc_home }}/vbmc-upper-constraints.txt"
      virtualenv: "{{ vbmc_virtualenv }}"
      virtualenv_command: "{{ (_is_py2_host | bool) | ternary('/usr/bin/virtualenv --no-download', '/usr/bin/python3 -m venv') }}"
      # This is required to get access to the libvirt-python modules
      virtualenv_site_packages: yes

  # When a virtualenv is setup, it does not copy the selinux labels.
  # ref: https://github.com/pypa/virtualenv/issues/1334
  - name: Set the correct label on the virtualenv to allow systemd to start the service
    file:
      path: "{{ vbmc_virtualenv }}/bin"
      state: directory
      setype: "bin_t"
      recurse: yes

  - block:
    become: true
    - name: adds VirtualBMC as systemd service
      copy:
        mode: 0664
        dest: "/etc/systemd/system/virtualbmc.service"
        content: |
          [Unit]
          Description=Virtual Baseboard Management Controller Emulation service
          After=syslog.target network.target

          [Service]
          Type=simple
          User={{ vbmc_user }}
          ExecStart={{ vbmc_virtualenv }}/bin/python {{ vbmcd_bin }} --foreground
          Restart=always
          RestartSec=1

          [Install]
          WantedBy=multi-user.target

    - name: Create VirtualBMC directories
      file:
        path: "{{ item }}"
        state: directory
        mode: 0640
        owner: root
        group: root
      with_items:
        - "/etc/virtualbmc"
        - "/var/log/virtualbmc"

    - name: Create VirtualBMC configuration file
      copy:
        mode: 0640
        dest: "/etc/virtualbmc/virtualbmc.conf"
        content: |
          [default]
          config_dir= {{ vbmc_config_dir }}
          [log]
          logfile=/var/log/virtualbmc/virtualbmc.log
          debug=True
          [ipmi]
          session_timout=20

    - name: Restart virtualbmc
      service:
        name: virtualbmc
        state: restarted
        enabled: yes
        daemon_reload: yes
