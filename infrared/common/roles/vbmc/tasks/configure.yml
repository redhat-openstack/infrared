---
- block:
  - name: Stop and remove existing Virtual BMCs
    shell: |
        {{ vbmc_bin }} stop {{ hostvars[item].original_name|default(item) }}
        {{ vbmc_bin }} delete {{ hostvars[item].original_name|default(item) }}
    ignore_errors: true
    when:
      - item in hostvars
    with_items: "{{ vbmc_nodes }}"

  - name: Get current count of used vbmc ports
    shell: "{{ vbmc_bin | quote }} list | grep 62 | wc -l"
    register: vbmc_used_ports

  - name: Define vbmc_port for each VM
    set_fact:
        vbmc_ports: "{{ vbmc_ports|default({})|combine({ ((hostvars[item] | default({'original_name': item}))['original_name'] | default(item)): vbmc_start_port + vbmc_used_ports.stdout|int + index }) }}"
    loop: "{{ vbmc_nodes|flatten(levels=1) }}"
    loop_control:
      index_var: index

  - block:
      - name: Get the deployment prefix for multiply deployments
        set_fact:
            prefix: "{{ item.key }}"
        when: (item.key + "-") in groups.undercloud|first
        with_dict: "{{ hostvars[vbmc_hypervisor].ansible_local.deployment_info }}"
    when: "hostvars[vbmc_hypervisor].ansible_local.deployment_info is defined"

  - name: Setup prefix to empty if no deployments
    set_fact:
        prefix: ''
    when: "prefix is not defined"

  - set_fact:
        management_net: "{{ 'ansible_' + prefix|default('') + (prefix is defined and prefix|trim != '')|ternary('_','') + 'management' }}"

  - block:
    - name: Set management bmc address
      set_fact:
          vbmc_management_address: "{{ ansible_default_ipv4.address }}"
      when: vbmc_host == 'undercloud'

    # If the undercloud is a baremetal and user chooses hypervisor for vbmc_host, then
    # need to use hypervisor's ansible ipv4 address as undercloud can't reach hypervisor management address.
    - name: Set management bmc address
      set_fact:
          vbmc_management_address: "{{ ('undercloud_hypervisors' in groups) | ternary(hostvars[vbmc_hypervisor][management_net].ipv4.address, hostvars[vbmc_hypervisor]['ansible_default_ipv4']['address']) }}"
      when: vbmc_host == 'hypervisor'
    when: vbmc_management_address == ''

  - name: Set external network name
    set_fact:
        ansible_external_name: "{{ 'ansible_' + prefix|default('') + (prefix is defined and prefix|trim != '')|ternary('_','') + 'external' }}"

  - name: Set external network bmc address
    set_fact:
        vbmc_external_net_address:  "{{ hostvars[vbmc_hypervisor][ansible_external_name].ipv4.network }}/{{ hostvars[vbmc_hypervisor][ansible_external_name].ipv4.netmask }}"
    when: hostvars[vbmc_hypervisor][ansible_external_name] is defined

  - include_tasks: iptables.yml
    vars:
      ip_version: "{{ (vbmc_management_address | ipv6) | ternary('ipv6', 'ipv4') }}"

  - name: prepare vbmc_management_address_def to vbmc command
    set_fact:
      vbmc_management_address_def: "{{ (vbmc_management_address | ipv6)|ternary('', '::ffff:') + vbmc_management_address }}"

  - name: Add nodes to vbmc
    command: "{{ vbmc_bin }} add {{ item.key }} --port {{ item.value }} --username {{ install.vbmc.username }} --password {{ install.vbmc.password }} --address {{ vbmc_management_address_def }} \
              --libvirt-uri \"qemu+ssh://{{ hostvars[vbmc_hypervisor].ansible_user_id }}@{{ hostvars[vbmc_hypervisor][management_net].ipv4.address|default(hostvars[vbmc_hypervisor][ansible_external_name].ipv4.address) }}/system?no_verify=1&no_tty=1\""
    with_dict: "{{ vbmc_ports }}"
    when: vbmc_host == 'undercloud'
    retries: 3
    register: vbmc_result
    until: vbmc_result.rc == 0

  - name: Add nodes to vbmc
    command: "{{ vbmc_bin }} add {{ item.key }} --port {{ item.value }} --username {{ install.vbmc.username }} --password {{ install.vbmc.password }} --address {{ vbmc_management_address_def }}"
    with_dict: "{{ vbmc_ports }}"
    when: vbmc_host == 'hypervisor' and groups.hypervisor|count == 1

  # When a vm is added to inventory, it's jump host(hypervisor) will be added (to 'ProxyCommand') in 'ansible_ssh_common_args'.
  # In this task, we iterate through hypervisors and see if the hypervisor is part of vm's 'ansible_ssh_common_args'.
  - name: set vms host ips
    set_fact:
        vms_hypervisor_ip: "{{ vms_hypervisor_ip|default({})|combine({vbmc_ports[item[0]]: hostvars[item[1]].ansible_host}) }}"
    when: "hostvars[item[1]].ansible_host in hostvars[item[0]].ansible_ssh_common_args"
    with_nested:
     - "{{ vbmc_nodes }}"
     - "{{ groups.hypervisor }}"

  - name: Add nodes to vbmc
    command: "{{ vbmc_bin }} add {{ item.key }} --port {{ item.value }} --username {{ install.vbmc.username }} --password {{ install.vbmc.password }} --address {{ vbmc_management_address_def }} \
              --libvirt-uri \"qemu+ssh://{{ hostvars[vbmc_hypervisor].ansible_user_id }}@{{  vms_hypervisor_ip.get(item.value) }}/system?no_verify=1&no_tty=1\""
    with_dict: "{{ vbmc_ports }}"
    when: vbmc_host == 'hypervisor' and groups.hypervisor|count > 1

  - name: Start nodes using vbmc
    command: "{{ vbmc_bin }} start {{ item.key }}"
    with_dict: "{{ vbmc_ports }}"

  - name: Setting nodes power status using ipmitool
    command: "ipmitool -I lanplus -U {{ install.vbmc.username }} -P {{ install.vbmc.password }} -H {{ vbmc_management_address }} -p {{ item.value }} chassis power on"
    with_dict: "{{ vbmc_ports }}"
    register: command_result
    until: command_result.rc == 0
    retries: 5
    delay: 5

  - name: Get vbmc VMs power status using ipmitool
    command: "ipmitool -I lanplus -U {{ install.vbmc.username }} -P {{ install.vbmc.password }} -H {{ vbmc_management_address }} -p {{ item.value }} power status"
    register: ipmitool_results
    with_dict: "{{ vbmc_ports }}"
    until: ipmitool_results.rc == 0
    retries: 5
    delay: 5

  - name: Validate that all VMs are powered on
    fail:
        msg: "Node is not powered on! (ipmitool stdout: '{{ item.stdout }}')"
    when: "item.stdout != 'Chassis Power is on'"
    with_items: "{{ ipmitool_results.results }}"
  delegate_to: "{{  vbmc_inventory_host }}"
