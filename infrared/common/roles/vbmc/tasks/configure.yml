- block:
    - name: Add VirtualBMC as systemd service
      become: true
      copy:
        mode: 0664
        dest: "/usr/lib/systemd/system/virtualbmc.service"
        content: |
          [Unit]
          Description=VirtualBMC service
          After=network.target
          [Service]
          User={{ ansible_user|default(ansible_ssh_user) }}
          Type=oneshot
          ExecStart=/bin/bash -c 'for bmc in $(ls {{ ansible_user_dir }}/.vbmc/); do vbmc start $bmc; done'
          ExecStop=/bin/bash -c 'for bmc in $(ls {{ ansible_user_dir }}/.vbmc/); do vbmc stop $bmc; done'
          RemainAfterExit=yes
          [Install]
          WantedBy=multi-user.target

    - name: Start the Virtual BMCs
      become: true
      service:
        name: virtualbmc
        state: started
        enabled: true
  when: vbmc_host == 'undercloud'

- name: Remove existing Virtual BMCs
  # grab only lines with port number (more than 2 digits)
  shell: |
      vbmc stop {{ item }}
      vbmc delete {{ item }}
  ignore_errors: true
  with_items: "{{ vbmc_nodes }}"

- name: Get current count of used vbmc ports
  shell: vbmc list | grep 62 | wc -l
  register: vbmc_used_ports

- name: Define vbmc_port for each VM
  set_fact:
      vbmc_ports: "{{ vbmc_ports|default({})|combine({ item.1: vbmc_start_port + vbmc_used_ports.stdout|int + item.0 }) }}"
  with_indexed_items: "{{ vbmc_nodes }}"
  vars:
      vbmc_start_port: 6230

- include_tasks: iptables.yml

- name: Set management bmc address
  set_fact:
      vbmc_management_address: "{{ (vbmc_host == 'hypervisor')|ternary(hostvars['hypervisor'].ansible_management.ipv4.address, ansible_default_ipv4.address) }}"

- name: Add nodes to vbmc
  command: "vbmc add {{ item.key }} --port {{ item.value }} --username {{ install.vbmc.username }} --password {{ install.vbmc.password }} --address ::ffff:{{ vbmc_management_address }} \
            --libvirt-uri \"qemu+ssh://{{ hostvars['hypervisor'].ansible_user_id }}@{{ hostvars['hypervisor'].ansible_management.ipv4.address }}/system?no_verify=1&no_tty=1\""
  with_dict: "{{ vbmc_ports }}"
  when: vbmc_host == 'undercloud'

- name: Add nodes to vbmc
  command: "vbmc add {{ item.key }} --port {{ item.value }} --username {{ install.vbmc.username }} --password {{ install.vbmc.password }} --address ::ffff:{{ vbmc_management_address }}"
  with_dict: "{{ vbmc_ports }}"
  when: vbmc_host == 'hypervisor'

- name: Start nodes using vbmc
  command: "vbmc start {{ item.key }}"
  with_dict: "{{ vbmc_ports }}"

- name: Setting nodes power status using ipmitool
  command: "ipmitool -I lanplus -U {{ install.vbmc.username }} -P {{ install.vbmc.password }} -H {{ vbmc_management_address }} -p {{ item.value }} chassis power on"
  with_dict: "{{ vbmc_ports }}"
  register: command_result
  until: command_result.rc == 0
  retries: 5
  delay: 5

- name: Get vbmc VMs power status using ipmitool
  command: "ipmitool -I lanplus -U {{ install.vbmc.username }} -P {{ install.vbmc.password }} -H {{ vbmc_management_address }} -p {{ item.value }} power status"
  register: ipmitool_results
  with_dict: "{{ vbmc_ports }}"
  until: ipmitool_results.rc == 0
  retries: 5
  delay: 5

- name: Validate that all VMs are powered on
  fail:
      msg: "Node is not powered on! (ipmitool stdout: '{{ item.stdout }}')"
  when: "item.stdout != 'Chassis Power is on'"
  with_items: "{{ ipmitool_results.results }}"
