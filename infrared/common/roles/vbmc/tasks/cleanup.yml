- name: check for any vbmc processes
  command: pgrep vbmc
  register: vbmc_proc
  failed_when: false
  changed_when: false

- name: remove existing Virtual BMCs
  shell: |
      for node in `vbmc list | awk '/[0-9]{2}/ {print $2}'`
      do
          if [[ ${node} = *"{{ prefix|default('') }}"* ]]
          then
              vbmc stop ${node}
              vbmc delete ${node}
          fi
      done
  when: vbmc_proc.rc == 0
  failed_when: false

- name: check if we still have vbmc nodes
  shell: "vbmc list | awk '/[0-9]{2}/ {print $2}'|wc -l"
  register: vbmc_list

- block:
    - name: Stop Virtual BMCs if managed by systemd
      become: true
      systemd:
        name: virtualbmc
        state: stopped
        enabled: no
      ignore_errors: true

    - name: kill vbmc processes if not managed by systemd
      command: killall vbmc
      when: vbmc_proc.rc == 0
      ignore_errors: true

    - name: Remove package if installed from rpm
      package:
          name: "{{ item }}"
          state: absent
      with_items:
          - python-virtualbmc
          - python2-virtualbmc
      ignore_errors: true

    # pip can be missing on a target host.
    # so ignore errors and cleanup as much as possible
    - name: Remove package if installed from pip
      pip:
          name: virtualbmc
          state: absent
      ignore_errors: true

    - name: delete scripts and configuration files
      file:
          path: "{{ item }}"
          state: absent
      with_items:
          - /usr/lib/systemd/system/virtualbmc.service
      ignore_errors: true

  when: vbmc_list.stdout|int == 0
