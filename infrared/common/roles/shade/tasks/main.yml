---
- name: Install OpenStackSDK and its requirements
  vars:
    _is_py2_host: "{{ ansible_distribution in ['CentOS', 'RedHat'] and ansible_distribution_major_version | int < 8 }}"
  environment:
    # To enable the use of a non-package and user-local virtualenv,
    # we add a user-local bin path to PATH
    PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
  block:
  - name: Gather facts
    setup:

  - name: Install required packages
    package:
      name:
        - gcc
        - "{{ (_is_py2_host | bool) | ternary('python-devel', 'python3-devel') }}"
      state: present
    become: true
    register: _install_packages
    until: _install_packages is success
    retries: 5
    delay: 10

  - &find_virtualenv
    name: Collect the path for virtualenv if it is installed
    shell: |
      which virtualenv 2>/dev/null || echo 'none'
    args:
      executable: /bin/bash
    changed_when: false
    register: _virtualenv_path

  - name: Install python-virtualenv on hosts < RHEL8
    package:
      name: python-virtualenv
      state: present
    become: true
    register: _install_packages
    until: _install_packages is success
    retries: 5
    delay: 10
    when:
      - _virtualenv_path.stdout | trim == 'none'
      - _is_py2_host | bool

  # We use the OpenStack upper-constraints file to help
  # insulate us from problems with new releases of
  # pypi-sourced dependencies when installing openstacksdk.
  # Note:
  # We use the 'train' constraints for RHEL < 8 because it
  # is the last OpenStack release that tests both py2 and py3.
  # For RHEL >= 8 we use the 'master' constraints.
  - name: Download the OpenStack upper-constraints file
    get_url:
      url: "https://releases.openstack.org/constraints/upper/{{ (_is_py2_host | bool) | ternary('train', 'master') }}"
      dest: "{{ shade_path_venv | regex_replace('(/)+$', '') }}-shade-upper-constraints.txt"
      force: yes
    register: _download_constraints
    until: _download_constraints is success
    retries: 5
    delay: 10

  # If a venv exists, it may have an old version of setuptools
  # or corrupt in some other way. To make sure that we always
  # have a fresh start, we remove any existing virtualenv.
  - name: Remove any existing shade/openstacksdk virtualenv
    file:
      path: "{{ shade_path_venv }}"
      state: absent

  - name: Install openstacksdk
    block:
      # We deliberately avoid downloading newer versions of pip,
      # setuptools and wheel when creating the virtualenv. By
      # doing this we avoid breaking every time one of them does
      # a new release. For python3 this is the default behaviour
      # when using 'python3 -m venv', but for the 'virtualenv'
      # tool we need to pass it a CLI argument.
      - &install_task
        name: Install package from pypi
        vars:
          virtualenv_path: "{{ (_virtualenv_path.stdout | trim == 'none') | ternary('/usr/bin/virtualenv', _virtualenv_path.stdout | trim) }}"
        pip:
          name: openstacksdk
          extra_args: "--constraint {{ shade_path_venv | regex_replace('(/)+$', '') }}-shade-upper-constraints.txt"
          virtualenv: "{{ shade_path_venv }}"
          virtualenv_command: "{{ (_is_py2_host | bool) | ternary(virtualenv_path ~ ' --no-download', '/usr/bin/python3 -m venv') }}"
        register: _install_from_pypi
        until: _install_from_pypi is success
        retries: 5
        delay: 10
    rescue:
      # The host may have virtualenv installed in some other way
      # and have the package install blocked in its yum config.
      # To cater for this, we try to reinstall it in another way.
      - name: Reinstall virtualenv on hosts < RHEL8
        shell: |-
          exit_code=0
          if grep -qr "exclude.*python-virtualenv" /etc/yum*; then
              if python -m pip --version &>/dev/null; then
                  python -m pip uninstall -y virtualenv
                  python -m pip install virtualenv --constraint {{ shade_path_venv | regex_replace('(/)+$', '') }}-shade-upper-constraints.txt
                  exit_code=2
              else
                  echo "The package python-virtualenv is excluded from installs, but python has no pip module installed to install it from pypi."
                  exit_code=1
              fi
          else
              yum reinstall python-virtualenv
              exit_code=2
          fi
          exit ${exit_code}
        args:
          executable: /bin/bash
          warn: no
        register: _fix_virtualenv
        changed_when: _fix_virtualenv.rc == 2
        failed_when: _fix_virtualenv.rc not in [0,2]
        until: _fix_virtualenv is success
        retries: 5
        delay: 10
        when:
          - _is_py2_host | bool

      - *find_virtualenv

      - *install_task
