---
- name: Check if running inside virtualenv
  command: |
    python -c "import sys; print True if hasattr(sys, 'real_prefix') else False"
  register: is_venv

- name: install virtualenv requirments for pip
  become: yes
  package:
      name:
        - gcc
        - python-devel
        - python-setuptools
        - libffi-devel
      state: present

- name: install pip
  become: yes
  easy_install:
      name: pip

- name: install virtualenv pip module
  pip:
      name: virtualenv
      state: forcereinstall
      extra_args: "{{ (is_venv.stdout | bool) | ternary(omit, '--user') }}"

# required to avoid any conflicts in venv with
# different packages versions (especially shade)
- name: cleanup shade venv if present
  become: yes
  file:
      state: absent
      path: "{{ shade_path_venv }}"

# installing setuptools and pip must happen before other packages and separated
# do not use shimming for these two special packages
- name: shade virtualenv core deps
  vars:
      venv_cmd: "{{ ansible_env.HOME }}/.local/bin/virtualenv"
  pip:
      name: "{{ item }}"
      virtualenv: "{{ shade_path_venv }}"
      virtualenv_command: "{{ (is_venv.stdout | bool) | ternary(omit, venv_cmd) }}"
  with_items:
    - setuptools>=39.0.0
    - pip>=10.0.1

- name: shade virtualenv deps
  vars:
      venv_cmd: "{{ ansible_env.HOME }}/.local/bin/virtualenv"
  pip:
      name:
        - pytz==2016.4
        - cmd2==0.8.6
        - shade>=1.25
      # TODO: unpin shade to avoid other conflicts
      virtualenv: "{{ shade_path_venv }}"
      virtualenv_command: "{{ (is_venv.stdout | bool) | ternary(omit, venv_cmd) }}"
