---
- name: Install OpenStackSDK and its requirements
  vars:
    _is_py2_host: "{{ ansible_distribution in ['CentOS', 'RedHat'] and ansible_distribution_major_version | int < 8 }}"
  environment:
    # To enable the use of a non-package and user-local virtualenv,
    # we add a user-local bin path to PATH
    PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
  block:
  - name: Gather facts
    setup:

  - name: Install packages required for python-virtualbmc pip package
    package:
      name:
        - gcc
        - "{{ (_is_py2_host | bool) | ternary('python-devel', 'python3-devel') }}"
      state: present
    become: true

  - name: Collect the path for virtualenv if it is installed
    shell: |
      which virtualenv 2>/dev/null || echo 'none'
    args:
      executable: /bin/bash
    changed_when: false
    register: _virtualenv_path

  - name: Install python-virtualenv on hosts < RHEL8
    package:
      name: python-virtualenv
      state: present
    become: true
    when:
      - _virtualenv_path.stdout | trim == 'none'
      - _is_py2_host | bool

  # We deliberately avoid downloading newer versions of pip,
  # setuptools and wheel when creating the virtualenv. By
  # doing this we avoid breaking every time one of them does
  # a new release. For python3 this is the default behaviour
  # when using 'python3 -m venv', but for the 'virtualenv'
  # tool we need to pass it a CLI argument.
  # We use the OpenStack upper-constraints file to help
  # insulate us from problems with new releases of
  # pypi-sourced dependencies when installing openstacksdk.
  # Note:
  # We use the 'train' constraints for RHEL < 8 because it
  # is the last OpenStack release that tests both py2 and py3.
  # For RHEL >= 8 we use the 'master' constraints.
  - name: Install python-virtualbmc with pip
    vars:
      virtualenv_path: "{{ (_virtualenv_path.stdout | trim == 'none') | ternary('/usr/bin/virtualenv', _virtualenv_path.stdout | trim) }}"
    pip:
      name: openstacksdk
      extra_args: "--constraint https://releases.openstack.org/constraints/upper/{{ (_is_py2_host | bool) | ternary('train', 'master') }}"
      virtualenv: "{{ shade_path_venv }}"
      virtualenv_command: "{{ (_is_py2_host | bool) | ternary(virtualenv_path ~ ' --no-download', '/usr/bin/python3 -m venv') }}"
