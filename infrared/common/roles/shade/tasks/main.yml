---
- name: Check if running inside virtualenv
  command: |
      {{ ansible_python_interpreter | default('python') }} -c "import sys; print(True if hasattr(sys, 'real_prefix') else False)"
  register: is_venv

- set_fact:
    install_pip_from_source: "{{ (false in src_conditions) | ternary(False, True) }}"
  vars:
    src_conditions:
      - "{{ ansible_distribution in ['CentOS', 'RedHat'] }}"
      - "{{ ansible_distribution_major_version | int >= 8 }}"

- name: install virtualenv requirments for pip
  become: yes
  package:
      name:
        - gcc
        - "{{ (install_pip_from_source) | ternary('python3-devel', 'python-devel') }}"
        - "{{ (install_pip_from_source) | ternary('python3-setuptools', 'python-setuptools') }}"
        - libffi-devel
      state: present

- block:
    - name: Download get-pip.py
      get_url:
        url: "https://bootstrap.pypa.io/get-pip.py"
        dest: "/tmp/get-pip.py"
        mode: 0755
        force: yes
        validate_certs: no
      register: get_pip

    - name: Install pip using get-pip.py
      command: "{{ ansible_python_interpreter | default('python') }} {{ get_pip.dest }}"
      become: true
  when: install_pip_from_source
  tags: install-pip


#TODO(aopincar): Check if there is a reason not install pip from source only
- name: install pip using easy_install
  become: yes
  easy_install:
      name: pip
  when: not install_pip_from_source
  tags: install-pip

- name: install virtualenv pip module
  environment:
     PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
  pip:
      name: virtualenv
      state: forcereinstall
      extra_args: "{{ (is_venv.stdout | bool) | ternary(omit, '--user') }}"

# required to avoid any conflicts in venv with
# different packages versions (especially shade)
- name: cleanup shade venv if present
  become: yes
  file:
      state: absent
      path: "{{ shade_path_venv }}"

# installing setuptools and pip must happen before other packages and separated
# do not use shimming for these two special packages
- name: shade virtualenv core deps
  vars:
      venv_cmd: "{{ ansible_env.HOME }}/.local/bin/virtualenv"
  pip:
      name: "{{ item }}"
      virtualenv: "{{ shade_path_venv }}"
      virtualenv_command: "{{ (is_venv.stdout | bool) | ternary(omit, venv_cmd) }}"
  with_items:
    - setuptools>=39.0.0
    - pip>=10.0.1

- name: shade virtualenv deps
  vars:
      venv_cmd: "{{ ansible_env.HOME }}/.local/bin/virtualenv"
  pip:
      name:
        - pytz==2016.4
        - cmd2==0.8.6
        - shade>=1.25
      # TODO: unpin shade to avoid other conflicts
      virtualenv: "{{ shade_path_venv }}"
      virtualenv_command: "{{ (is_venv.stdout | bool) | ternary(omit, venv_cmd) }}"
