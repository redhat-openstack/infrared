---
- block:
  - name: Include VIPs configuration vars
    include_vars:
      file: "vars/public-vips-{{ (freeipa_network_protocol == 'ipv4') | ternary('ipv4','ipv6') }}.yml"

  - name: Install deltarpm
    become: yes
    package:
      name: 'deltarpm'
      state: present
    when:
        - ansible_distribution in ['CentOS', 'RedHat']
        - ansible_distribution_major_version < '8'

  - name: Install RHEL7 packages
    become: yes
    package:
      name:
        - 'net-tools'
        - "{{ freeipa_rhel7_epel_repo_url }}"
      state: present
    when:
        - ansible_distribution in ['CentOS', 'RedHat']
        - ansible_distribution_major_version == '7'

  - name: Install RHEL8 packages
    become: yes
    package:
      name:
        - 'net-tools'
        - 'iptables'
        - 'iptables-services'
      state: present
    when:
        - ansible_distribution in ['CentOS', 'RedHat']
        - ansible_distribution_major_version == '8'

  - name: Enable additional repository for RHEL7
    become: yes
    command: yum-config-manager --enable {{ item }}
    loop: "{{ freeipa_rhel7_additional_repos }}"
    when:
        - ansible_distribution in ['CentOS', 'RedHat']
        - ansible_distribution_major_version == '7'

  - name: Enable additional dnf modules for RHEL8
    become: yes
    command: dnf module enable {{ item }} -y
    loop: "{{ freeipa_rhel8_dnf_modules }}"
    when:
        - ansible_distribution in ['CentOS', 'RedHat']
        - ansible_distribution_major_version == '8'

  # This can be removed once rhbz#1892216 is fixed and released
  # We need to install openjdk beforehand (as it is installed by the freeipa)
  # script and then downgrade it in case the version is the known broken one
  # The 1.8.0.275.b01 version of JDK is still broken. We need to downgrade
  # to proper version.
  - name: Workaround for broken versions of openjdk
    become: yes
    yum:
      name:
        - java-1.8.0-openjdk
        - java-1.8.0-openjdk-headless
      state: latest
      exclude:
      - java-1.8.0-openjdk-1:1.8.0.275.b01-0.el8_2
      - java-1.8.0-openjdk-headless-1:1.8.0.275.b01-0.el8_2
      - java-1.8.0-openjdk-1:1.8.0.272.b10
      - java-1.8.0-openjdk-headless-1:1.8.0.272.b10
      - java-1.8.0-openjdk-1:1.8.0.282.b08-1.el8_2
      - java-1.8.0-openjdk-headless-1:1.8.0.282.b08-1.el8_2
      allow_downgrade: yes
    when:
        - ansible_distribution in ['CentOS', 'RedHat']
        - ansible_distribution_major_version is version("9", "<")

  - name: Install Red Hat CA
    become: yes
    shell: |
        update-ca-trust enable
        curl https://password.corp.redhat.com/RH-IT-Root-CA.crt -o /etc/pki/ca-trust/source/anchors/2015-RH-IT-Root-CA.pem
        update-ca-trust extract

  - name: Update repos
    become: yes
    command: yum -y update

  - name: Enable iptables service for RHEL8
    become: yes
    service:
        name: iptables
        enabled: yes
        state: restarted
    when:
        - ansible_distribution in ['CentOS', 'RedHat']
        - ansible_distribution_major_version == '8'

  - when:
      - ansible_distribution in ['CentOS', 'RedHat']
      - ansible_distribution_major_version is version("9", "<")
    block:
      - name: Download freeipa setup script (RHEL<9)
        get_url:
           url: "{{ freeipa_setup_script }}"
           dest: "{{ freeipa_working_dir }}/freeipa_setup.sh"
           mode: 775
           validate_certs: "{{ ansible_facts['distribution_version'] is version('7.9', '>=') }}"

      - name: Generate freeipa environment file (RHEL<9)
        template:
            dest: "{{ freeipa_working_dir }}/freeipa-setup.env"
            src: freeipa-setup.env.j2
            force: yes

      - name: Add w/a for ipv6 link local
        lineinfile:
            path: "{{ freeipa_working_dir }}/freeipa_setup.sh"
            insertafter: '^# Set up FreeIPA'
            line: "sed -i '/^nameserver fe80:.*./d' /etc/resolv.conf"
            state: present

      - name: Execute freeipa script (RHEL<9)
        become: yes
        command: "{{ freeipa_working_dir }}/freeipa_setup.sh"
        register: freeipa_setup

      - name: Configure FreeIPA to publish Master CRL at start (RHEL<9)
        become: yes
        lineinfile:
            path: /etc/pki/pki-tomcat/ca/CS.cfg
            regexp: '^ca.crl.MasterCRL.publishOnStart=(.*)$'
            line: 'ca.crl.MasterCRL.publishOnStart=true'

  - when:
      - ansible_distribution in ['CentOS', 'RedHat']
      - ansible_distribution_major_version is version("9", ">=")
    block:
      - name: find the current nameservers from /etc/resolv.conf - will be used as ipa server dns forwarders
        shell: grep "^nameserver" /etc/resolv.conf | grep -v "fe80\:.*" | cut -d' ' -f 2
        register: resolv_conf

      - name: include freeipa-setup role (from tripleo-quickstart-extras) (RHEL>=9)
        include_role:
          name: freeipa-setup
          apply:
            become: true
        vars:
          freeipa_hostname: "{{ freeipa_node }}.{{ freeipa_domain }}"
          freeipa_server_hostname: "{{ freeipa_node }}.{{ freeipa_domain }}"
          freeipa_ip: "{{ freeipa_node_ipaddress }}"
          freeipa_domain: "{{ (install|default({})).get('freeipa', {}).get('domain', 'redhat.local') }}"
          freeipa_admin_password: 12345678
          directory_manager_password: "{{ freeipa_directory_manager_password }}"
          undercloud_fqdn: "{{ groups['undercloud'][0] }}.{{ freeipa_domain }}"
          # TODO: 'allow-zone-overlap' is passed to 'ipa-server-install' for rhel7/8 - it needs to be checked is it required for rhel9 too
          ipa_server_install_params: "--no-dnssec-validation --allow-zone-overlap"
          undercloud_enable_novajoin: "{{ freeipa_enable_novajoin }}"
          supplemental_user: root
          custom_nameserver: "{{ resolv_conf.stdout_lines }}"
          # the below are set to prevent freeipa-setup role to configure undercloud and let this tls-everywhere role to do that
          # possible TODO to reuse freeipa-setup role for it
          enable_tls_everywhere: false
          prepare_ipa: false
          deploy_supplemental_node: false

  - name: Does the DNS ACL exist
    become: yes
    shell: >-
      ldapsearch -LLL -x -D "cn=Directory Manager" -w {{ freeipa_directory_manager_password }} -s base
      -b cn=dns,dc={{ freeipa_domain.split(".")[0] }},dc={{ freeipa_domain.split(".")[1] }}
      aci='*Allow hosts to read DNS A/AAA/CNAME/PTR records*' numSubordinates |
      sed -n 's/^[ \t]*numSubordinates:[ \t]*\(.*\)/\1/p'
    register: dns_aci_count
    ignore_errors: true

  - name: Add ACL to allow hosts access to DNS
    become: yes
    shell:
      cmd: |
        cat << EOF | ldapmodify -x -D "cn=Directory Manager" -w {{ freeipa_directory_manager_password }}
        dn: cn=dns,dc={{ freeipa_domain.split(".")[0] }},dc={{ freeipa_domain.split(".")[1] }}
        changetype: modify
        add: aci
        aci: (targetattr = "aaaarecord || arecord || cnamerecord || idnsname || objectclass || ptrrecord")(targetfilter = "(&(objectclass=idnsrecord)(|(aaaarecord=*)(arecord=*)(cnamerecord=*)(ptrrecord=*)(idnsZoneActive=TRUE)))")(version 3.0; acl "Allow hosts to read DNS A/AAA/CNAME/PTR records"; allow (read,search,compare) userdn = "ldap:///fqdn=*,cn=computers,cn=accounts,dc={{ freeipa_domain.split('.')[0] }},dc={{ freeipa_domain.split('.')[1] }}";)
        EOF
    when: dns_aci_count.stdout|default(0)|int == 0

  - name: Add DNS zone when needed
    become: yes
    shell: |
        echo {{ freeipa_admin_password }}|kinit admin
        ipa dnszone-add {{ freeipa_cloud_domain }}
    when: freeipa_cloud_domain != freeipa_domain

  - name: Configure FreeIPA DNS for overcloud public_vip
    become: yes
    shell: |
        echo {{ freeipa_admin_password }}|kinit admin
        ipa dnsrecord-add {{ freeipa_cloud_domain }} overcloud {{ (tls_everywhere.network.public_vip|ipv6)|default(False)|ternary('--aaaa-rec','--a-rec') }} {{ tls_everywhere.network.public_vip }}
        ipa dnszone-add ctlplane.{{ freeipa_cloud_domain }}
        ipa dnsrecord-add ctlplane.{{ freeipa_cloud_domain }} overcloud {{ (tls_everywhere.network.control_vip|ipv6)|default(False)|ternary('--aaaa-rec','--a-rec') }} {{ tls_everywhere.network.control_vip }}
        ipa dnszone-add internalapi.{{ freeipa_cloud_domain }}
        ipa dnsrecord-add internalapi.{{ freeipa_cloud_domain }} overcloud {{ (tls_everywhere.network.internalapi_vip|ipv6)|default(False)|ternary('--aaaa-rec','--a-rec') }} {{ tls_everywhere.network.internalapi_vip }}
        ipa dnszone-add storage.{{ freeipa_cloud_domain }}
        ipa dnsrecord-add storage.{{ freeipa_cloud_domain }} overcloud {{ (tls_everywhere.network.storage_vip|ipv6)|default(False)|ternary('--aaaa-rec','--a-rec') }} {{ tls_everywhere.network.storage_vip }}
        ipa dnszone-add storagemgmt.{{ freeipa_cloud_domain }}
        ipa dnsrecord-add storagemgmt.{{ freeipa_cloud_domain }} overcloud {{ (tls_everywhere.network.storagemgmt_vip|ipv6)|default(False)|ternary('--aaaa-rec','--a-rec') }} {{ tls_everywhere.network.storagemgmt_vip }}
    register: overcloud_dns_entries

  - name: gather facts from the hypervisor
    setup:
    delegate_to: hypervisor
    delegate_facts: true

  - name: Configure FreeIPA DNS Forwarder from hypervisor
    become: yes
    shell: |
        echo {{ freeipa_admin_password }}|kinit admin
        ipa dnsconfig-mod --forwarder={{ hostvars['hypervisor'].ansible_dns.nameservers[0] }} --forward-policy=only
    when: freeipa_forwarder == 'hypervisor'

  - name: Configure FreeIPA DNS Forwarder from parameter
    become: yes
    shell: |
        echo {{ freeipa_admin_password }}|kinit admin
        ipa dnsconfig-mod --forwarder={{ freeipa_forwarder }} --forward-policy=only
    when: freeipa_forwarder != 'hypervisor'

  - name: Allow DNS recursion on FreeIPA (newer than RHEL8.2)
    become: yes
    lineinfile:
        path: /etc/named/ipa-options-ext.conf
        line: "allow-query { any; };"
    when:
        - ansible_distribution_version is version('8.2', '>')

  - name: Allow DNS recursion on FreeIPA (older than RHEL8.3)
    become: yes
    lineinfile:
        insertafter: '^options {'
        path: /etc/named.conf
        line: "        allow-query { any; };"
    when:
        - ansible_distribution_version is version('8.2', '<=')

  - name: Check for existence of /etc/sysconfig/iptables file
    stat:
       path: /etc/sysconfig/iptables
    register: iptables_file

  - block:
    - name: Ensure DNS query isn't blocked by iptables
      become: yes
      iptables:
          action: insert
          comment: "Allow DNS query"
          table: filter
          chain: INPUT
          jump: ACCEPT
          protocol: "udp"
          destination_port: 53

    - name: Save iptables rules
      become: yes
      shell: service iptables save
    when: iptables_file.stat.exists

  - name: Restart FreeIPA server
    become: yes
    service:
        name: ipa
        state: restarted

  - name: Create systemd resolv.conf
    become: yes
    copy:
        dest: "/usr/lib/systemd/resolv.conf"
        content: |
            search {{ freeipa_cloud_domain }}
            nameserver 127.0.0.1

  - name: Create a symbolic link of systemd resolv.conf
    become: yes
    file:
        src: "/usr/lib/systemd/resolv.conf"
        dest: "/etc/resolv.conf"
        owner: root
        group: root
        state: link
        force: yes

  - name: Update /etc/hosts with undercloud's details
    become: yes
    lineinfile:
        dest: "/etc/hosts"
        line: "{{ freeipa_undercloud_ipaddress }} {{ groups['undercloud'][0] }}.{{ freeipa_cloud_domain }} {{ groups['undercloud'][0] }}"
        state: present

  - block:
    - name: Set default IPv6 gateway on FreeIPA server
      become: yes
      shell: |
          nmcli connection modify "System {{ freeipa_external_interface }}" ipv6.never-default no
          nmcli connection modify "System {{ freeipa_external_interface }}" ipv6.addresses "{{ freeipa_node_ipaddress }}/64"
          nmcli connection modify "System {{ freeipa_external_interface }}" ipv6.gateway "2620:52:0:13b8::fe"

    - name: Restart interface eth2
      become: yes
      shell: nmcli connection up "System {{ freeipa_external_interface }}"
    when:
      - freeipa_network_protocol != 'ipv4'
      - not install.bgp.enabled
  delegate_to: "{{ freeipa_node }}"

