---
# This playbook is used to enable external network access to deployments.
# It does not create private networks and router as it is user's responsibility.
# Playbook is idempotent
# This playbook uses ansible openstack modules from localhost as it has mandatory shade
- name: External network creation
  hosts: controller[0]
#  hosts: localhost
  gather_facts: no
  any_errors_fatal: true
#  vars:
#      first_controller: "{{ groups.controller | first }}"
  tasks:
      - name: get the default floating ip pool name from the controller
#        delegate_to: "{{ first_controller }}"
        become: yes
        shell: "grep -oP '(?<=default_floating_pool=)(.*$)' /etc/nova/nova.conf"
        register: pool_name

      # create shade venv on target machine
      # TODO(yfried): remove this if/when packstack uses floating ips and localhost can access cloud
      - block:
          - name: install virtualenv requirments for pip
            become: yes
            yum:
                name: "{{ item }}"
                state: present
            with_items:
               - python-virtualenv
               - gcc
               - python-devel

          - name: create shade virtualenv
            pip:
                name: "{{ item.key }}"
                version: "{{ item.value }}"
                virtualenv: "{{ path_venv }}"
            with_dict:
                setuptools: "17.0"
                pytz: "2016.4"
                shade: "1.7.0"
                pip: "8.1"
        vars:
            path_venv: "/tmp/venv_shade"

      # TODO(yfried): if/when packstack uses floating ips and localhost can access cloud
      # Use inject floatingip to access controller from localhost
      # FLOATING_URL=$(echo "$OS_AUTH_URL" | sed -r 's/(\b[0-9]{1,3}\.){3}[0-9]{1,3}\b'/{{ hostvars[first_controller].ansible_ssh_host }}/)
      - name: grab auth data from openstackrc file and publish it as YAML
#        delegate_to: "{{ first_controller }}"
        become: yes
        shell: |
            source /root/keystonerc_admin
            echo "
            auth_url: $OS_AUTH_URL
            username: $OS_USERNAME
            password: $OS_PASSWORD
            project_name: $OS_TENANT_NAME
            "
        register: creds

      # TODO(yfried): Use localhost where shade is mandatory
      - name: create the external network
        vars:
            # Here can't be used {{ path_venv }}, because it's not a Jinja template
            ansible_python_interpreter: "/tmp/venv_shade/bin/python"
        os_network:
            auth: "{{ creds.stdout | from_yaml }}"
            name: "{{ pool_name.stdout_lines|last }}"
            external: yes
            shared: no
            provider_physical_network: "{{ installer.network.label }}"
            provider_network_type: "{{ installer.network.external.provider_network_type }}"
            provider_segmentation_id: "{{ ('vlan' == installer.network.external.provider_network_type) | ternary(installer.network.external.provider_segmentation_id, omit) }}"
        register: net_create

      - name: create the external subnet
        vars:
            # Here can't be used {{ path_venv }}, because it's not a Jinja template
            ansible_python_interpreter: "/tmp/venv_shade/bin/python"
            # It's cleaner to define top defaults first
            subnet: "{{ installer.public.subnet|default({}) }}"
            pool: "{{ subnet.allocation_pool|default({}) }}"
            # Check that provisioner data is discoverable if not, all its values are set to False and will trigger "omit"
            # Module will fail if data is not discoverable or provided by user.
            p_data: "{{ ((((provisioner|default({})).neutron|default({})).subnets|default({})).external|default({})).nested|default({}) }}"
            p_cidr: "{{ p_data.subnet_cidr|default(False) }}"
            p_gateway: "{{ p_data.subnet_gateway|default(False) }}"
            p_pool_start: "{{ p_data.allocation_pool_start|default(False) }}"
            p_pool_end: "{{ p_data.allocation_pool_end|default(False) }}"
        os_subnet:
            auth: "{{ creds.stdout | from_yaml }}"
            name: external_subnet
            network_name: "{{ net_create.network.name }}"
            enable_dhcp: no
            cidr: "{{ subnet.cidr|default(p_cidr or omit) }}"
            gateway_ip: "{{ subnet.gateway|default(p_gateway or omit) }}"
            allocation_pool_start: "{{ pool.start|default(p_pool_start or omit) }}"
            allocation_pool_end: "{{ pool.end|default(p_pool_end or omit) }}"
        register: subnet_create
