# Rhel 6.x has only python 2.6 isntalled which is not supported by the shade
# thus we cannot use OS modules there
# Falling back to the quantum_network usage.
- set_fact:
    auth_info: "{{ creds.stdout | from_yaml }}"

- name: print auth details
  debug: var=auth_info

- debug: msg="{{ pool_name.stdout_lines|last }}"

  # workaround to overcome https://bugzilla.redhat.com/show_bug.cgi?id=1133446
  # which is sometimes reporducible for 6.7 deployments
- name: restart all the network services
  become: yes
  service:
      name: "{{ item }}"
      state: restarted
  with_items:
      - network
      - neutron-openvswitch-agent
      - neutron-server

- name: ensure opensvitsh will use correct external bridge
  become: yes
  shell: |
      ovs-vsctl br-set-external-id {{ installer.network.external.vlan.bridge }} bridge-id {{ installer.network.external.vlan.bridge }}

- name: restart openvswitch-agent
  become: yes
  service:
      name: neutron-openvswitch-agent
      state: restarted

- name: show the ovs-vsctl output
  become: yes
  shell: ovs-vsctl show

- name: Create external network - neutron
  quantum_network:
      state: present
      auth_url: "{{ auth_info['auth_url'] }}"
      login_username: "{{ auth_info['username'] }}"
      login_password: "{{ auth_info['password'] }}"
      login_tenant_name: "{{ auth_info['project_name'] }}"
      name: "{{ pool_name.stdout_lines|last }}"
      provider_network_type: "{{ installer.network.external.provider_network_type }}"
      provider_physical_network: "{{ installer.network.label }}"
      provider_segmentation_id: "{{ ('vlan' == installer.network.external.provider_network_type) | ternary(installer.network.external.provider_segmentation_id, omit) }}"
      router_external: yes
      shared: no
      admin_state_up: yes

- name: Create subnet for external network - neutron
  vars:
      # It's cleaner to define top defaults first
      subnet: "{{ installer.public.subnet|default({}) }}"
      pool: "{{ subnet.allocation_pool|default({}) }}"
      # Check that provisioner data is discoverable if not, all its values are set to False and will trigger "omit"
      # Module will fail if data is not discoverable or provided by user.
      p_data: "{{ ((((provisioner|default({})).neutron|default({})).subnets|default({})).external|default({})).nested|default({}) }}"
      p_cidr: "{{ p_data.subnet_cidr|default(False) }}"
      p_gateway: "{{ p_data.subnet_gateway|default(False) }}"
      p_pool_start: "{{ p_data.allocation_pool_start|default(False) }}"
      p_pool_end: "{{ p_data.allocation_pool_end|default(False) }}"
  quantum_subnet:
      state: present
      auth_url: "{{ auth_info['auth_url'] }}"
      login_username: "{{ auth_info['username'] }}"
      login_password: "{{ auth_info['password'] }}"
      login_tenant_name: "{{ auth_info['project_name'] }}"
      tenant_name: "{{ auth_info['project_name'] }}"
      network_name: "{{ installer.network.name }}"
      name: external-subnet
      enable_dhcp: False
      gateway_ip: "{{ subnet.gateway|default(p_gateway or omit) }}"
      cidr: "{{ subnet.cidr|default(p_cidr or omit) }}"
      allocation_pool_start: "{{ pool.start|default(p_pool_start or omit) }}"
      allocation_pool_end: "{{ pool.end|default(p_pool_end or omit) }}"


