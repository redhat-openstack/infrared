---
# Any step that should happen after the deployment of the osp-d playbook
# This could be create ssh forwarding to the nodes, validation of installation, etc
- include: "backup-undercloud.yml"
  tags: backup
  when: "backup is defined"

- name: Post tasks
  hosts: undercloud
  gather_facts: no
  become: yes
  become_user: "{{ installer.user.name }}"
  vars:
      privkey: "{{ inventory_dir }}/id_rsa_overcloud"
      user: heat-admin
      password: redhat
      undercloud_rc: stackrc
  tasks:
      - name: fetch the private key file from the undercloud
        fetch:
            src: "~/.ssh/id_rsa"
            dest: "{{ inventory_dir }}/id_rsa_overcloud"
            flat: yes

      - name: update file permissions
        delegate_to: localhost
        become: no
        file:
            path: "{{ inventory_dir }}/id_rsa_overcloud"
            mode: 0600

      - shell: "cat {{ undercloud_rc }} | grep AUTH | cut -d '=' -f 2"
        register: oc_auth

      - shell: "cat {{ undercloud_rc }} | grep USERNAME | cut -d '=' -f 2"
        register: oc_username

      - shell: "cat {{ undercloud_rc }} | grep TENANT | cut -d '=' -f 2"
        register: oc_tenant

      - shell: "source {{ undercloud_rc }} && env | grep OS_PASSWORD | cut -d '=' -f 2"
        args:
            executable: /bin/bash
        register: oc_password

      - block:
          - pip:
                name: "{{ item.key }}"
                version: "{{ item.value }}"
                virtualenv: "{{ path_venv }}"
            with_dict:
                setuptools: "17.0"
                pytz: "2016.4"
                shade: "1.7.0"
                pip: "8.1"

          - name: update IP of overcloud nodes
            vars:
                # Here can't be used {{ path_venv }}, because it's not a Jinja template
                ansible_python_interpreter: "/tmp/venv_server_facts/bin/python"
            os_server_facts:
                auth:
                    auth_url: "{{ oc_auth.stdout }}"
                    username: "{{ oc_username.stdout }}"
                    password: "{{ oc_password.stdout }}"
                    project_name: "{{ oc_tenant.stdout }}"

          - name: add hosts to host list
            add_host:
                # convert nova output (overcloud-NODE-COUNT) to ansible node names (NODE-COUNT)
                name: "{{ item.name.split('-',1)[1]|replace('cephstorage', 'ceph') }}"
                groups: "{{ hostvars[item.name.split('-',1)[1]|replace('cephstorage', 'ceph')].group_names | reject('equalto', 'ungrouped') | join(',') }}"
                ansible_user: "{{ user }}"
                ansible_ssh_pass: "{{ password }}"
                ansible_host: "{{ item.accessIPv4 }}"
                ansible_ssh_private_key_file: "{{ privkey }}"
            with_items: "{{ openstack_servers }}"
        vars:
            path_venv: /tmp/venv_server_facts


      - block:
          - name: update ansible.ssh.config template
            template:
                src: "{{ inventory_dir }}/roles/provisioner/virsh/templates/ansible.ssh.config.j2"
                dest: "{{ inventory_dir }}/ansible.ssh.config"

          - name: Generate new Inventory file
            template:
              dest: "{{ lookup('env', 'PWD') }}/hosts-{{ lookup('env', 'USER') }}"
              src: "{{ inventory_dir }}/templates/inventory.j2"

          - name: Copy the keystonerc file for the tester
            fetch:
                src: "~/overcloudrc"
                dest: "{{ inventory_dir }}/keystonerc"
                flat: yes

          - name: Copy the tempest-deployer-input.conf file for the tester
            fetch:
                src: "~/tempest-deployer-input.conf"
                dest: "{{ inventory_dir }}/tempest-deployer-input.conf"
                flat: yes
        delegate_to: localhost
        become: no

#TODO: remove this when the templating system is in place
- name: External network creation
  hosts: undercloud
  gather_facts: no
  become: yes
  become_user: "{{ installer.user.name }}"
  tasks:
      - name: Get the controller nodes IPs
        shell: "source ~/stackrc; nova list | awk '/controller/ {print $12}' | grep -oP '[0-9.]+'"
        register: ip_list

      - name: get the default floating ip pool name from the controller
        shell: "ssh -o StrictHostKeyChecking=no -l heat-admin {{ ip_list.stdout_lines|last }} 'sudo grep -oP \"(?<=default_floating_pool=)(.*$)\" /etc/nova/nova.conf'"
        register: pool_name

      - name: create the external network
        shell: "source ~/overcloudrc; neutron net-create {{ pool_name.stdout_lines|last }} --router:external --provider:physical_network datacentre --provider:network_type flat"

        # TODO: move the hard coded value to a variable
      - name: create the external subnet
        shell: "source ~/overcloudrc; neutron subnet-create {{ pool_name.stdout_lines|last }} 10.0.0.1/24 --name external_subnet --enable-dhcp=False --allocation-pool start=10.0.0.210,end=10.0.0.250 --gateway 10.0.0.1"
