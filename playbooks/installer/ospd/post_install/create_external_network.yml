---
# This playbook is used to enable external network access to virthost or baremetal deployments and it is
# intended to be used as post-deployment step. It does not create private networks and router as it is
# users responsibility.
# This playbook gathers data from template_base used in ospd installer!
# Playbook is idempotent
# This playbook uses ansible openstack modules and assumes the undercloud already has
# a virtualenv containing shade.
# venv is created in playbooks/installer/ospd/ospd_inventory_update.yml as /tmp/venv_shade

- name: External network creation
  hosts: undercloud
  gather_facts: no
  become: yes
  become_user: "{{ installer.user.name }}"
  vars:
      first_controller: "{{ groups.controller | first }}"
      template_base: "/home/{{ installer.user.name }}/{{ installer.deployment.files.rstrip('/') | basename }}"
      network_environment_file: "network-environment{{ (installer.network.protocol == 'ipv6') | ternary('-v6','') }}.yaml"
      physnet_name: datacentre
  tasks:
      - name: get the default floating ip pool name from the controller
        shell: "grep -oP \"(?<=default_floating_pool=)(.*$)\" /etc/nova/nova.conf"
        register: pool_name
        delegate_to: "{{ first_controller }}"
        become_user: root
        become: yes

      - name: read deployment network configuration
        command: "cat {{ template_base }}/network/{{ network_environment_file }}"
        register: network_template_out

      - name: load deployment network configuration as YAML
        set_fact:
            network_template:  "{{ network_template_out.stdout | from_yaml }}"

      - name: grab auth data from openstackrc file and publish it as YAML
        vars:
        shell: |
            source ~/overcloudrc
            echo "
            auth_url: $OS_AUTH_URL
            username: $OS_USERNAME
            password: $OS_PASSWORD
            project_name: $OS_TENANT_NAME
            "
        register: creds

      - name: create the external network
        vars:
            vlan_id: "{{ network_template.parameter_defaults.ExternalNetworkVlanID|default('') }}"
            # Here can't be used {{ path_venv }}, because it's not a Jinja template
            ansible_python_interpreter: "/tmp/venv_shade/bin/python"
            auth: "{{ creds.stdout | from_yaml }}"
        os_network:
            auth: "{{ auth }}"
            name: "{{ pool_name.stdout_lines|last }}"
            external: yes
            shared: no
            provider_physical_network: "{{ physnet_name }}"
            provider_network_type: "{{ physnet_type }}"
            provider_segmentation_id: "{{ ('vlan' == physnet_type) | ternary(vlan_id, omit) }}"
        register: net_create

      # OSPD "External*" data can't be used to discover subnet details because:
      #     1) IPv6 public network is not supported as public network
      #     2) CIDR arithmetic is complicted. Only implement it when #1 is supported
      # TODO(yfried): expose subnet details as vars
      - name: create the external subnet
        vars:
            # Here can't be used {{ path_venv }}, because it's not a Jinja template
            ansible_python_interpreter: "/tmp/venv_shade/bin/python"
            auth: "{{ creds.stdout | from_yaml }}"
        os_subnet:
            auth: "{{ auth }}"
            cidr: 10.0.0.1/24
            name: external_subnet
            network_name: "{{ net_create.network.name }}"
            enable_dhcp: no
            gateway_ip: 10.0.0.1
            allocation_pool_start: 10.0.0.210
            allocation_pool_end: 10.0.0.250
        register: subnet_create
