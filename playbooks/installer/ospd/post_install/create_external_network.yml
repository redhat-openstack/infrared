---
# This playbook is used to enable external network access to virthost or baremetal deployments and it is
# intended to be used as post-deployment step. It does not create private networks and router as it is
# users responsibility.
# This playbook gathers data from template_base used in ospd installer!
# Playbook is idempotent
# This playbook uses ansible openstack modules and assumes the undercloud already has
# a virtualenv containing shade.
# venv is created in playbooks/installer/ospd/ospd_inventory_update.yml as /tmp/venv_shade

- name: External network creation
  hosts: undercloud
  gather_facts: no
  become: yes
  become_user: "{{ installer.user.name }}"
  any_errors_fatal: true
  vars:
      first_controller: "{{ groups.controller | first }}"
      template_base: "/home/{{ installer.user.name }}/{{ installer.deployment.files.rstrip('/') | basename }}"
      network_environment_file: "network-environment{{ (installer.network.protocol == 'ipv6') | ternary('-v6','') }}.yaml"
      physnet_name: datacentre
  tasks:
      - name: get the default floating ip pool name from the controller
        shell: "grep -oP \"(?<=default_floating_pool=)(.*$)\" /etc/nova/nova.conf"
        register: pool_name
        delegate_to: "{{ first_controller }}"
        become_user: root
        become: yes

# FIXME(yfried): this is commented because virthost solution is misconfiguring vlan. Need to reevaluate the vlan indicators
#      - name: Check if vlan is enabled for public network - get vlan trunks
#        shell: "grep -E \"^network_vlan_ranges\\s*=\" /etc/neutron/plugin.ini"
#        register: vlan_trunks
#        delegate_to: "{{ first_controller }}"
#        become_user: root
#        become: yes

      - name: check the deployment network configuration file
        find:
            paths: "{{ template_base }}"
            patterns: "{{ network_environment_file }}"
            recurse: yes
        register: network_environment_file_path

      - fail:
            msg: "Unable to find the deployment network configuration file"
        when: 'network_environment_file_path.matched == 0'

      - name: read deployment network configuration
        command: "cat {{ network_environment_file_path.files[0].path }}"
        register: network_template_out

      - name: load deployment network configuration as YAML
        set_fact:
            network_template:  "{{ network_template_out.stdout | from_yaml }}"

      - name: grab auth data from openstackrc file and publish it as YAML
        vars:
        shell: |
            source ~/overcloudrc
            echo "
            auth_url: $OS_AUTH_URL
            username: $OS_USERNAME
            password: $OS_PASSWORD
            project_name: $OS_TENANT_NAME
            "
        register: creds

      - name: create the external network
        vars:
            # FIXME(yfried): this is commented because virthost solution is misconfiguring vlan. Need to reevaluate the vlan indicators
            # # If 'datacentre' physnet is in vlan trunk, this means ext-net must be of vlan type
            # physnet_type: "{{ (physnet_name in vlan_trunks.stdout) | ternary('vlan', 'flat') }}"
            physnet_type: "{{ ('virthost' in groups) | ternary('flat', 'vlan') }}"
            vlan_id: "{{ network_template.parameter_defaults.ExternalNetworkVlanID|default('') }}"
            # Here can't be used {{ path_venv }}, because it's not a Jinja template
            ansible_python_interpreter: "/tmp/venv_shade/bin/python"
            auth: "{{ creds.stdout | from_yaml }}"
        os_network:
            # Required for SSL
            validate_certs: no
            auth: "{{ auth }}"
            name: "{{ pool_name.stdout_lines|last }}"
            external: yes
            shared: no
            provider_physical_network: "{{ physnet_name }}"
            provider_network_type: "{{ physnet_type }}"
            provider_segmentation_id: "{{ ('vlan' == physnet_type) | ternary(vlan_id, omit) }}"
        register: net_create

      - name: print network details to console
        shell: "source ~/overcloudrc && neutron net-show {{ net_create.network.name }}"

      # OSPD "External*" data can't be used to discover subnet details because:
      #     1) IPv6 public network is not supported as public network
      #     2) CIDR arithmetic is complicted. Only implement it when #1 is supported
      - name: create the external subnet
        vars:
            # Here can't be used {{ path_venv }}, because it's not a Jinja template
            ansible_python_interpreter: "/tmp/venv_shade/bin/python"
            auth: "{{ creds.stdout | from_yaml }}"
            # It's cleaner to define top defaults first
            subnet: "{{ installer.public.subnet|default({}) }}"
            pool: "{{ subnet.allocation_pool|default({}) }}"
        os_subnet:
            # Required for SSL
            validate_certs: no
            auth: "{{ auth }}"
            name: external_subnet
            network_name: "{{ net_create.network.name }}"
            enable_dhcp: no
            cidr: "{{ subnet.cidr }}"
            gateway_ip: "{{ subnet.gateway }}"
            allocation_pool_start: "{{ pool.start | default(omit) }}"
            allocation_pool_end: "{{ pool.end | default(omit) }}"
        register: subnet_create

      - name: print subnet details to console
        shell: "source ~/overcloudrc && neutron subnet-show {{ subnet_create.subnet.name }}"
