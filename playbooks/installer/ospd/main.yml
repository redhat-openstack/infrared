---
- include: pre.yml

- name: Installing the undercloud
  tags:
      - undercloud
      - backup
  hosts: undercloud
  roles:
      - role: installer/rhos-release
        rr_rpm_url: "{{ installer.product.rpm }}"
        director_version: "{{ installer.product.version }}"
        director_build: "{{ installer.product.build }}"
        core_version: "{{ installer.product.core.version }}"
        core_build: "{{ installer.product.core.build }}"
        rr_distro_version: "{{ hostvars[groups.undercloud[0]].ansible_distribution_version }}"
        mirror: "{{ installer.mirror | default(omit) }}"

      - role: installer/ospd/undercloud

- name: Preparing the images
  tags:
      - images
      - backup
  hosts: undercloud
  gather_facts: no
  become: yes
  become_user: "{{ installer.user.name }}"
  roles:
      - {role: installer/ospd/images}

- name: Modify undercloud in case of virthost deployment
  tags: virthost
  include: virthost.yml
  when: "'virthost' in groups"

- name: Prepare introspection
  tags: introspection,ironic
  hosts: undercloud
  gather_facts: no
  become: yes
  become_user: "{{ installer.user.name }}"
  vars:
      custom_instack: "{{ (installer.instackenv|default({})).file | default('') }}"
  tasks:
      - name: "Set selinux state on undercloud after install"
        selinux:
            policy: "targeted"
            state: "{{ installer.selinux | default('enforcing') }}"
        become: yes
        become_user: "root"
        become_method: "sudo"

      # User provided file overwrites everything
      - name: check if instackenv is under the deployment folder
        stat:
            path: "{{ installer.deployment.files.rstrip('/') }}/instackenv.json"
        delegate_to: localhost
        become: no
        register: old_custom_instack
        when: custom_instack == ''
        changed_when: custom_instack == ''

      - set_fact:
            old_custom_instack_path: "{{ old_custom_instack.stat.path }}"
        when: old_custom_instack|changed and old_custom_instack.stat.exists != false

      - name: copy instackenv if provided by the user
        copy:
            src: "{{ (custom_instack != '') | ternary(custom_instack, old_custom_instack_path) }}"
            dest: "/home/{{ installer.user.name }}/{{ custom_instack | basename }}"
        when: custom_instack != '' or old_custom_instack.stat.exists
        register: inject_instackenv

      - set_fact:
            inject_instackenv_name: "{{ inject_instackenv.dest|basename }}"
        when: inject_instackenv|changed

      - name: verify that instackenv json file exists
        vars:
            target: "{{ (inject_instackenv|changed) | ternary((inject_instackenv_name), 'instackenv.json') }}"

        stat:
            path: "/home/{{ installer.user.name }}/{{ target }}"
        register: instack_file_path

      - set_fact:
            instack_file: "{{ instack_file_path.stat.path }}"
        when: instack_file_path.stat.exists

      - fail:
            msg: "instackenv file is missing"
        when: not instack_file_path.stat.exists

- name: Start introspection
  tags: introspection
  hosts: undercloud
  gather_facts: no
  become: yes
  become_user: "{{ installer.user.name }}"
  vars:
      undercloud_provision_cidr: "{{ ansible_br_ctlplane.ipv4.network }}/{{ ansible_br_ctlplane.ipv4.netmask }}"
  roles:
      - {role: installer/ospd/overcloud/introspection, when: "installer.overcloud is defined"}
  tasks:
      - name: get subnet ID to update neutron's DNS server
        shell: "source ~/stackrc; neutron subnet-list | grep '{{ undercloud_provision_cidr | ipsubnet }}' | awk '{print $2;}'"
        register: subnet_id

      - name: get the nameserver
        shell: "cat /etc/resolv.conf | grep -m 1 'nameserver' | awk '{print $2}'"
        register: nameserver

      - name: update neutron DNS server
        shell: "source ~/stackrc; neutron subnet-update {{ subnet_id.stdout }} --dns-nameserver {{ nameserver.stdout }}"

- name: Tag hosts with flavors
  tags: tagging
  hosts: undercloud
  gather_facts: no
  become: yes
  become_user: "{{ installer.user.name }}"
  roles:
      - {role: installer/ospd/overcloud/tagging, when: "'overcloud_nodes' in groups"}

- name: Prepare the overcloud configuration
  tags:
      - overcloud
      - overcloud_init
  hosts: undercloud
  gather_facts: yes
  become: yes
  become_user: "{{ installer.user.name }}"
  vars:
      template_base: "/home/{{ installer.user.name }}/{{ installer.deployment.files.rstrip('/') | basename }}"
      network_environment_file: "network-environment{{ (installer.network.protocol == 'ipv6') | ternary('-v6','') }}.yaml"
  pre_tasks:
      - name: copy our deployment folder
        copy:
            src: "{{ installer.deployment.files.rstrip('/') }}"
            dest: "{{ template_base | dirname }}/"
            directory_mode: u=rwX,g=rX,o=rX
            owner: "{{ installer.user.name }}"
            group: "{{ installer.user.name }}"

      - name: check for list of user defined templates
        find:
            paths: "{{ template_base }}"
            patterns: "*.yaml"
        register: template_list

      - name: check for the network-environment file
        find:
            paths: "{{ template_base }}"
            patterns: "{{ network_environment_file }}"
            recurse: yes
        register: network_environment_file_path

      # TODO: Move this to pre run verification
      - fail:
            msg: "The {{ network_environment_file }} file is missing"
        when: 'network_environment_file_path.matched == 0'

      - name: check if custom overcloud_deploy.sh exists
        tags: overcloud_deploy
        stat:
            path: "{{ template_base }}/overcloud_deploy.sh"
        register: deploy_script

      - name: copy our overcloud deployment script if provided by the user
        tags: overcloud_deploy
        copy:
            src: "{{ installer.overcloud.script }}"
            dest: "/home/{{ installer.user.name }}/{{ installer.overcloud.script | basename }}"
            owner: "{{ installer.user.name }}"
            group: "{{ installer.user.name }}"
            mode: 0644
            force: yes
        when: installer.overcloud.script is defined and installer.overcloud.script

      - set_fact:
            overcloud_deploy_script: "
                {%- if deploy_script.stat.exists -%}
                {{ template_base }}/overcloud_deploy.sh
                {%- elif installer.overcloud.script is defined and installer.overcloud.script -%}
                /home/{{ installer.user.name }}/{{ installer.overcloud.script | basename }}
                {%- else -%}{%- endif -%}"
        tags: overcloud_deploy

      - name: create the base overcloud deploy script
        template:
            src: "templates/overcloud_deploy.sh.j2"
            dest: "~/overcloud_deploy.sh"
            mode: 0755
        when: overcloud_deploy_script == ''

      - name: Enable external network access through newly created vlan interface on undercloud
        include: undercloud-ext-vlan.yml
        when: "'virthost' not in groups"
  roles:
      - {role: installer/ospd/overcloud/storage, when: "overcloud_deploy_script == '' and installer.storage.backend is defined and installer.storage.backend"}
      - {role: installer/ospd/overcloud/network, when: "{{ (overcloud_deploy_script == '') }}" }
      - {role: installer/ospd/overcloud/ssl, when: "overcloud_deploy_script == '' and installer.overcloud.ssl == 'yes'"}
      - {role: installer/ospd/loadbalancer, when: "overcloud_deploy_script == '' and groups.loadbalancer is defined"}
      - {role: installer/ospd/overcloud/hostname, when: "overcloud_deploy_script == ''" }

  tasks:
      - block:
          - name: append all custom templates provided by the user
            lineinfile:
                dest: "~/overcloud_deploy.sh"
                line: '-e {{ item.path }} \'
            with_items: "{{ template_list.files }}"

          - name: append the invocation line to the base overcloud deploy script
            lineinfile:
                dest: "~/overcloud_deploy.sh"
                line: "--log-file overcloud_deployment_{{ 100 | random }}.log &> overcloud_install.log"

          - set_fact:
                overcloud_deploy_script: '~/overcloud_deploy.sh'
        when: overcloud_deploy_script  == ''

- name: Deploy the OverCloud
  tags:
      - overcloud
      - overcloud_deploy
  hosts: undercloud
  gather_facts: yes
  become: yes
  become_user: "{{ installer.user.name }}"
  tasks:
      - name: the create overcloud script
        shell: "cat {{ overcloud_deploy_script }}"

      - name: execute the overcloud deploy script
        shell: |
            source ~/stackrc
            bash {{ overcloud_deploy_script }}
        register: overcloud_deploy_registered
        ignore_errors: yes

      - debug: msg="The deployment already failed!"
        when: overcloud_deploy_registered.rc != 0

      - name: print the last few lines of the output to spot failures
        shell: "tail -n60 overcloud_install.log"

      - name: copy summary script
        copy:
            src: files/deploy_info.sh
            dest: /home/{{ installer.user.name }}/deploy_info.sh
            mode: 0755

      - name: Execute the deployment summary script
        become_user: root
        shell: "mkdir -p /var/log/extra/; source /home/{{ installer.user.name }}/stackrc; /home/{{ installer.user.name }}/deploy_info.sh 2>&1 | tee -a /var/log/extra/deploy_resources.log"


# Since OSP-d reprovision our machines (overcloud) and becomes the DHCP server, an update of our inventory is required
# So Ansible will be able to access the newly provisioned machines.
# The inventory also gets updated when the deployment fails in order to be able to run log-collection
- include: ospd_inventory_update.yml
  tags:
      - overcloud
      - inventory_update
      - overcloud_deploy

- name: Deploy OverCloud post verify
  tags:
      - overcloud
      - overcloud_deploy
  hosts: undercloud
  gather_facts: no
  become: yes
  become_user: "{{ installer.user.name }}"
  tasks:
      - fail: msg="Overcloud deployment failed... :("
        when: overcloud_deploy_registered.rc != 0

      - name: verify overcloudrc was created
        wait_for:
            path: "/home/stack/overcloudrc"
            state: present
            timeout: 60

- name: "Set selinux state on overcloud"
  hosts: overcloud_nodes
  become: yes
  become_user: "root"
  become_method: "sudo"
  gather_facts: no
  tasks:
      - selinux:
            policy: "targeted"
            state: "{{ installer.selinux | default('enforcing') }}"

- include: post_install/lbaas_v2.yml
  tags: lbaas
  when: installer.network.lbaas|default('no') == 'yes'

- include: post_install/create_external_network.yml
  tags: public_network
  when: installer.public.network == 'yes'
