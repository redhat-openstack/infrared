---
- include: pre.yml

- name: Installing the undercloud
  tags:
      - undercloud
      - backup
  hosts: undercloud
  roles:
      - {role: installer/ospd/undercloud, when: "'undercloud' in groups"}

- name: Preparing the images
  tags:
      - images
      - backup
  hosts: undercloud
  gather_facts: no
  become: yes
  become_user: "{{ installer.user.name }}"
  roles:
      - {role: installer/ospd/images}

- name: Modify undercloud in case of virthost deployment
  tags: virthost
  include: virthost.yml
  when: "'virthost' in groups"

- name: Start introspection
  tags: introspection
  hosts: undercloud
  gather_facts: no
  become: yes
  become_user: "{{ installer.user.name }}"
  pre_tasks:
      - name: check if instackenv.json is under the deployment folder
        stat:
            path: "/home/{{ installer.user.name }}/{{ installer.deployment.files.rstrip('/') | basename }}/instackenv.json"
        register: instack_file_path

      - name: copy our configuration if provided by the user
        copy:
            src: "{{ installer.instackenv.file }}"
            dest: "/home/{{ installer.user.name }}/{{ installer.instackenv.file | basename }}"
            force: yes
        when: installer.instackenv.file is defined and installer.instackenv.file

      - set_fact:
            instack_file: "
                {%- if instack_file_path.stat.exists -%}
                /home/{{ installer.user.name }}/{{ installer.deployment.files.rstrip('/') | basename }}/instackenv.json
                {%- elif installer.instackenv.file is defined and installer.instackenv.file -%}
                /home/{{ installer.user.name }}/{{ installer.instackenv.file | basename }}
                {%- else -%}
                /home/{{ installer.user.name }}/instackenv.json
                {%- endif -%}"
  roles:
      - {role: installer/ospd/overcloud/introspection, when: "installer.overcloud is defined"}
  vars:
      - undercloud_provision_cidr: "{{ ansible_br_ctlplane.ipv4.network }}/{{ ansible_br_ctlplane.ipv4.netmask }}"
  tasks:
      - name: get subnet ID to update neutron's DNS server
        shell: "source ~/stackrc; neutron subnet-list | grep '{{ undercloud_provision_cidr | ipsubnet }}' | awk '{print $2;}'"
        register: subnet_id

      - name: get the nameserver
        shell: "cat /etc/resolv.conf | grep -m 1 'nameserver' | awk '{print $2}'"
        register: nameserver

      - name: update neutron DNS server
        shell: "source ~/stackrc; neutron subnet-update {{ subnet_id.stdout }} --dns-nameserver {{ nameserver.stdout }}"

- name: Tag hosts with flavors
  tags: tagging
  hosts: undercloud
  gather_facts: no
  become: yes
  become_user: "{{ installer.user.name }}"
  roles:
      - {role: installer/ospd/overcloud/tagging, when: "'overcloud_nodes' in groups"}

- name: Installing the overcloud
  tags: overcloud
  hosts: undercloud
  gather_facts: yes
  become: yes
  become_user: "{{ installer.user.name }}"
  vars:
      - template_base: "/home/{{ installer.user.name }}/{{ installer.deployment.files.rstrip('/') | basename }}"
      - network_environment_file: "network-environment{{ (installer.network.protocol == 'ipv6') | ternary('-v6','') }}.yaml"
  pre_tasks:
      - name: check for list of user defined templates
        find:
            paths: "{{ template_base }}"
            patterns: "*.yaml"
        register: template_list

      - name: check if custom overcloud_deploy.sh exists
        stat:
            path: "{{ template_base }}/overcloud_deploy.sh"
        register: deploy_script

      - name: copy our overcloud deployment script if provided by the user
        copy:
            src: "{{ installer.overcloud.script }}"
            dest: "/home/{{ installer.user.name }}/{{ installer.overcloud.script | basename }}"
            owner: "{{ installer.user.name }}"
            group: "{{ installer.user.name }}"
            mode: 0644
            force: yes
        when: installer.overcloud.script is defined and installer.overcloud.script

      - set_fact:
            overcloud_deploy_script: "
                {%- if deploy_script.stat.exists -%}
                {{ template_base }}/overcloud_deploy.sh
                {%- elif installer.overcloud.script is defined and installer.overcloud.script -%}
                /home/{{ installer.user.name }}/{{ installer.overcloud.script | basename }}
                {%- else -%}{%- endif -%}"

      - name: create the base overcloud deploy script
        template:
            src: "templates/overcloud_deploy.sh.j2"
            dest: "~/overcloud_deploy.sh"
            mode: 0755
        when: overcloud_deploy_script == ''
  roles:
      - {role: installer/ospd/overcloud/storage, when: "overcloud_deploy_script == '' and installer.storage.backend is defined and installer.storage.backend"}
      - {role: installer/ospd/overcloud/network, when: "{{ (overcloud_deploy_script == '') }}" }
      - {role: installer/ospd/overcloud/ssl, when: "overcloud_deploy_script == '' and installer.overcloud.ssl == 'yes'"}
      - {role: installer/ospd/loadbalancer, when: "overcloud_deploy_script == '' and groups.loadbalancer is defined"}
      - {role: installer/ospd/overcloud/hostname, when: "overcloud_deploy_script == ''" }

  tasks:
      - block:
          - name: append all custom templates provided by the user
            lineinfile:
                dest: "~/overcloud_deploy.sh"
                line: '-e {{ item.path }} \'
            with_items: "{{ template_list.files }}"

          - name: append the invocation line to the base overcloud deploy script
            lineinfile:
                dest: "~/overcloud_deploy.sh"
                line: "--log-file overcloud_deployment_{{ 100 | random }}.log &> overcloud_install.log"

          - set_fact:
                overcloud_deploy_script: '~/overcloud_deploy.sh'
        when: overcloud_deploy_script  == ''

      - name: the create overcloud script
        shell: "cat {{ overcloud_deploy_script }}"

      - name: execute the overcloud deploy script
        shell: |
            source ~/stackrc
            bash {{ overcloud_deploy_script }}
        register: overcloud_deploy
        ignore_errors: yes

      - name: print the last few lines of the output to spot failures
        shell: "tail -n60 overcloud_install.log"

      - name: copy summary script
        copy:
            src: files/deploy_info.sh
            dest: /home/{{ installer.user.name }}/deploy_info.sh
            mode: 0755

      - name: Execute the deployment summary script
        become_user: root
        shell: "mkdir -p /var/log/extra/; source /home/{{ installer.user.name }}/stackrc; /home/{{ installer.user.name }}/deploy_info.sh 2>&1 | tee -a /var/log/extra/deploy_resources.log"

      - fail: msg="Overcloud deployment failed... :("
        when: overcloud_deploy.rc != 0

      - name: verify overcloudrc was created
        wait_for:
            path: "/home/stack/overcloudrc"
            state: present
            timeout: 60

# Since OSP-d reprovision our machines (overcloud) and becomes the DHCP server, an update of our inventory is required
# So Ansible will be able to access the newly provisioned machines.
- include: ospd_inventory_update.yml
  tags: overcloud, inventory_update
