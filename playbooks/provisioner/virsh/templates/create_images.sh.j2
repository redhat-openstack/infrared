#!/bin/bash

# Clean our guest image
virt-sysprep /var/lib/libvirt/images/{{ provisioner.virsh.image.name }}-original --operations dhcp-client-state,dhcp-server-state,net-hostname,net-hwaddr,udev-persistent-net

# reset the password to a default one
virt-customize -a /var/lib/libvirt/images/{{ provisioner.virsh.image.name }}-original --root-password password:redhat

# Removing cloud-init
virt-customize -a /var/lib/libvirt/images/{{ provisioner.virsh.image.name }}-original --run-command 'yum remove cloud-init* -y'

# TODO: configure interfaces based on config rather than hardcode
# configure three network interfaces for the image
virt-customize -a /var/lib/libvirt/images/{{ provisioner.virsh.image.name }}-original --run-command 'cp /etc/sysconfig/network-scripts/ifcfg-eth{0,1} && sed -i s/DEVICE=.*/DEVICE=eth1/g /etc/sysconfig/network-scripts/ifcfg-eth1'

# TODO: configure interfaces based on config rather than hardcode
# configure three network interfaces for the image
virt-customize -a /var/lib/libvirt/images/{{ provisioner.virsh.image.name }}-original --run-command 'cp /etc/sysconfig/network-scripts/ifcfg-eth{1,2} && sed -i s/DEVICE=.*/DEVICE=eth2/g /etc/sysconfig/network-scripts/ifcfg-eth2'

{% for node_name, node_values in provisioner.virsh.topology.nodes.iteritems() %}
{% for num in range(1, node_values.amount + 1, 1) %}
{% for disk_name, disk_values in node_values.disks.iteritems() %}
qemu-img create -f qcow2 {{ disk_values.path }}/{{ node_name }}{% if node_values.amount > 1 %}{{ num }}{% endif %}.{{ disk_name }}.qcow2 {{ disk_values.size }}
{% endfor %}
virt-resize --expand /dev/sda1 /var/lib/libvirt/images/{{ provisioner.virsh.image.name }}-original {{ node_values.disks.disk1.path }}/{{ node_name }}{% if node_values.amount > 1 %}{{ num }}{% endif %}.disk1.qcow2
{% endfor %}
{% endfor %}
