---
- name: Install dependencies on the tester
  hosts: tester
  gather_facts: no
  tags:
    - rally_dependencies
  tasks:
    - name: Install support packages for pip-based deps building
      yum:
          name: "{{ item }}"
          state: present
      with_items: "{{ tester.packages }}"

    - name: Install pip
      command: easy_install pip

    - name: Install required pip packages
      pip:
          name: "{{ item }}"
          state: latest
      with_items: "{{ tester.pip_packages }}"

- name: Install Rally on the machine
  hosts: tester
  gather_facts: no
  tasks:
    - name: Clone Rally from git repo
      git:
          repo: "{{ tester.git.repo }}"
          version: "{{ tester.git.revision }}"
          dest: "{{ tester.rally.dir }}"

    - name: Clone Rally-Plugins git repo
      git:
        repo: "{{ tester.git.plugins.repo }}"
        version: "{{ tester.git.plugins.revision }}"
        dest: "~/.rally/plugins"

    - name: Run Rally installation script
      shell: "{{ tester.rally.dir }}/install_rally.sh -v -y -d {{ tester.rally.path }} | tee {{ tester.rally.dir }}/rally_install.log"
      args:
        creates: "{{ tester.rally.path }}/bin/rally"

- name: Prepare Openstack
  hosts: tester
  tasks:

    - shell: "cat /home/{{ installer.user.name }}/overcloudrc | grep AUTH | cut -d '=' -f 2"
      register: oc_auth

    - shell: "cat /home/{{ installer.user.name }}/overcloudrc | grep USERNAME | cut -d '=' -f 2"
      register: oc_username

    - shell: "cat /home/{{ installer.user.name }}/overcloudrc | grep TENANT | cut -d '=' -f 2"
      register: oc_tenant

    - shell: "source /home/{{ installer.user.name }}/overcloudrc && env | grep OS_PASSWORD | cut -d '=' -f 2"
      args:
        executable: /bin/bash
      register: oc_password

    - name: Download cirros image
      get_url:
        url: " {{ tester.guest_image.url }}"
        dest: "/tmp/{{ tester.guest_image.name }}"

    - name: Install shade to standalone venv
      pip:
        name: "{{ item.key }}"
        version: "{{ item.value }}"
        virtualenv: "/tmp/venv_os_image"
      with_dict:
        shade: "1.7.0"
        pip: "8.1"

    - name: Create nano flavor
      vars:
         ansible_python_interpreter: "/tmp/venv_os_image/bin/python"
      os_nova_flavor:
        auth:
          auth_url: "{{ oc_auth.stdout }}"
          username: "{{ oc_username.stdout }}"
          password: "{{ oc_password.stdout }}"
          project_name: "{{ oc_tenant.stdout }}"
        name: m1.nano
        flavorid: 42
        ram:      64
        vcpus:     1
        disk:      0

    - name: Create Glance Image
      vars:
         ansible_python_interpreter: "/tmp/venv_os_image/bin/python"
      os_image:
        auth:
          auth_url: "{{ oc_auth.stdout }}"
          username: "{{ oc_username.stdout }}"
          password: "{{ oc_password.stdout }}"
          project_name: "{{ oc_tenant.stdout }}"
        name: "{{ tester.guest_image.name }}"
        disk_format: qcow2
        container_format: bare
        state: present
        filename: "/tmp/{{ tester.guest_image.name }}"
        properties:
            visibility: public

- name: Setup Rally
  hosts: tester
  tasks:
  # TODO (tjamrisk): Need to somehow skip this if deployment exists
  - name: Create Rally deployment
    shell: "source /home/{{ installer.user.name }}/overcloudrc && {{ tester.rally.path }}/bin/rally deployment create --fromenv --name {{ tester.rally.deployment }} | awk '/{{ tester.rally.deployment }}/ {print $2}'"
    register: rally_deployment_uuid
    ignore_errors: true

  - debug: var=rally_deployment_uuid

  - name: Use Rally deployment
    shell: "{{ tester.rally.path }}/bin/rally deployment use {{ tester.rally.deployment }} | awk '/Using deployment/ {print $3}'"
    register: rally_deployment_uuid
    when: "'Deployment' in rally_deployment_uuid.stdout"

  - debug: var=rally_deployment_uuid

