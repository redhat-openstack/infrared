---
- name: Stop controller networking services
  hosts:
    - controller
  become: yes
  any_errors_fatal: true
  tasks:
    - name: Stop neutron-server
      service: name=neutron-server
               state=stopped

    - name: Stop neutron-dhcp-agent
      service: name=neutron-dhcp-agent
               state=stopped

    - name: Stop and disable neutron-l3-agent
      service: name=neutron-l3-agent
               state=stopped
               enabled=no

- name: Stop networking services
  hosts:
    - controller
    - compute
  become: yes
  any_errors_fatal: true
  tasks:
    - name: Stop neutron-openvswitch-agent
      service: name=neutron-openvswitch-agent
               state=stopped
               enabled=no

    - name: Stop openvswitch
      service: name=openvswitch
               state=stopped

- name: Remove openvswitch logs and configuration
  hosts:
    - controller
    - compute
  become: yes
  any_errors_fatal: true
  tasks:
    - name: Remove openvswitch logs
      command: "rm -rf /var/log/openvswitch/*"

    - name: Remove openvswitch configuration
      command: "rm -rf /etc/openvswitch/conf.db"

- name: Attach ovs to an active opendaylight controller
  hosts:
    - controller
    - compute
  become: yes
  any_errors_fatal: true
  tasks:
      - name: Start openvswitch
        service: name=openvswitch state=running

      - name: Attach ovs to opendaylight controller
        command: ovs-vsctl set-manager tcp:{{ hostvars[item].ansible_ssh_host }}:6640
        with_items: "{{ groups.odl_controller }}"


- name: Install opendaylight driver using rpm
  hosts: controller
  become: yes
  any_errors_fatal: true
  tasks:
      - name: Install opendaylight driver
        yum: name=python-networking-odl state=latest
- name: Configure neutron to use opendaylight
  hosts: controller
  become: yes
  any_errors_fatal: true
  vars:
      - ansible_python_interpreter: "/usr/bin/python"
  tasks:
    - name: set mechanism drivers
      ini_file:
          dest="/etc/neutron/plugins/ml2/ml2_conf.ini"
          section="ml2"
          option={{ item.option }}
          value={{ item.value }}
      with_items:
          - { option: 'mechanism_drivers', value: 'opendaylight' }
          - { option: 'tenant_network_types', value: 'vxlan' }

    - name: Add opendaylight to ML2 configuration
      ini_file:
          dest="/etc/neutron/plugins/ml2/ml2_conf.ini"
          section="ml2_odl"
          option={{ item.option }}
          value={{ item.value }}
      with_items:
          - { option: 'password', value: 'admin' }
          - { option: 'username', value: 'admin' }
          - { option: 'url', value: "http://{{ hostvars[groups['odl_controller'][0]].ansible_ssh_host }}:8080/controller/nb/v2/neutron" }

    - name: Configure DHCP to serve metadata
      ini_file:
          dest="/etc/neutron/dhcp_agent.ini"
          section="DEFAULT"
          option={{ item.option }}
          value={{ item.value }}
      with_items:
          - { option: 'force_metadata', value: 'True' }
          - { option: 'enable_isolated_metadata', value: 'True' }

    - name: Configure neutron to use OpenDaylight L3
      shell: >
          sed -i "s/router,//g" /etc/neutron/neutron.conf;
          egrep -q '^service_plugins.*networking_odl.l3.l3_odl.OpenDaylightL3RouterPlugin' /etc/neutron/neutron.conf || sed -i "/^service_plugins/s/$/,networking_odl.l3.l3_odl.OpenDaylightL3RouterPlugin/" /etc/neutron/neutron.conf

    - name: Clean neutron ML2 database
      shell: >
          export db_connection=`sudo grep ^connection /etc/neutron/neutron.conf`;
          export db_name=`echo $db_connection | rev | cut -d/ -f1  | rev | cut -d? -f1`;
          sudo mysql -e "drop database if exists $db_name;";
          sudo mysql -e "create database $db_name character set utf8;";
          sudo mysql -e "grant all on $db_name.* to 'neutron'@'%';";
          sudo neutron-db-manage --config-file /usr/share/neutron/neutron-dist.conf --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugin.ini upgrade head

- name: Post odl-installation steps for all nodes
  hosts:
    - controller
    - compute
  become: yes
  any_errors_fatal: true
  vars:
      - ansible_python_interpreter: "/usr/bin/python"
  tasks:
      #TODO(abregman): remove when bug 1334732 is resolved
      - name: Set selinux to permissive
        selinux: policy=targeted
                 state=enforcing

      - name: get ovs id
        shell: ovs-vsctl get Open_vSwitch . _uuid
        register: ovs_id

      # Setting local_ip to enable tunnelling
      - name: set local_ip
        command: "ovs-vsctl set Open_vSwitch {{ ovs_id.stdout }} other_config:local_ip={{ hostvars[inventory_hostname].ansible_default_ipv4.address }}"

      - name: Add public interface to public bridge
        shell: >
            sudo ovs-vsctl --no-wait -- --may-exist add-port br-ex eth2;
            sudo ip link set eth2 up

      - name: setting mapping between physical network and a bridge
        command: "ovs-vsctl set Open_vSwitch {{ ovs_id.stdout }} other_config:provider_mappings=myphysnet:br-ex"

- name: Post odl-installation steps
  hosts: controller
  become: yes
  any_errors_fatal: true
  tasks:
      - name: Start neutron-server service
        service: name=neutron-server
                 state=running

      - name: Start neutron-dhcp-agent service
        service: name=neutron-dhcp-agent
                 state=running

      # Required for running tests
      - name: Create an external network
        quantum_network:
            state: present
            auth_url: "http://{{ hostvars[inventory_hostname].ansible_default_ipv4.address }}:35357/v2.0/"
            login_username: admin
            login_password: "{{ hostvars[inventory_hostname].admin_password | default('redhat') }}"
            login_tenant_name: admin
            name: "{{ installer.network.name }}"
            provider_network_type: "{{ installer.network.external.provider_network_type }}"
            provider_physical_network: "{{ installer.network.label }}"
            provider_segmentation_id: "{{ installer.network.external.vlan.tag|default(omit) }}"
            router_external: yes
            shared: no
            admin_state_up: yes

      - name: Create subnet for external network
        quantum_subnet:
            state: present
            auth_url: "http://{{ hostvars[inventory_hostname].ansible_default_ipv4.address }}:35357/v2.0/"
            login_username: admin
            login_password: "{{ hostvars[inventory_hostname].admin_password | default('redhat') }}"
            login_tenant_name: admin
            tenant_name: admin
            network_name: "{{ installer.network.name }}"
            name: external-subnet
            enable_dhcp: False
            gateway_ip: "{{ provisioner.neutron.subnets.external.nested.subnet_gateway }}"
            cidr: "{{ provisioner.neutron.subnets.external.nested.subnet_cidr}}"
            allocation_pool_start: "{{ provisioner.neutron.subnets.external.nested.allocation_pool_start }}"
            allocation_pool_end: "{{ provisioner.neutron.subnets.external.nested.allocation_pool_end }}"
