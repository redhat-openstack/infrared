- name: Controller
  count: {{ (install.controller|default({})).nodes|default(0) or groups.controller|default([])|length or '1' }}
  hostname_format: controller-%index%
  defaults:
    profile: control
    config_drive:
      cloud_config:
        # unique NFS ID
        bootcmd:
          - 'host_specific_id="$(hostname)-{{ deployment_unique_id }}"'
          - 'echo "options nfs nfs4_unique_id=${host_specific_id}" >/etc/modprobe.d/nfsv4_id.conf'
          - '[ -e /sys/module/nfs/parameters/nfs4_unique_id ] && echo -n ${host_specific_id} >/sys/module/nfs/parameters/nfs4_unique_id'
    network_config:
      default_route_network:
      - external
{% if 'ipv6' in install.network.protocol %}
      - ctlplane
{% endif %}
{% if install.splitstack|default(false) %}
      template: {{ template_base }}/network/nic-configs/controller{{ ('ipv6' in install.network.protocol) | ternary('-v6','') }}.j2
{% else %}
      template: /home/stack/virt/network/three-nics-vlans/controller{{ ('ipv6' in install.network.protocol) | ternary('-v6','') }}.j2
{% endif %}
{% if not install.splitstack|default(false) and not install.predictable.ips|default(false) %}
    networks:
    - network: ctlplane
      vif: true
    - network: storage
    - network: storage_mgmt
    - network: internal_api
    - network: tenant
    - network: external
  instances:
{% if loadbalancer is defined and loadbalancer.network %}
{% for x in range(groups.controller|length) %}
  - hostname: {{ loadbalancer.controllers.name_prefix }}{{x}}
    name: {{ loadbalancer.controllers.name_prefix }}{{x}}
    networks:
    - network: ctlplane
      vif: true
    - network: external
      fixed_ip: {{ loadbalancer.network.external.net | ipaddr('net') | ipaddr(loadbalancer.controllers.pool_start + x) | ipaddr('address') }}
      subnet: external_subnet
    - network: internal_api
      fixed_ip: {{ loadbalancer.network.internal_api.net | ipaddr('net') | ipaddr(loadbalancer.controllers.pool_start + x) | ipaddr('address') }}
      subnet: internal_api_subnet
    - network: storage
      fixed_ip: {{ loadbalancer.network.storage.net | ipaddr('net') | ipaddr(loadbalancer.controllers.pool_start + x) | ipaddr('address') }}
      subnet: storage_subnet
    - network: storage_mgmt
      fixed_ip: {{ loadbalancer.network.storage_mgmnt.net | ipaddr('net') | ipaddr(loadbalancer.controllers.pool_start + x) | ipaddr('address') }}
      subnet: storage_mgmt_subnet
    - network: tenant
      fixed_ip: {{ loadbalancer.network.tenant.net | ipaddr('net') | ipaddr(loadbalancer.controllers.pool_start + x) | ipaddr('address') }}
      subnet: tenant_subnet
{% endfor %}
{% else %}
{% if (install.controller|default({})).nodes|default(0)|int > 0 %}
{% for controller_count in range(install.controller.nodes|int) %}
  - hostname: {{ groups.controller[controller_count] }}
    name: {{ groups.controller[controller_count] }}
{% endfor %}
{% else %}
{% for host_name in groups.controller|sort %}
  - hostname: {{ host_name }}
    name: {{ host_name }}
{% endfor %}
{% endif %}
{% endif %}
{% else %}
  instances:
{% for host_name in groups.controller|sort %}
{% if install.predictable.ips|default(false) %}
  - hostname: {{ host_name }}
    name: {{ host_name }}
    networks:
      - network: ctlplane
        vif: true
      - network: storage
        fixed_ip: {{ parameter_defaults.ControllerIPs.storage[loop.index0] }}
        subnet: storage_subnet
      - network: storage_mgmt
        fixed_ip: {{ parameter_defaults.ControllerIPs.storage_mgmt[loop.index0] }}
        subnet: storage_mgmt_subnet
      - network: internal_api
        fixed_ip: {{ parameter_defaults.ControllerIPs.internal_api[loop.index0] }}
        subnet: internal_api_subnet
      - network: tenant
        fixed_ip: {{ parameter_defaults.ControllerIPs.tenant[loop.index0] }}
        subnet: tenant_subnet
      - network: external
        fixed_ip: {{ parameter_defaults.ControllerIPs.external[loop.index0] }}
        subnet: external_subnet
{% else %}
  - hostname: {{ host_name }}
    managed: false
    networks:
      - network: ctlplane
        fixed_ip: {{ hostvars[host_name]['ansible_eth0']['ipv4']['address'] }}
      - network: storage
      - network: storage_mgmt
      - network: internal_api
      - network: tenant
      - network: external
{% endif %}
{% endfor %}
{% endif %}
{% if ((install.storage|default({})).backend != 'ceph' and not (install.splitstack|default(false))) or
      install.container.extra.repos is defined or
      (install.network.ovs and install.version|default(undercloud_version)|openstack_release >= 17) %}
  ansible_playbooks:
{% endif %}
{# Workaround the rhbz#2066367 for the case where OSP17 is run on top of RHEL9 #}
{% if (install.storage|default({})).backend != 'ceph' and not (install.splitstack|default(false)) %}
    - playbook: /usr/share/ansible/tripleo-playbooks/cli-overcloud-node-growvols.yaml
      extra_vars:
        growvols_args: >
          /=8GB
          /tmp=1GB
          /var/log=10GB
          /var/log/audit=1GB
          /home=1GB
          /srv={{ (install.srv.volume.size|default(10)) }}GB
          /var=100%
{% endif %}
{# Workaround the rhbz#2121504 that affects RHEL9 when extra repos are configured #}
{% if install.container.extra.repos is defined or
      (install.network.ovs and install.version|default(undercloud_version)|openstack_release >= 17) %}
    - playbook: {{ template_base }}/playbooks/sssd_selinux_workaround.yaml
{% endif %}
{% for compute_type in ['compute', 'computerhel8'] %}
{% if compute_type in groups %}
- name: {% if compute_type == 'compute' %}Compute
{% elif compute_type == 'computerhel8' %}ComputeRHEL8
{% endif %}
  count: {{ (install[compute_type]|default({})).nodes|default(0) or groups[compute_type]|default([])|length or (install.hybrid is defined)| ternary('1','0') }}
  hostname_format: {{ compute_type }}-%index%
  defaults:
    profile: {{ compute_type }}
{# Following implies multirhel-enabled-legacy is used  #}
{% if compute_type == 'computerhel8' %}
    image:
      href: 'file:///var/lib/ironic/images/overcloud-rhel8.raw'
{# Newer rhel8 images for multirhel are not hardened, so include vmlinuz and initrd explicitely #}
{# This implies multirhel-enabled-legacy is not used  #}
{% if multirhel_enabled|default(False) %}
      kernel: 'file:///var/lib/ironic/images/overcloud-rhel8.vmlinuz'
      ramdisk: 'file:///var/lib/ironic/images/overcloud-rhel8.initrd'
{% endif %}
{% endif %}
    network_config:
{% if install.network.dvr|bool or install.network.force.compute.dvr|bool %}
{%- if install.splitstack|default(false) %}
      template: {{ template_base }}/network/nic-configs/compute.j2
{% else %}
      template: /home/stack/virt/network/three-nics-vlans/compute-dvr.j2
{% endif -%}
{% else %}
{%- if install.splitstack|default(false) %}
      template: {{ template_base }}/network/nic-configs/compute.j2
{% else %}
      template: /home/stack/virt/network/three-nics-vlans/compute.j2
{% endif -%}
{% endif %}
{% if not install.splitstack|default(false) and not install.predictable.ips|default(false) %}
    networks:
    - network: ctlplane
      vif: true
    - network: storage
    - network: internal_api
    - network: tenant
{% if install.network.dvr|bool or install.network.force.compute.dvr|bool %}
    - network: external
{% endif %}
  instances:
{% if (install.compute|default({})).nodes|default(0)|int > 0 %}
{% for compute_count in range(install.compute.nodes|int) %}
  - hostname: {{ groups.compute[compute_count] }}
    name: {{ groups.compute[compute_count] }}
{% endfor %}
{% else %}
{% for host_name in groups[compute_type]|sort %}
  - hostname: {{ host_name }}
    name: {{ host_name }}
{% endfor %}
{% endif %}
{% endif %}
{% if install.predictable.ips|default(false) %}
  instances:
{% for host_name in groups[compute_type]|sort %}
  - hostname: {{ host_name }}
    name: {{ host_name }}
    networks:
      - network: storage
        fixed_ip: {{ parameter_defaults.ComputeIPs.storage[loop.index0] }}
      - network: internal_api
        fixed_ip: {{ parameter_defaults.ComputeIPs.internal_api[loop.index0] }}
      - network: tenant
        fixed_ip: {{ parameter_defaults.ComputeIPs.tenant[loop.index0] }}
{% if install.network.dvr|bool or install.network.force.compute.dvr|bool %}
      - network: external
        fixed_ip: {{ parameter_defaults.ComputeIPs.external[loop.index0] }}
{% endif %}
{% endfor %}
{% endif %}
{% if install.splitstack|default(false) %}
  instances:
{% for host_name in groups[compute_type]|sort %}
  - hostname: {{ host_name }}
    managed: false
    networks:
      - network: ctlplane
        fixed_ip: {{ hostvars[host_name]['ansible_eth0']['ipv4']['address'] }}
      - network: storage
      - network: internal_api
      - network: tenant
{% if install.network.dvr|bool or install.network.force.compute.dvr|bool %}
      - network: external
{% endif %}
{% endfor %}
{% endif %}
{% endif %}
{% endfor %}
{% if not install.storage.external %}
{%- if install.storage.backend == 'ceph' %}
- name: CephStorage
  count: {{ (install.storage.nodes|default(0)) or (groups['ceph']|default([])|length) or 1 }}
  hostname_format: ceph-%index%
  defaults:
    profile: ceph-storage
    network_config:
{% if install.splitstack|default(false) %}
      template: {{ template_base }}/network/nic-configs/ceph-storage.j2
{% else %}
      template: /home/stack/virt/network/three-nics-vlans/ceph-storage.j2
{% endif %}
{% if not install.splitstack|default(false) and not install.predictable.ips|default(false) %}
    networks:
    - network: ctlplane
      vif: true
    - network: storage
    - network: storage_mgmt
  instances:
{% for host_name in groups.ceph|sort %}
  - hostname: {{ host_name }}
    name: {{ host_name }}
{% endfor %}
{% endif -%}
{% if install.predictable.ips|default(false) %}
  instances:
{% for host_name in groups.ceph|sort %}
  - hostname: {{ host_name }}
    name: {{ host_name }}
    networks:
      - network: storage
        fixed_ip: {{ parameter_defaults.CephStorageIPs.storage[loop.index0] }}
      - network: storage_mgmt
        fixed_ip: {{ parameter_defaults.CephStorageIPs.storage_mgmt[loop.index0] }}
{% endfor %}
{% endif %}
{% if install.splitstack|default(false) %}
  instances:
{% for host_name in groups.ceph|sort %}
  - hostname: {{ host_name }}
    managed: false
    networks:
      - network: ctlplane
        fixed_ip: {{ hostvars[host_name]['ansible_eth0']['ipv4']['address'] }}
      - network: storage
      - network: storage_mgmt
{% endfor %}
{% endif %}
{% endif %}
{% endif -%}
{%- if install.storage.backend == 'swift' %}
- name: SwiftStorage
  count: {{ (install.storage.nodes|default(0)) or (groups['swift']|default([])|length) or 1 }}
  hostname_format: swift-%index%
  defaults:
    profile: swift-storage
    network_config:
{% if install.splitstack|default(false) %}
      template: {{ template_base }}/network/nic-configs/swift-storage.j2
{% else %}
      template: /home/stack/virt/network/templates/three-nics-vlans/swift-storage.j2
{% endif %}
{% if not install.splittack|default(false) %}
    networks:
    - network: ctlplane
      vif: true
    - network: storage
    - network: storage_mgmt
  instances:
{% for host_name in groups.swift|sort %}
  - hostname: {{ host_name }}
    name: {{ host_name }}
{% endfor %}
{% endif %}
{% if install.splitstack|default(false) %}
  instances:
{% for host_name in groups.swift|sort %}
  - hostname: {{ host_name }}
    managed: false
    networks:
      - network: ctlplane
        fixed_ip: {{ hostvars[host_name]['ansible_eth0']['ipv4']['address'] }}
      - network: storage
      - network: storage_mgmt
{% endfor %}
{% endif %}
{% endif -%}
