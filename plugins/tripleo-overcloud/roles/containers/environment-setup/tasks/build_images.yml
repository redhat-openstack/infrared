---
- name: Downloading overcloud container images template
  get_url:
      url: "{{ containers_puddle_base_url.stdout }}/{{ containers_images_template_download_basename }}"
      dest: "{{ containers_images_template_dest_file }}"
      owner: stack
      group: stack

- name: replace docker registry with mirror
  replace:
      dest: "{{ containers_images_template_dest_file }}"
      regexp: '^([ ]*pull_source: ).*'
      replace: '\1{{ install.registry.mirror }}'
      backup: no
  when: install.get('registry', {}).mirror|default(false)
  tags:
      - container-images-yumupdate

- name: replace docker namespace
  replace:
      dest: "{{ containers_images_template_dest_file }}"
      regexp: '^(- imagename: ).*(\/.*)'
      replace: '\1{{ install.registry.namespace }}\2'
      backup: no
  when: install.get('registry', {}).namespace|default(false)
  tags:
      - container-images-yumupdate

- name: get tag of container images
  shell: |
        cat {{ containers_images_template_dest_file }} | awk '/- imagename: / {print $3}' | head -n1 | cut -f 2 -d:
  register: containers_images_tag
  tags:
      - container-images-yumupdate

- name: get docker registry name
  shell: |
      cat {{ containers_images_template_dest_file }} | awk '/pull_source:/ {print $2}' | head -n1 | tr -d ' '
  register: docker_insecure_registry

- name: replace IP with hostname in /etc/sysconfig/docker
  replace:
      dest: /etc/sysconfig/docker
      regexp: '^(INSECURE_REGISTRY=".*)"'
      replace: '\1 --insecure-registry {{ docker_insecure_registry.stdout }}"'
      backup: no
  become: true

- name: restart docker service
  service:
      name: docker
      state: restarted
  become: true

- name: Check if docker is running
  command: systemctl status docker
  ignore_errors: yes
  changed_when: false
  register: service_docker_status

- name: Report status of docker
  fail:
      msg: |
         Service docker is not running.
         Output of `systemctl status docker`:
         {{ service_docker_status.stdout }}
         {{ service_docker_status.stderr }}
  when: service_docker_status | failed

# using the loop below due to #bz1455683
- name: openstack overcloud container image upload
  shell: |
      source /home/stack/stackrc
      openstack overcloud container image upload --verbose --config-file {{ containers_images_template_dest_file }}
  register: image_upload
  until: image_upload.rc == 0
  retries: 5
  when: not install.registry.undercloud.skip
  tags:
      - skip_ansible_lint

- stat:
      path: /etc/yum.repos.d/patched_rpms.repo
  register: patched_rpms
  when: install.container.images.yumupdate
  tags:
      - container-images-yumupdate

- name: set fact for docker context dir for images yum update
  set_fact:
      registry_images_yumupdate_dir: "{{ containers_home_dir }}/images_yumupdate"
  when: install.container.images.yumupdate
  tags:
      - container-images-yumupdate

- name: remove docker context dir for images yum update - required to copy files into the image
  file:
    path: "{{ registry_images_yumupdate_dir }}"
    state: absent
  when: install.container.images.yumupdate
  tags:
      - container-images-yumupdate

- name: create docker context dir for images yum update - required to copy files into the image
  file:
    path: "{{ registry_images_yumupdate_dir }}"
    state: directory
  when: install.container.images.yumupdate
  tags:
      - container-images-yumupdate

- name: populate docker context dir for images yum update
  shell: |
    cp /etc/yum.repos.d/patched_rpms.repo {{ registry_images_yumupdate_dir }}/
    cp -r /patched_rpms {{ registry_images_yumupdate_dir }}/
  when:
    - install.container.images.yumupdate
    - patched_rpms.stat.exists
  tags:
      - container-images-yumupdate

- name: tag with 'before_yumupdate' and update&replace container image(s)
  shell: |
    docker tag {{ docker_registry_undercloud }}{{ docker_registry_undercloud_namespace }}/{{ item }}:{{ containers_images_tag.stdout }} \
    {{ docker_registry_undercloud }}{{ docker_registry_undercloud_namespace }}/{{ item }}:{{ containers_images_tag.stdout }}-before_yumupdate
    echo "
    FROM {{ docker_registry_undercloud }}{{ docker_registry_undercloud_namespace }}/{{ item }}:{{ containers_images_tag.stdout }}
    COPY patched_rpms.repo /etc/yum.repos.d/patched_rpms.repo
    ADD /patched_rpms /patched_rpms
    RUN yum update -y -v
    " > {{ registry_images_yumupdate_dir }}/Dockerfile
    docker build -t {{ docker_registry_undercloud }}{{ docker_registry_undercloud_namespace }}/{{ item }}:{{ containers_images_tag.stdout }} {{ registry_images_yumupdate_dir }}/
  with_items: "{{ install.container.images.yumupdate.split(',') }}"
  when: install.container.images.yumupdate
  tags:
      - container-images-yumupdate

- name: Output from uploading images
  debug: var=image_upload
