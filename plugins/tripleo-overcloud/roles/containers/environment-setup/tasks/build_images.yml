---
- name: modify puddle number url
  shell: >
      echo '{{ containers_puddle_base_url.stdout }}' | sed 's/{{ containers_puddle_number.stdout }}/{{ install.build|default("latest") }}/'
  register: modified_url
  when:
      - install.ocupdate|default(False)
      - install.build is defined and install.build != 'None'

- name: adjust containers_puddle_base_url
  set_fact:
      containers_puddle_base_url: "{{ modified_url }}"
  when: modified_url|changed

- name: Downloading overcloud container images environment file
  get_url:
      url: "{{ containers_puddle_base_url.stdout }}/{{ containers_images_env_template_download_basename }}"
      dest: "{{ containers_images_env_template_dest_file }}"
      force: true
  delegate_to: localhost

- name: Load variables from container environment file
  include_vars:
      file: "{{ containers_images_env_template_dest_file }}"
      name: container_env

- name: create nondefault fact for upload
  include_tasks: "{{ role_path }}/tasks/nondefault_images_fact.yml"
  with_items: "{{ install.overcloud.templates|default([]) }}"
  loop_control:
      loop_var: templates_list_file
  # avoid empty strings
  when: "templates_list_file != ''"

- name: Create {{ containers_images_template_dest_file }} to upload to local registry
  vars:
      os_version: "{{ install.version|default(undercloud_version)|openstack_release }}"
      basereg_relative: "{{ install.get('registry', {}).namespace|default(False)|ternary(install.get('registry', {}).namespace, ''.join(container_env['container-image-prepare']['namespace'].split('/')[1:])) }}"
      cephreg_relative: "{{''.join(container_env['container-image-prepare']['ceph-namespace'].split('/')[1:]) }}"
      mirror_reg: "{{ install.get('registry', {}).mirror|default('') }}"
      external_reg_namespace: "{{ mirror_reg | ternary(mirror_reg + '/' + basereg_relative, container_env['container-image-prepare']['namespace']) }}"
      external_ceph_namespace: "{{ mirror_reg | ternary(mirror_reg + '/' + cephreg_relative, container_env['container-image-prepare']['ceph-namespace']) }}"
  command: >
    openstack overcloud container image prepare \
        --namespace {{ external_reg_namespace }} \
        --tag {{ container_env['container-image-prepare']['tag'] }} \
        --prefix  {{ container_env['container-image-prepare']['prefix'] }} \
        --set ceph_namespace={{ container_env['container-image-prepare']['ceph-namespace'] }} \
        --set ceph_image={{ container_env['container-image-prepare']['ceph-image'] }} \
        --set ceph_tag={{ container_env['container-image-prepare']['ceph-tag'] }} \
        --output-images-file {{ containers_images_template_dest_file }} \
        {{ extra_service_environment|default('') }}

- name: get docker registry name
  vars:
      mirror_reg: "{{ install.get('registry', {}).mirror|default('') }}"
      external_reg: "{{ mirror_reg | ternary(mirror_reg, container_env['container-image-prepare']['namespace'].split('/')[0]) }}"
  set_fact:
      docker_insecure_registry: "{{ external_reg }}"

- name: replace IP with hostname in /etc/sysconfig/docker
  replace:
      dest: /etc/sysconfig/docker
      regexp: '^(INSECURE_REGISTRY=".*)"'
      replace: '\1 --insecure-registry {{ docker_insecure_registry }}"'
      backup: no
  become: true

- name: restart docker service
  service:
      name: docker
      state: restarted
  become: true

- name: Check if docker is running
  command: systemctl status docker
  ignore_errors: yes
  changed_when: false
  register: service_docker_status

- name: Report status of docker
  fail:
      msg: |
         Service docker is not running.
         Output of `systemctl status docker`:
         {{ service_docker_status.stdout }}
         {{ service_docker_status.stderr }}
  when: service_docker_status | failed

- name: openstack overcloud container image upload
  shell: |
      source /home/stack/stackrc
      openstack overcloud container image upload --verbose --config-file {{ containers_images_template_dest_file }}
  when: not install.registry.undercloud.skip
  tags:
      - skip_ansible_lint

- name: tag the original image(s) with 'before_packages_install' and install rpms&push new ones
  shell: |
      docker tag {{ docker_registry_undercloud }}{{ docker_registry_undercloud_namespace }}/{{ item.key }}:{{ container_env['container-image-prepare']['tag'] }} \
      {{ docker_registry_undercloud }}{{ docker_registry_undercloud_namespace }}/{{ item.key }}:{{ container_env['container-image-prepare']['tag'] }}-before_packages_install
      echo "FROM {{ docker_registry_undercloud }}{{ docker_registry_undercloud_namespace }}/{{ item.key }}:{{ container_env['container-image-prepare']['tag'] }}
      RUN yum localinstall {{ item.value.split(",") | join(" ") }} -y -v" | docker build -t {{ docker_registry_undercloud }}{{ docker_registry_undercloud_namespace }}/{{ item.key }}:{{ container_env['container-image-prepare']['tag'] }} -
      docker push {{ docker_registry_undercloud }}{{ docker_registry_undercloud_namespace }}/{{ item.key }}:{{ container_env['container-image-prepare']['tag'] }}
  when: install_container_images_packages is defined
  with_dict: "{{ install_container_images_packages }}"
  become: true
  tags: container-images-packages
