---
# versions and registry addresses is job metadata we want to collect in json file
# when 'collect-ansible-facts' role is called hence using set_facts instead of vars
- block:
    - name: set required facts for "container image prepare"
      set_fact:
          container_image:
              openstack_version: "{{ install.version|default(undercloud_version)|openstack_release }}"
              basereg_relative: "{{ install.get('registry', {}).namespace|default(False)|ternary(install.get('registry', {}).namespace, ''.join(container_env['container-image-prepare']['namespace'].split('/')[1:])) }}"
              cephreg_relative: "{{''.join(container_env['container-image-prepare']['ceph-namespace'].split('/')[1:]) }}"
              mirror_reg: "{{ install.get('registry', {}).mirror|default('') }}"
      tags: container-images-packages

    - name: set required facts for "container image prepare" - part two
      set_fact:
          container_image_external:
              reg_namespace: "{{ container_image['mirror_reg'] | ternary(container_image['mirror_reg'] + '/' + container_image['basereg_relative'], container_env['container-image-prepare']['namespace']) }}"
              ceph_namespace: "{{ container_image['mirror_reg'] | ternary(container_image['mirror_reg'] + '/' + container_image['cephreg_relative'], container_env['container-image-prepare']['ceph-namespace']) }}"
      tags: container-images-packages

    - block:
        - name: "Create {{ containers_images_template_dest_file }} to upload to local registry - *overcloud* container image prepare"
          command: >
            openstack overcloud container image prepare \
                --namespace {{ container_image_external['reg_namespace'].rstrip('/') }} \
                --tag {{ container_env['container-image-prepare']['tag'] }} \
                {% if container_env['container-image-prepare']['prefix'] != '' %}
                --prefix {{ container_env['container-image-prepare']['prefix'] }} \
                {% endif %}
                {% if container_env['container-image-prepare']['ceph-namespace'] != '' %}
                --set ceph_namespace={{ container_env['container-image-prepare']['ceph-namespace'] }} \
                {% endif %}
                {% if container_env['container-image-prepare']['ceph-image'] != '' %}
                --set ceph_image={{ container_env['container-image-prepare']['ceph-image'] }} \
                {% endif %}
                {% if container_env['container-image-prepare']['ceph-tag'] != '' %}
                --set ceph_tag={{ container_env['container-image-prepare']['ceph-tag'] }} \
                {% endif %}
                --output-images-file {{ containers_images_template_dest_file }} \
                {{ environment_yamls | default('') }} {{ roles_yamls | default('') }}

        - name: get docker registry name
          set_fact:
              docker_insecure_registry: "{{ container_image_external['reg_namespace'].split('/')[0] }}"
          tags: container-images-packages

        - name: set insecure ceph registry
          set_fact:
              docker_insecure_ceph_registry: "{{ container_env['container-image-prepare']['ceph-namespace'].split('/')[0] }}"
          when:
              - container_env['container-image-prepare']['ceph-namespace'] != ''

        - name: replace IP with hostname in /etc/sysconfig/docker
          replace:
              dest: /etc/sysconfig/docker
              regexp: '^(INSECURE_REGISTRY=.--insecure-registry)'
              replace: '\1 {{ docker_insecure_registry }} --insecure-registry'
              backup: no
          become: true

        - name: add insecure ceph registry to /etc/sysconfig/docker
          replace:
              dest: /etc/sysconfig/docker
              regexp: '^(INSECURE_REGISTRY=.--insecure-registry)'
              replace: '\1 {{ docker_insecure_ceph_registry }} --insecure-registry'
              backup: no
          become: true
          when:
              - docker_insecure_ceph_registry is defined

        - name: restart docker service
          service:
              name: docker
              state: restarted
          become: true

        - name: Check if docker is running
          command: systemctl status docker
          ignore_errors: yes
          changed_when: false
          register: service_docker_status

        - name: Report status of docker
          fail:
              msg: |
                 Service docker is not running.
                 Output of `systemctl status docker`:
                 {{ service_docker_status.stdout }}
                 {{ service_docker_status.stderr }}
          when: service_docker_status is failed

        - name: openstack overcloud container image upload
          shell: |
              source /home/stack/stackrc
              openstack overcloud container image upload --verbose --config-file {{ containers_images_template_dest_file }}
          when: not install.registry.undercloud.skip
          tags:
              - skip_ansible_lint
              - container_image_upload
      when:
          - install.version|default(undercloud_version)|openstack_release < 14

    - name: Get patched_rpms and from_source file stat
      vars:
          repo_dir: /etc/yum.repos.d
      stat:
          path: "{{ repo_dir }}/{{ item }}"
      register: patched_rpms
      with_items:
          - patched_rpms.repo
          - from_source.repo
      tags: container-images-packages

    - when:
        - multirhel_enabled
        - multirhel_overcloud_container_image_prepare_parameter_file != 'auto'
      block:
        - name: "Save user-provided {{ multirhel_overcloud_container_image_prepare_parameter_file }} as ~/{{ multirhel_overcloud_container_image_prepare_parameter_file_name }}"
          copy:
            src: "{{ multirhel_overcloud_container_image_prepare_parameter_file }}"
            dest: "~/{{ multirhel_overcloud_container_image_prepare_parameter_file_name }}"
            backup: yes
          when: multirhel_overcloud_container_image_prepare_parameter_file | regex_search('^http.*', ignorecase=True) is none

        - when: multirhel_overcloud_container_image_prepare_parameter_file | regex_search('^http.*', ignorecase=True) is not none
          block:
          - name: Fetch user-provided multirhel_overcloud_container_image_prepare_parameter_file URL as ~/{{ multirhel_overcloud_container_image_prepare_parameter_file_name }} (.gz)
            vars:
              is_archive: "{{ multirhel_overcloud_container_image_prepare_parameter_file | regex_search('.*\\.gz$', ignorecase=True) is not none }}"
            get_url:
              url: "{{ multirhel_overcloud_container_image_prepare_parameter_file }}"
              dest: "~/{{ multirhel_overcloud_container_image_prepare_parameter_file_name }}{{ is_archive | ternary('.gz', '') }}"
              backup: yes
              force: yes

          - name: "Unarchive the file if it's *.gz (overwrite existing)"
            command: gzip -f -d ~/{{ multirhel_overcloud_container_image_prepare_parameter_file_name }}.gz
            vars:
              chdir: "{{ template_base }}"
            when: "multirhel_overcloud_container_image_prepare_parameter_file | regex_search('.*\\.gz$', ignorecase=True) is not none"

        - name: "show content of ~/{{ multirhel_overcloud_container_image_prepare_parameter_file_name }}"
          shell: "cat ~/{{ multirhel_overcloud_container_image_prepare_parameter_file_name }}"

    ## Workaround BZ#1627946
    - name: Run tripleo container image prepare (OSP >= 14)
      shell: |
          {% if install.version|default(undercloud_version)|openstack_release > 14 %}
          sudo \
          {% endif %}
          openstack tripleo container image prepare \
            -e ~/containers-prepare-parameter.yaml \
            {% if install.version|default(undercloud_version)|openstack_release < 17 %}{{ environment_yamls | default('') }} {% endif -%}
            {{ roles_yamls | default('--roles-file /usr/share/openstack-tripleo-heat-templates/roles_data.yaml') }} \
            {% if install.version|default(undercloud_version)|openstack_release < 17 %}
            --output-env-file {{ template_base }}/docker-images.yaml
            {% elif install_container_images_urls is defined or install_multirhel_container_images_urls is defined %}
             --output-env-file {{ template_base }}/openstack_tripleo_container_image_prepare_output.yaml_
            {% endif -%}
      when: install.version|default(undercloud_version)|openstack_release >= 14 and
            ( install.network.ovn|default(False) or
              install.ocupdate|default(False) or
              install_container_images_packages is defined or
              install_container_extra_repos is defined or
              install_container_images_urls is defined or
              install_multirhel_container_images_urls is defined or
              install_container_images_patch is defined or patched_rpms.results | selectattr('stat.exists', 'equalto', True) | list | length > 0
            ) or
            (
              install.version|default(undercloud_version)|openstack_release >= 17 and
              install.storage.backend|default('') == 'ceph'
            )
      tags:
          - skip_ansible_lint
          - container-image-prepare

    # required for the next TASK (container image prepare multirhel) to work properly when testing it in isolation
    # this tasks doesn't run by default
    - setup:
      tags:
        - never
        - container_image_prepare_multirhel

    - when:
        - install.version|default(undercloud_version)|openstack_release >= 17
        - multirhel_enabled
        - multirhel_overcloud_container_image_prepare_parameter_file == 'auto'
      tags: container_image_prepare_multirhel
      block:
        # the container image prepare process for multirhel deployments is to different from regular hence it's a separate task
        # TODO(wznoinsk): make the parameters gathering done using yaml to support user-provided namespace/name_prefix/tag/ceph overrides
        - name: (multirhel) Run tripleo container image prepare
          shell: |
            set -eo pipefail

            export NAMESPACE=$(awk '/\s+namespace:/ {print $2}' ~/containers-prepare-parameter.yaml)

            EL9_COMPOSE={{ containers_puddle_number.stdout }} # i.e. EL9_COMPOSE=RHOS-17.1-RHEL-9-20230315.n.1
            EL9_TAGS=$(cat ~/containers-prepare-parameter.yaml | sed 's/: / /g' | sed "s/''//g" | awk '/^ *tag |^ *namespace |^ *name_/ {print "\""$1"\":\""$2"\","}')
            CEPH_TAGS=$(cat ~/containers-prepare-parameter.yaml | sed -e 's/: / /g' | sed "s/''//g" | sed "s#registry-proxy.engineering.redhat.com/rh-osbs#${NAMESPACE}#g" | awk '/ceph/ {print "\""$1"\":\""$2"\","}')

            export DOWNLOAD_HOST=download.devel.redhat.com
            if ! ping -q -c 3 ${DOWNLOAD_HOST}; then DOWNLOAD_HOST=download.eng.bos.redhat.com; fi
            # discover which 17.1-RHEL8 compose is "linked" to the 17.1-RHEL9 compose that is being deployed
            EL8_COMPOSE=$(curl -4 -k -L http://${DOWNLOAD_HOST}/rcm-guest/puddles/OpenStack/17.1-RHEL-9/${EL9_COMPOSE}/RHEL8_COMPOSE_ID)
            EL8_TAGS=$(curl -4 -k -L http://${DOWNLOAD_HOST}/rcm-guest/puddles/OpenStack/17.1-RHEL-8/${EL8_COMPOSE}/container_image_prepare_parameter_defaults.yaml \
            | sed 's/: / /g' | sed "s/''//g"| sed "s#registry-proxy.engineering.redhat.com/rh-osbs#${NAMESPACE}#g" | awk '/^ *tag |^ *namespace |^ *name_/ {print "\""$1"\":\""$2"\","}')

            /usr/share/openstack-tripleo-heat-templates/tools/multi-rhel-container-image-prepare.py \
               --enable-multi-rhel \
               --excludes nova-libvirt --excludes collectd \
               {% for r in multirhel_roles_map.split(',') %}--role {{ r.split(':')[1] }} {% endfor %} \
               --role-file {{ template_base }}/roles/roles_data_multirhel.yaml \
               --minor-override "{${EL8_TAGS}${CEPH_TAGS}\"no_tag\":\"not_used\"}" --major-override "{${EL9_TAGS}${CEPH_TAGS}\"no_tag\":\"not_used\"}" \
               --local-push-destination \
               --output-env-file ~/{{ multirhel_overcloud_container_image_prepare_parameter_file_name }}

        - name: (multirhel) remove ComputeContainerImagePrepare from container image prepare parameter file
          shell: sed -i '/ComputeContainerImagePrepare/d' {{ multirhel_overcloud_container_image_prepare_parameter_file_name }}

    - name: install packages in container images
      include_tasks: container_images_packages.yml
      when: install_container_images_packages is defined
      tags: container-images-packages

    - name: patch images
      import_tasks: patch_images.yml
      when: install_container_images_patch is defined or patched_rpms.results | selectattr('stat.exists', 'equalto', True) | list | length > 0
      tags: container-images-packages

    - name: Update containers images when OSP <= 14
      import_tasks: update_images.yml
      when:
        - install_container_extra_repos is defined
        - install.version|default(undercloud_version)|openstack_release <= 14
      tags: container-extra-repos

    - name: Update containers images when OSP >= 15
      include_tasks: patch_images_tripleo-modify-image.yml
      when:
        - install.version|default(undercloud_version)|openstack_release >= 15
        - install_container_extra_repos is defined

    - name: set neutron_driver in containers-prepare-parameter.yaml
      replace:
          path: "containers-prepare-parameter.yaml"
          regexp: '^(\s*neutron_driver:).*'
          replace: "\\1 ovs"
      when:
          - install.network.ovs
          - install.version|default(undercloud_version)|openstack_release >= 14

  when:
    - not install.overcloud.templates| default(False) | select('search', 'rhsm|overcloud_cdn|overcloud_satellite') | list | length > 0
    - install.cdn is not defined or (cdn_status is defined and cdn_status.rc != 0)

- block:
    - name: fetch cdn creds from file
      include_vars:
          file: "{{ install.cdn|default('') }}"
          name: cdn_creds
      # file may contain passwords. Don't print its content to console
      no_log: yes

    - name: Run tripleo container prepare default (CDN) < 14
      command: openstack overcloud container image prepare --output-env-file containers-prepare-parameter.yaml
      when:
        - install.version|default(undercloud_version)|openstack_release < 14

    - name: Run tripleo container prepare default (CDN) > 13
      shell: |
        {% if install.version|default(undercloud_version)|openstack_release > 14 %}
        sudo \
        {% endif %}
        openstack tripleo container image prepare default --local-push-destination --output-env-file containers-prepare-parameter.yaml
      when:
        - install.version|default(undercloud_version)|openstack_release >= 14

    - name: Check if Satellite server
      uri:
       url: "https://{{ cdn_creds.server_hostname }}/katello/api/ping"
       validate_certs: no
       status_code: 200, 404
      register: _sat6_check
      when: cdn_creds.server_hostname is defined

    - name: add credentials to container images environment file
      blockinfile:
        dest: "containers-prepare-parameter.yaml"
        insertafter: EOF
        block: "  ContainerImageRegistryCredentials:\n    registry.redhat.io:\n      {{ cdn_creds.registry_username }}: {{ cdn_creds.registry_password }}"
      when:
       - cdn_creds.server_hostname is defined
       - _sat6_check['status'] != 200

    - name: set neutron_driver in containers-prepare-parameter.yaml
      replace:
          path: "containers-prepare-parameter.yaml"
          regexp: '^(\s*neutron_driver:).*'
          replace: "\\1 ovs"
      when:
          - install.network.ovs
          - install.version|default(undercloud_version)|openstack_release >= 14

  when: install.cdn is defined
