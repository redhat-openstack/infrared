- name: Tag our machines with flavors
  hosts: undercloud
  gather_facts: no
  any_errors_fatal: true
  tasks:
      - name: Use instackenv provided
        vars:
            instack_input: "{{ (install.instackenv|default({})).file | default('') }}"
        stat:
            path: "~/{{ (instack_input or '~/instackenv.json') | basename }}"
        register: instack_file_path

      - set_fact:
            instack_file: "{{ instack_file_path.stat.path }}"
        when: instack_file_path.stat.exists

      - name: fail if instackenv file is missing
        fail:
            msg: "instackenv file is missing"
        when: not instack_file_path.stat.exists

      # replace with os_ modules once shade group will be available
      - name: read all flavors
        shell: |
            source ~/stackrc
            openstack flavor list | awk  'FNR>3 {print $4}' | sed '/^\s*$/d'
        register: existing_flavors
        tags: skip_ansible_lint

      - name: remove all the flavors
        shell: |
            source ~/stackrc
            openstack flavor delete {{ item }}
        with_items: "{{ existing_flavors.stdout_lines }}"
        ignore_errors: yes
        tags: skip_ansible_lint
        register: flavor_delete

      - name: Workarond for BZ #1317312
        shell: |
            source ~/stackrc
            nova flavor-delete {{ item[0] }}
        tags: skip_ansible_lint
        when: "'public endpoint for messaging service not found' in item[1].stderr "
        with_together:
            - "{{ existing_flavors.stdout_lines }}"
            - "{{ flavor_delete.results }}"
        ignore_errors: yes

      - name: create the baremetal flavor for our machines
        shell: |
            source ~/stackrc
            openstack flavor create --id auto --ram 4096 --disk 8 --vcpus 1 baremetal
        tags: skip_ansible_lint
        register: bm_result
        ignore_errors: yes
        failed_when: "bm_result.rc != 0 and bm_result.stderr.find('Flavor with name baremetal already exists') != -1"

      # OSPd7 doesn't seem to have implicit profile matching and notifies to do this step manually
      # in prior of OC deployment. Otherwise errors and warnings are produced in process when
      # overcloud deployment starts.
      - name: set additional properties
        shell: |
            source ~/stackrc
            openstack flavor set --property 'cpu_arch'='x86_64' --property 'capabilities:boot_option'='local' --property "capabilities:profile"="baremetal" baremetal
        when:
            - install.version|default(undercloud_version)|openstack_release == 7
            - "'hypervisor' not in groups"
            - "'bmc' not in groups"
        tags: skip_ansible_lint

      - name: Set baremetal capability for OSPd7 nodes as it must be done explicitely
        shell: |
            source ~/stackrc
            for node in `ironic node-list | awk '{print $2}' | grep -v "\(ID\|^$\)"`; do ironic node-update $node add properties/capabilities=profile:baremetal,boot_option:local; done
        tags: skip_ansible_lint
        when:
            - install.version|default(undercloud_version)|openstack_release == 7
            - "'hypervisor' not in groups"
            - "'bmc' not in groups"

      - name: read instackenv file
        command: cat "{{ instack_file }}"
        register: overcloud_hosts_facts

      - set_fact:
            overcloud_facts: "{{ overcloud_hosts_facts.stdout | from_json }}"

      - block:
            - name: check for original flavors
              shell: >
                  source ~/stackrc;
                  openstack flavor list | awk '/{{ item.name.rstrip('1234567890-').split('-')[-1] }}/ {print $4}'
              with_items: "{{ overcloud_facts.nodes | default([]) }}"
              register: original_flavors

            # Remember, hostvars are special: https://github.com/ansible/ansible/issues/13838, https://github.com/ansible/ansible/issues/21084
            - name: create the flavors for our machines
              vars:
                  flv_min_disk_size: 6
                  flv_min_cpu: 1
                  searched_string: "Flavor with name {{ item.name }} already exists"
              shell: >
                  source ~/stackrc;
                  openstack flavor create
                  --id auto
                  --ram {{ (hostvars[item.name] | default({})).ram | default(item.memory) }}
                  --disk {{ [((hostvars[item.name] | default({})).disk | default(item.disk) | int) - 3, flv_min_disk_size] | max }}
                  --vcpus {{ [((hostvars[item.name] | default({})).vcpus | default(item.cpu) | int) - 1, flv_min_cpu] | max }}
                  {{ item.name.rstrip('1234567890-').split('-')[-1] }}
              register: flavor_result
              failed_when: flavor_result.rc != 0 and flavor_result.stderr.find(searched_string) != -1
              with_items: "{{ overcloud_facts.nodes | default([]) }}"

            - name: get the node UUID
              vars:
                  ironic_cli: "{{ (install.version|default(undercloud_version)|openstack_release < 14)|ternary('ironic node-list','openstack baremetal node list') }}"
              shell: |
                  source ~/stackrc
                  {{ ironic_cli }} | awk '/{{ item.name | default(item) }}/ {print $2}'
              with_items: "{{ overcloud_facts.nodes | default([])}}"
              register: node_list

        when: "overcloud_facts.nodes[0].name is defined"

      - set_fact:
            tagged_flavors: "{{ flavor_result.results }}"

      - name: set additional properties
        shell: |
            source ~/stackrc
            openstack flavor set --property 'cpu_arch'='x86_64' --property 'capabilities:boot_option'='local' --property 'capabilities:profile'='{{ item.cmd.split() | last }}' {{ item.cmd.split() | last }}
        tags: skip_ansible_lint
        when: item.cmd is defined
        with_items: "{{ tagged_flavors | default([]) }}"

      - name: tag our nodes with the proper profile with ironic client
        shell: |
            source ~/stackrc
            ironic node-update {{ item[0].stdout }} add properties/capabilities='profile:{{ item[1].cmd.split() | last }},boot_option:local'
        tags: skip_ansible_lint
        when:
            - "item[0].item.name is defined and item[1].cmd is defined and item[0].item.name.rstrip('1234567890-').split('-')[-1] in item[1].cmd"
            - install.version|default(undercloud_version)|openstack_release < 14
        with_together:
            - "{{ node_list.results }}"
            - "{{ tagged_flavors | default([]) }}"

      - name: tag our nodes with the proper profile with unified client
        shell: |
            source ~/stackrc
            openstack baremetal node set --property capabilities='profile:{{ item[1].cmd.split() | last }},boot_option:local' {{ item[0].stdout }}
        tags: skip_ansible_lint
        when:
            - "item[0].item.name is defined and item[1].cmd is defined and item[0].item.name.rstrip('1234567890-').split('-')[-1] in item[1].cmd"
            - install.version|default(undercloud_version)|openstack_release >= 14
        with_together:
            - "{{ node_list.results }}"
            - "{{ tagged_flavors | default([]) }}"

      - name: Check if node name is not None
        shell: |
            source ~/stackrc
            openstack baremetal node list -c Name -f value|grep -zqvi None
        register: check_nodename
        failed_when: false
        changed_when: false

      - name: Print resource-class debug message
        vars:
            message: |
                Currently custom resource class(es) is available only for the
                virtual deployment, since node name is used to associate custom
                resource class with it and when node name is 'None'
                scheduling based on resource class is skipping
        debug:
            msg: "{{ message.split('\n') }}"
        when: check_nodename.rc != 0

      - block:
          - name: Set default resource-class parameters
            vars:
                name: "{{ item.name.rstrip('1234567890-').split('-')[-1] }}"
            set_fact:
                default_resource_class: "{{ default_resource_class | default([]) + [{ 'name': name, 'flavor': name, 'node': item.name }] }}"
            with_items: "{{ overcloud_facts.nodes | default([])}}"
            tags: skip_ansible_lint
            when:
                - "overcloud_facts.nodes[0].name is defined"

          - name: Merge default and override resource class parameters
            set_fact:
                resource_class: "{{ default_resource_class + install.resource.class.get('override', []) }}"

          - name: Add resource class to flavor and node
            shell: |
                set -exo pipefail

                REGEX=".*-[0-9]+$"
                source ~/stackrc
                # Remove already exist custom resource class for flavor
                for rclass in $(openstack flavor show {{ item.flavor }} -f value -c properties | grep -o 'CUSTOM_[A-Z_]*'); do
                    openstack flavor unset {{ item.flavor }} --property resources:${rclass}
                done

                openstack flavor set {{ item.flavor }} \
                    --property resources:DISK_GB=0 \
                    --property resources:MEMORY_MB=0 \
                    --property resources:VCPU=0 \
                    --property resources:CUSTOM_{{ item.name.replace('-', '_').upper() }}=1
                {% for node in item.node.split(':') %}
                    if [[ "{{ node }}" =~ $REGEX ]]; then
                        openstack baremetal node set $(openstack baremetal node show {{ node }} -c uuid -f value) \
                        --resource-class {{ item.name }}
                    else
                        openstack baremetal node list|awk '/{{ node }}/ {print $2}'| \
                        xargs -I{} openstack baremetal node set {} --resource-class {{ item.name }}
                    fi
                {% endfor %}
            tags: skip_ansible_lint
            with_items: "{{ resource_class }}"
        when:
            - check_nodename.rc == 0
            - install.resource.class.enabled
            - install.version|default(undercloud_version)|openstack_release >= 12
