- name: Tag our machines with flavors
  hosts: undercloud
  gather_facts: no
  any_errors_fatal: true
  tasks:
      - name: Use instackenv provided
        vars:
            instack_input: "{{ (install.instackenv|default({})).file | default('') }}"
        stat:
            path: "~/{{ (instack_input or '~/instackenv.json') | basename }}"
        register: instack_file_path

      - set_fact:
            instack_file: "{{ instack_file_path.stat.path }}"
        when: instack_file_path.stat.exists

      - name: fail if instackenv file is missing
        fail:
            msg: "instackenv file is missing"
        when: not instack_file_path.stat.exists

      - name: Remove all existing flavors
        shell: |
            source ~/stackrc
            flavor_list=$(openstack flavor list -f value -c Name | tr '\r\n' ' ')
            if [[ "$flavor_list" != "" ]]; then
              openstack flavor delete ${flavor_list}
              exit 2
            fi
        args:
          executable: /bin/bash
        register: _remove_existing_flavors
        changed_when: _remove_existing_flavors.rc == 2
        failed_when: _remove_existing_flavors.rc not in [0, 2]

      - name: Create the baremetal flavor for our machines
        shell: |
            source ~/stackrc
            openstack flavor create --id auto --ram 4096 --disk 8 --vcpus 1 baremetal
        tags: skip_ansible_lint

      - name: Set resources properties for baremetal flavor (RHOS14+)
        shell: |
            source ~/stackrc
            openstack flavor set baremetal \
              --property resources:CUSTOM_BAREMETAL=1 \
              --property resources:DISK_GB=0 \
              --property resources:MEMORY_MB=0 \
              --property resources:VCPU=0 \
              --property capabilities:boot_option=local
        tags: skip_ansible_lint
        when: install.version|default(undercloud_version)|openstack_release > 13

      # OSPd7 doesn't seem to have implicit profile matching and notifies to do this step manually
      # in prior of OC deployment. Otherwise errors and warnings are produced in process when
      # overcloud deployment starts.
      - name: Apply special cases for OSP7
        when:
            - install.version|default(undercloud_version)|openstack_release == 7
            - "'hypervisor' not in groups"
            - "'bmc' not in groups"
        block:
          - name: set additional properties
            shell: |
                source ~/stackrc
                openstack flavor set --property 'cpu_arch'='x86_64' --property 'capabilities:boot_option'='local' --property "capabilities:profile"="baremetal" baremetal
            tags: skip_ansible_lint

          - name: Set baremetal capability for OSPd7 nodes as it must be done explicitely
            shell: |
                source ~/stackrc
                for node in `ironic node-list | awk '{print $2}' | grep -v "\(ID\|^$\)"`; do ironic node-update $node add properties/capabilities=profile:baremetal,boot_option:local; done
            tags: skip_ansible_lint

      - name: read instackenv file
        command: cat "{{ instack_file }}"
        register: overcloud_hosts_facts

      - set_fact:
            overcloud_facts: "{{ overcloud_hosts_facts.stdout | from_json }}"

      - block:
          - set_fact:
              overcloud_flavors: >-
                  {%- set flavors = {} %}
                  {%- for node in overcloud_facts.nodes %}
                  {%-   set flavor_name = node.name.rstrip('1234567890-').split('-')[-1] %}
                  {%-   if flavor_name not in flavors %}
                  {%-     set flavor_data = { 'ram': node.memory, 'disk': node.disk | int, 'vcpus': node.cpu | int } %}
                  {%-     set _ = flavors.update({ flavor_name: flavor_data }) %}
                  {%-   endif %}
                  {%- endfor %}
                  {{- flavors }}
              overcloud_nodes: >-
                  {%- set nodes = [] %}
                  {%- for node in overcloud_facts.nodes %}
                  {%-   set _ = nodes.append({ 'name': node.name, 'profile': node.name.rstrip('1234567890-').split('-')[-1] }) %}
                  {%- endfor %}
                  {{- nodes }}

            - name: create the flavors for our machines
              vars:
                  flv_min_disk_size: 6
                  flv_min_cpu: 1
              shell: |
                  source ~/stackrc
                  openstack flavor create \
                        --id auto \
                        --ram {{ item.value.ram }} \
                        --disk {{ [item.value.disk - 3, flv_min_disk_size] | max }} \
                        --vcpus {{ [item.value.vcpus - 1, flv_min_cpu] | max }} \
                        --property 'cpu_arch'='x86_64' \
                        --property 'capabilities:boot_option'='local' \
                        --property 'capabilities:profile'='{{ item.key }}' \
                        {% if install.boot.mode == 'uefi'  %}--property capabilities:boot_mode=uefi{% endif %} \
                        {{ item.key }}
              register: flavor_result
              with_items: "{{ overcloud_flavors | dict2items }}"

            - name: assign the flavors to our machines
              shell: |
                  source ~/stackrc
                  {% if install.version|default(undercloud_version)|openstack_release < 14 %}
                  ironic node-update {{ item.name }} \
                        add properties/capabilities='profile:{{ item.profile }},{% if install.boot.mode == 'uefi' %}boot_mode:uefi,{% endif %}boot_option:local,node:{{ item.name }}'
                  {% else %}
                  openstack baremetal node set \
                        --property capabilities='profile:{{ item.profile }},{% if install.boot.mode == 'uefi'  %}boot_mode:uefi,{% endif %}boot_option:local,node:{{ item.name }}' \
                        {{ item.name }}
                  {% endif %}
              with_items: "{{ overcloud_nodes }}"
              register: node_list

        when: "overcloud_facts.nodes[0].name is defined"

      - name: Check if node name is not None
        shell: |
            source ~/stackrc
            openstack baremetal node list -c Name -f value|grep -zqvi None
        register: check_nodename
        failed_when: false
        changed_when: false

      - name: Print resource-class debug message
        vars:
            message: |
                Currently custom resource class(es) is available only for the
                virtual deployment, since node name is used to associate custom
                resource class with it and when node name is 'None'
                scheduling based on resource class is skipping
        debug:
            msg: "{{ message.split('\n') }}"
        when: check_nodename.rc != 0

      - block:
          - name: Set default resource-class parameters
            vars:
                name: "{{ item.name.rstrip('1234567890-').split('-')[-1] }}"
            set_fact:
                default_resource_class: "{{ default_resource_class | default([]) + [{ 'name': name, 'flavor': name, 'node': item.name }] }}"
            with_items: "{{ overcloud_facts.nodes | default([]) }}"
            tags: skip_ansible_lint
            when:
                - "overcloud_facts.nodes[0].name is defined"

          - name: Merge default and override resource class parameters
            set_fact:
                resource_class: "{{ default_resource_class + install.resource.class.get('override', []) }}"

          - name: Add resource class to flavor and node
            shell: |
                set -exo pipefail

                REGEX=".*-[0-9]+$"
                source ~/stackrc
                # Remove already exist custom resource class for flavor
                for rclass in $(openstack flavor show {{ item.flavor }} -f value -c properties | grep -o 'CUSTOM_[A-Z_]*'); do
                    openstack flavor unset {{ item.flavor }} --property resources:${rclass}
                done

                openstack flavor set {{ item.flavor }} \
                    --property resources:DISK_GB=0 \
                    --property resources:MEMORY_MB=0 \
                    --property resources:VCPU=0 \
                    --property resources:CUSTOM_{{ item.name.replace('-', '_').upper() }}=1
                {% for node in item.node.split(':') %}
                    if [[ "{{ node }}" =~ $REGEX ]]; then
                        openstack baremetal node set $(openstack baremetal node show {{ node }} -c uuid -f value) \
                        --resource-class {{ item.name }}
                    else
                        openstack baremetal node show {{ node }} -c uuid -f value | \
                        xargs -I{} openstack baremetal node set {} --resource-class {{ item.name }}
                    fi
                {% endfor %}
            tags: skip_ansible_lint
            with_items: "{{ resource_class }}"
        when:
            - check_nodename.rc == 0
            - install.resource.class.enabled
            - install.version|default(undercloud_version)|openstack_release >= 12
