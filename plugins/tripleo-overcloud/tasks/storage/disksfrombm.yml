- name: load instackenv
  shell: cat ~/instackenv.json
  register: instackenv_js

# NOTE(oanufrii): For some reason definition 'instackenv_data' in 'vars' section of
#                 'Get BareMetal introspection data' raises an error:
#                     'Unexpected templating type error occurred on ({{ instackenv_js.stdout | from_json }}): expected string or buffer'
#                 Thus, it's defined as fact
#                 ( Ansible==2.3.1.0 )
- name:
  set_fact:
      instackenv_data: "{{ instackenv_js.stdout | from_json }}"

- name: Get BareMetal introspection data
  shell: |
      source ~/stackrc
      # Get list of baremetal introspection UUIDs
      for UUID in $(openstack baremetal introspection list | tail -n +4 | head -n -1 | awk {'print $2'});
      do
          # For each UUID get baremetal introspection data and search for mac address, defined in 'instackenv.json'
          MATCH=$(openstack baremetal introspection data save ${UUID} | jq ''|grep "{{ item.mac[0] }}" | wc -l)
          # If mac address if found
          if [ ${MATCH} != 0 ];
          then
              # get corresponding sections from baremetal introspection
              DISKS=$(openstack baremetal introspection data save ${UUID} | jq -c -M '.inventory.disks')
              ROOT=$(openstack baremetal introspection data save ${UUID} | jq -c -M '.root_disk.name')
              # print them as JSON
              echo "{\"root_disk\": ${ROOT}, \"disks\": ${DISKS}}"
          fi
      done
  # All hosts from 'instackenv.json' which name is in storage group (swift or ceph) of ansible inventory
  with_items: "{{ instackenv_data.nodes }}"
  when: item["name"] in storage_group
  register: inventory_disks
 
- name: get nonroot disks list
  vars:
      # Parse JSON output of 'Get BareMetal introspection data' shell module
      # We need only one of results, assuming storage nodes configurations are identical
      disks_info: "{{ (inventory_disks.results | first).stdout | from_json }}"
  set_fact:
      disk_path: "{{ item.name }}"
  with_items: "{{ disks_info.disks }}"
  when: item["name"] != disks_info["root_disk"]
  register: disk_paths_results

# Reprocess 'disk_paths_results' from list of results to list of strings
- name:
  set_fact:
      ceph_disks_list: "{{ disk_paths_results.results | selectattr('ansible_facts', 'defined') | map(attribute='ansible_facts.disk_path') | list }}"

- name:
  debug:
      msg: "Storage disks:  {{ ceph_disks_list }}"
      verbosity: 2
