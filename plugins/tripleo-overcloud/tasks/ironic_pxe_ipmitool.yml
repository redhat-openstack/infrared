---
- name: Install required packages (ironic's 'pxe_ipmitool' driver)
  hosts: hypervisor
  gather_facts: True
  any_errors_fatal: True
  tags: pre
  tasks:
      - name: Install packages required for 'pxe_ipmitool' ironic's driver
        package:
            name: "{{ item }}"
            state: latest
        with_items:
            - python-setuptools
            - python-virtualbmc
            - ipmitool

      - name: Remove existing Virtual BMCs
        # grab only lines with port number (more than 2 digits)
        shell: |
            for node in `vbmc list | awk '/[0-9]{2}/ {print $2}'`
            do
                vbmc stop ${node}
                vbmc delete ${node}
            done

- name: Configure vbmc (ironic's 'pxe_ipmitool' driver)
  hosts: hypervisor
  vars:
      vbmc_ports: {}
      vbmc_start_port: 6230
  gather_facts: False
  any_errors_fatal: True
  tags: pre
  tasks:
      - name: Define vbmc_port for each VM
        set_fact:
            vbmc_ports: "{{ vbmc_ports|combine({ item.1: vbmc_start_port + item.0 }) }}"
        with_indexed_items: "{{ groups.get('overcloud_nodes', []) }}"

      - name: vbmc ports
        debug:
            var: vbmc_ports

      - name: allow access to port vbmc ports from undercloud
        become: True
        shell: |
            iptables -I INPUT 1 -w 3 -s {{ hostvars['undercloud-0'].ansible_default_ipv4.address }} -p udp --dport {{ item.value }} -j ACCEPT
            iptables -I INPUT 1 -w 3 -s {{ hostvars['undercloud-0'].ansible_default_ipv4.address }} -p tcp --dport {{ item.value }} -j ACCEPT
        with_dict: "{{ vbmc_ports }}"

      - name: Add nodes to vbmc
        command: "vbmc add {{ item.key }} --port {{ item.value }} --username {{ install.vbmc.username }} --password {{ install.vbmc.password }}"
        with_dict: "{{ vbmc_ports }}"

      - name: Start nodes using vbmc
        command: "vbmc start {{ item.key }}"
        with_dict: "{{ vbmc_ports }}"

      - name: Setting nodes power status using ipmitool
        command: "ipmitool -I lanplus -U {{ install.vbmc.username }} -P {{ install.vbmc.password }} -H 127.0.0.1 -p {{ item.value }} chassis power on"
        with_dict: "{{ vbmc_ports }}"

      - name: Get vbmc VMs power status using ipmitool
        command: "ipmitool -I lanplus -U {{ install.vbmc.username }} -P {{ install.vbmc.password }} -H 127.0.0.1 -p {{ item.value }} power status"
        register: ipmitool_results
        with_dict: "{{ vbmc_ports }}"

      - name: Validate that all VMs are powered on
        fail:
            msg: "Node is not powered on! (ipmitool stdout: '{{ item.stdout }}')"
        when: "item.stdout != 'Chassis Power is on'"
        with_items: "{{ ipmitool_results.results }}"
