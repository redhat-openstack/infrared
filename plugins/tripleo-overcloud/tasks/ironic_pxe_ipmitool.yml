---
- name: Install required packages (ironic's 'pxe_ipmitool' driver)
  hosts: hypervisor
  gather_facts: True
  any_errors_fatal: True
  tags: pre
  vars:
      pxe_ipmitool_req_packs:
          - python-setuptools
          - python-virtualbmc
          - ipmitool
  tasks:
      - name: Install packages required for 'pxe_ipmitool' ironic's driver on RedHat based distros
        package:
            name: "{{ item }}"
            state: latest
            disable_gpg_check: yes
        with_items: "{{ pxe_ipmitool_req_packs }}"
        when: ansible_os_family == "RedHat"

      - name: Install packages required for 'pxe_ipmitool' ironic's driver on Non-RedHat based distros
        package:
            name: "{{ item }}"
            state: latest
        with_items: "{{ pxe_ipmitool_req_packs }}"
        when: ansible_os_family != "RedHat"

      - name: Remove existing Virtual BMCs
        # grab only lines with port number (more than 2 digits)
        shell: |
            for node in `vbmc list | awk '/[0-9]{2}/ {print $2}'`
            do
                vbmc stop ${node}
                vbmc delete ${node}
            done

- name: Configure vbmc (ironic's 'pxe_ipmitool' driver)
  hosts: hypervisor
  vars:
      vbmc_start_port: 6230
      undercloud_node: "{{ groups.undercloud | first }}"
  gather_facts: False
  any_errors_fatal: True
  tags: pre
  tasks:
      - name: Define vbmc_port for each VM
        set_fact:
            vbmc_ports: "{{ vbmc_ports|default({})|combine({ item.1: vbmc_start_port + item.0 }) }}"
        with_indexed_items: "{{ groups.get('overcloud_nodes', []) }}"

      - name: allow access to port vbmc ports from undercloud
        become: True
        iptables:
            action: insert
            comment: "Infrared: vbmc ports"
            table: filter
            chain: INPUT
            jump: ACCEPT
            protocol: "{{ item.2 }}"
            source: "{{ hostvars[undercloud_node].ansible_default_ipv4.address }}"
            destination_port: "{{ item.1 }}"
        with_nested:
            - "{{ vbmc_ports.items() }}"
            # That's a nested list:
            -
                - udp
                - tcp

      - name: Add nodes to vbmc
        command: "vbmc add {{ item.key }} --port {{ item.value }} --username {{ install.vbmc.username }} --password {{ install.vbmc.password }} --address ::ffff:{{ ansible_management.ipv4.address }}"
        with_dict: "{{ vbmc_ports }}"

      - name: Start nodes using vbmc
        command: "vbmc start {{ item.key }}"
        with_dict: "{{ vbmc_ports }}"

      - name: Setting nodes power status using ipmitool
        command: "ipmitool -I lanplus -U {{ install.vbmc.username }} -P {{ install.vbmc.password }} -H {{ ansible_management.ipv4.address }} -p {{ item.value }} chassis power on"
        with_dict: "{{ vbmc_ports }}"

      - name: Get vbmc VMs power status using ipmitool
        command: "ipmitool -I lanplus -U {{ install.vbmc.username }} -P {{ install.vbmc.password }} -H {{ ansible_management.ipv4.address }} -p {{ item.value }} power status"
        register: ipmitool_results
        with_dict: "{{ vbmc_ports }}"

      - name: Validate that all VMs are powered on
        fail:
            msg: "Node is not powered on! (ipmitool stdout: '{{ item.stdout }}')"
        when: "item.stdout != 'Chassis Power is on'"
        with_items: "{{ ipmitool_results.results }}"
