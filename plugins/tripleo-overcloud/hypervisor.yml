- name: Gather facts for Hypervisor
  hosts: hypervisor
  gather_facts: yes
  any_errors_fatal: true

- name: Generate the instackenv.json
  hosts: undercloud
  gather_facts: no
  any_errors_fatal: true
  vars_files:
      - vars/instackenv/profiles.yml
  vars:
      hypervisor_group: "{{ groups.get('hypervisor', ['hypervisor']) }}"
  tasks:
      - name: Retrieve public key from private key to localhost
        command: "ssh-keygen -y -f ~/.ssh/id_rsa"
        register: uc_pubkey_result

      - name: insert the public key to the known hosts in hypervisor
        authorized_key:
            user: "{{ hostvars[item].ansible_user|default(hostvars[item].ansible_ssh_user) }}"
            key: "{{ uc_pubkey_result.stdout }}"
        delegate_to: "{{ item }}"
        with_items: "{{ hypervisor_group }}"

      - name: insert the public key to the known hosts in hypervisor for stack user
        authorized_key:
            user: stack
            key: "{{ uc_pubkey_result.stdout }}"
        delegate_to: "{{ item }}"
        with_items: "{{ hypervisor_group }}"
        when: install.version|default(undercloud_version) | openstack_release < 11

      - name: Read baremetal nodes got from user input on hybrid deployment
        block:
          - name: Set hybrid var
            include_vars:
                file: "{{ install.hybrid }}"
                name: bm_nodes

          - name: get nodes name
            set_fact:
                node_name: "{{ item.name }}"
            with_items: "{{ bm_nodes.nodes }}"
            register: nodes

          - name: set list of bm nodes
            set_fact:
                bm_nodes_names: "{{ nodes.results | map(attribute='ansible_facts.node_name') | list }}"
        when: install.hybrid is defined

      - name: set bm_nodes to empty when not hybrid
        set_fact:
            bm_nodes_names: ""
        when: install.hybrid is not defined

      - name: Get overcloud nodes
        set_fact:
          oc_nodes: "{{ groups.get('overcloud_nodes', []) }}"

      - name: Get ironic in the overcloud nodes
        set_fact:
          oc_ironic: "{{ groups.get('ironic', []) }}"

      - include_role:
            name: vbmc
        vars:
            vbmc_nodes: "{{ oc_nodes + oc_ironic | difference(bm_nodes_names) }}"
        when:
            - install.version|default(undercloud_version) | openstack_release >= 11 or install.vbmc.force
            - vbmc_nodes

      - name: grab undercloud private key
        command: "cat ~/.ssh/id_rsa"
        register: uc_pkey_result

      - name: discover provsion network name
        include_tasks: tasks/discover_provision_net.yml
        vars:
            uc_provision_net: "ctlplane"
        when: provison_virsh_network_name is not defined

      - fail:
            msg: "The provision network cannot be discovered. Please rerun infrared command with -e provison_virsh_network_name=<net_name>"
        when: provison_virsh_network_name is not defined

      - name: set vms hosts
        set_fact:
            vms_hypervisor: "{{ vms_hypervisor|default({})|combine({item[0]: item[1]}) }}"
        when: "(hostvars[item[0]].ansible_ssh_common_args is defined) and (hostvars[item[1]].ansible_host in hostvars[item[0]].ansible_ssh_common_args)"
        with_nested:
            - "{{ oc_nodes + oc_ironic | difference(bm_nodes_names) }}"
            - "{{ hypervisor_group }}"

      - name: get information about vm's from hypervisor
        vars:
            vm_nodes: "{{ oc_nodes | difference(bm_nodes_names) }}"
            vm_network: "{{ provison_virsh_network_name }}"
        delegate_to: "{{ vms_hypervisor[item] }}"
        shell: &get_vm_info |
            NODE_XML=`virsh dumpxml {{ item }}`
            disks_list=$(virsh domblklist {{ item }}  | \
                awk '{ if(NR>2 && $0 !~ /^ *$/) { d = d "," "\"" $1 "\"" } } END { print "[" gensub("^,","",1,d) "]" }')
            echo "{
                'name': '{{ item }}',
                'arch': '`echo "$NODE_XML" | xmllint --xpath "string(/domain/os/type/@arch)" -`',
                'memory_kibs': '`echo "$NODE_XML" | xmllint --xpath "string(/domain/currentMemory)" -`',
                'mac': '`for network_name in {{ vm_network }}; do echo "$NODE_XML" | xmllint --xpath "string(/domain/devices/interface[contains(source/@*, '$network_name')]/mac/@address)" -; done|grep -v ^$`',
                'cpu': '`echo "$NODE_XML" | xmllint --xpath "string(/domain/vcpu)" -`',
                'disk_bytes': '`virsh domblkinfo {{ item }} vda | grep -e Capacity | cut -d\: -f2 | xargs`',
                'disks': '${disks_list}',
            }"
        with_items: "{{ vm_nodes|sort }}"
        register: nodes_info
        tags:
            - skip_ansible_lint

      - name: prepare instackenv.json file
        vars:
            instack_input: "{{ (install.instackenv|default({})).file|default('') }}"
            instack_output: "~/instackenv.json"
            # json file shouldn't hold newlines
            undercloud_private_key: "{{ uc_pkey_result.stdout_lines | join('\\n') }}"
        template:
            src: templates/instackenv.json.j2
            dest: "{{ instack_output }}"
        when: not instack_input or install.hybrid|default('')

      - name: get information about oc_ironic vm's from hypervisor
        vars:
            vm_nodes: "{{ oc_ironic | difference(bm_nodes_names) }}"
            vm_network: "{{ oc_ironic_network_name | default(provison_virsh_network_name) }}"
        delegate_to: "{{ vms_hypervisor[item] }}"
        shell: *get_vm_info
        with_items: "{{ vm_nodes|sort }}"
        register: nodes_info
        tags:
            - skip_ansible_lint

      - name: prepare overcloud_ironic_nodes.yaml file
        vars:
            oc_ironic_nodes_input: "{{ (install.instackenv|default({})).file|default('') }}"
            oc_ironic_nodes_output: "~/overcloud_ironic_nodes.yaml"
            # json file shouldn't hold newlines
            undercloud_private_key: "{{ uc_pkey_result.stdout_lines | join('\\n') }}"
        template:
            src: templates/overcloud_ironic_nodes.yaml.j2
            dest: "{{ oc_ironic_nodes_output }}"
        when: not oc_ironic_nodes_input or install.hybrid|default('')

      # Using delegete here because of
      # https://github.com/ansible/ansible/issues/16972
      # This issue causes an exception when that playbook is included with the false condition
      - name: power off overcloud nodes
        vars:
            vm_nodes: "{{ oc_nodes + oc_ironic | difference(bm_nodes_names) }}"
        virt:
            name: "{{ item }}"
            state: destroyed
        delegate_to: "{{ vms_hypervisor[item] }}"
        with_items: "{{ vm_nodes }}"
