- name: Configure and Install Undercloud Repositories
  any_errors_fatal: true
  hosts: undercloud
  gather_facts: yes
  become: yes
  vars:
      custom_repos: "{{ install.repos|default({}) }}"
      custom_script_url: "{{ install.get('custom', {}).get('sources', {}).get('script', {}).get('url', {})|default('') }}"
      custom_script_args: "{{ install.get('custom', {}).get('sources', {}).get('script', {}).get('args', {})|default('') }}"
      skip_release: "{{ custom_script_url != '' or install.get('repos', {}).get('skip', {}).release|default('') }}"
      rhos_release_rpm: "https://url.corp.redhat.com/rhos-release-latest-rpm"
      undercloud_extra_repos: []
  tags: install
  tasks:
      - debug:
              msg: "{{ custom_script_url }}"
      - debug:
              msg: "{{ skip_release }}"
      # FIXME(yfried): figure why this is required in gate only
      - name: gather undercloud facts since sometimes they are missing
        setup:

      - name: load rdo overrides
        include_vars: "{{ install.rdo.override }}"
        when: install.get('rdo', {}).get('override', False)

      - name: check for subscription
        command: subscription-manager identity
        failed_when: false
        register: cdn_status
        changed_when: false
        when: not install.cdn|default(False)

      - include_role:
            name: cdn_registery
        vars:
            cdn_args_file: "{{ install.cdn|default('') }}"
            install_version: "{{ install.version }}"
        when:
            - "install.cdn|default(False) or cdn_status.rc == 0"
            - "install.version|openstack_distribution == 'OSP'"

      - include_role:
            name: rhos-release
        vars:
            release: "{{ install.version }}"
            rr_buildmods: "{{ install.buildmods }}"
            build: "{{ install.build | default(omit) }}"
            director_build: "{{ install.get('director', {}).build|default(omit) }}"
            mirror: "{{ install.mirror | default(omit) }}"
            rr_distro_version: "{{ install.osrelease|default(omit) }}"
            enable_testing_repos: "{{ install.get('enable', {}).get('testing', {}).repos|default(omit) }}"
            without_ceph: "{{ not install.get('ceph', {}).repos|default(omit) }}"
            skip_remove_repo: "{{ install.get('skip', {}).get('remove', {}).repo|default(omit) }}"
        when:
            - "install.version|openstack_distribution == 'OSP'"
            - not install.cdn|default(False)
            - cdn_status.rc != 0
            - not skip_release
        tags: rhos-release

      - include_role:
            name: from-script
        vars:
            script_url: "{{ custom_script_url }}"
            script_args: "{{ custom_script_args }}"
            release: "{{ install.version }}"
            mirror: "{{ install.mirror | default(omit) }}"
            context: "undercloud"
        when:
            - custom_script_url != ""
        tags: rhos-release

      - include_role:
            name: rdo-release
        vars:
            release: "{{ install.version }}"
            rr_buildmods: "{{ install.buildmods }}"
            build: "{{ install.build | default(omit) }}"
            mirror: "{{ install.mirror | default(omit) }}"
        when:
            - install.version|openstack_distribution == 'RDO'
            - not skip_release
        tags: rhos-release

      - include_role:
            name: from-source
        vars:
            release: "{{ install.version }}"
            rr_buildmods: "{{ install.buildmods }}"
            build: "{{ install.build | default(omit) }}"
            mirror: "{{ install.mirror | default(omit) }}"
            build_components: "{{ install.from.source }}"
        when:
            - install.get('from', {}).source is defined
            - not skip_release
        tags: git-release

      - name: load custom repos configuration file
        include_vars: "{{ custom_repos.config|default('') }}"
        when: "custom_repos.config|default('')"

      - name: Creating extra repositories
        yum_repository:
            name: "{{ item.name }}"
            state: "{{ item.state | default(omit) }}"
            file: "{{ item.file| default(omit) }}"
            description: "{{ item.description | default(omit) }}"
            baseurl: "{{ item.baseurl | default(omit) }}"
            mirrorlist: "{{ item.mirrorlist | default(omit) }}"
            enabled: "{{ item.enabled | default(omit) }}"
            gpgcheck: "{{ item.gpgcheck | default(omit) }}"
            includepkgs: "{{ item.includepkgs | default(omit) }}"
        register: custom_repos_files
        with_items: "{{ extra_repos|default({}) }}"
        when: "extra_repos|default({})"

      - set_fact:
          undercloud_extra_repos: "{{ undercloud_extra_repos }} + ['{{ item['diff']['after_header'] | basename }}']"
        with_items: "{{ custom_repos_files['results'] }}"
        when:
          - custom_repos_files is defined
          - install['upload']['extra']['repos']

      - name: Add extra repositories
        become: yes
        shell: |
          yum-config-manager --add-repo {{ item }}
        with_items: "{{ custom_repos.urls|default([]) }}"

      - name: Enable extra repo for vbmc dependencies (RHEL9)
        become: yes
        shell: |
            set -ex
            dnf config-manager --save --setopt rhosp-rhel-{{ version_escaped }}-beta-crb.includepkgs=libvirt-devel
            dnf config-manager --set-enabled rhosp-rhel-{{ version_escaped }}-beta-crb
        vars:
            version_escaped: "{{ ansible_distribution_version | replace('.', '\\.') }}"
        when:
            - ansible_distribution == 'RedHat'
            - ansible_distribution_major_version | int >= 9
            - "install.version|openstack_distribution == 'OSP'"
            - not install.cdn|default(False)
            - cdn_status.rc != 0
            - not skip_release
        tags: rhos-release

      - name: Disable gpgcheck for custom repos
        become: yes
        shell: |
          sed -i /gpgcheck/d /etc/yum.repos.d/{{ item | urlsplit('netloc') }}*
          sed -i -e '$agpgcheck=0' /etc/yum.repos.d/{{ item | urlsplit('netloc') }}*
        when: (item|splitext)[-1] != ".repo"
        with_items: "{{ custom_repos.urls|default([]) }}"

      - name: Setup and start dstat
        import_role:
          name: dstat
        vars:
          dstat_output_dir: '/var/log/extra'
        tags: dstat

      - name: install packages on Undercloud
        package:
          name: "{{ _package_list }}"
          state: present
          disable_gpg_check: yes
        vars:
          _package_list: >-
            {%- set package_list = [] %}
            {%- if install.version | openstack_release == 7 %}
            {%-   set _ = package_list.append('python-rdomanager-oscplugin') %}
            {%- elif install.version|openstack_release < 15 %}
            {%-   set _ = package_list.append('python-tripleoclient') %}
            {%- else %}
            {%-   set _ = package_list.append('python3-tripleoclient') %}
            {%- endif %}
            {%- if install.packages is defined %}
            {%-   set _ = package_list.extend(install.packages.split() | reject('equalto', '')) %}
            {%- endif %}
            {%- if ansible_distribution in ['CentOS', 'RedHat'] and ansible_distribution_major_version | int < 8 %}
            {%-   set _ = package_list.append('deltarpm') %}
            {%- endif %}
            {{- package_list }}

      - name: Update system packages
        package:
            state: latest
            name: "*"
        register: update

      - name: Set FIPS mode on the undercloud
        command: fips-mode-setup --enable
        register: fips_mode_status
        when: install.fips.mode

      # We check with systemctl if system has finished booting up
      # but on RHEL7 we don't have --wait option so we check only
      # for the state. We accept running or degraded as some
      # services seem to flap after bootup but work fine.
      - name: Reboot the undercloud
        become: true
        reboot:
          reboot_timeout: "{{ install.reboot.timeout }}"
          test_command: >-
              systemctl is-system-running | grep -e running -e degraded
        when: update is changed
