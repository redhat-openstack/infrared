- name: Backup the Undercloud image
  hosts: hypervisor
  gather_facts: yes
  any_errors_fatal: true
  vars:
      undercloud: "{{ hostvars[(groups.undercloud|first)].inventory_hostname }}"
      undercloud_image_file: "{{ install.quickstart.filename.rstrip('.qcow2') }}.qcow2"
  tasks:
      - name: install package with virt-sparsify
        package:
            name: libguestfs-tools-c
            state: present

      - name: shutdown the undercloud VM
        virt:
            name: "{{ undercloud }}"
            state: destroyed

      - name: copy and shrink undercloud image
        command: "virt-sparsify --compress /var/lib/libvirt/images/{{ undercloud }}-disk1.qcow2 {{ undercloud_image_file }}"

      - name: add destination server to copy the undercloud image to
        add_host:
            name: "{{ install.dest.address }}"
            groups: user_group
            ansible_ssh_host: "{{ install.dest.address }}"
            ansible_ssh_user: "{{ install.dest.user }}"
            ansible_ssh_private_key_file: "{{ install.dest.key | default(omit) }}"
            ansible_ssh_pass: "{{ install.dest.pass | default(omit) }}"
        when: install.dest|default({})

      - name: print out the public key
        command: "ssh-keygen -y -f ~/.ssh/id_rsa"
        register: pubkey
        when:
            - install.dest|default({})

      - name: add key to remote
        authorized_key:
            user: "{{ install.dest.user }}"
            key: "{{ pubkey.stdout }}"
        delegate_to: "{{ install.dest.address }}"

      - name: copy the image to temporary server
        command: scp {{ undercloud_image_file }} {{ install.dest.user }}@{{ install.dest.address }}:/{{install.dest.path}}
        when: install.dest|default({})

      - name: remove key from remote
        authorized_key:
            user: "{{ install.dest.user }}"
            key: "{{ pubkey.stdout }}"
            state: absent
        delegate_to: "{{ install.dest.address }}"

      - name: copy our auth key to the hypervisor
        copy:
            src: "{{ ansible_ssh_private_key_file | expanduser | realpath }}"
            dest: "~/backup_server_auth_key"
            mode: "0400"

      - name: Power on the undercloud VM
        virt:
            name: "{{ undercloud }}"
            state: running
# TODO(yfried): accept a destination to push image to, and cleanup. Use ansible modules instead
# of hard-coded scp
