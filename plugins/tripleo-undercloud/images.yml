- name: Get the undercloud version
  import_playbook: version.yml

- name: Define undercloud_hardened_uefi
  hosts: undercloud
  gather_facts: no
  any_errors_fatal: true
  tasks:
      - name: Set overcloud_image_name if specified by user
        set_fact:
          overcloud_image_name: "{{ install.overcloud.image.name }}"
        when: install.overcloud.image.name is defined

      - name: Set overcloud_image_name OSP<=16
        set_fact:
          overcloud_image_name: "full"
        when: >
          install.download.ppc64le.images|default('false') or
          (install.version|default(undercloud_version) | openstack_release <= 16 and overcloud_image_name is not defined)

      - name: Set overcloud_image_name OSP>=17
        set_fact:
          overcloud_image_name: "hardened-uefi-full"
          overcloud_image_rpm_name: "rhosp-director-images-uefi-x86_64"
        when:
          - install.version|default(undercloud_version) | openstack_release >= 17
          - overcloud_image_name is not defined
          - not install.fips.mode

      - name: Set FIPS overcloud_image_name OSP>=17
        set_fact:
          overcloud_image_name: "hardened-uefi-full-fips"
          overcloud_image_rpm_name: "rhosp-director-images-uefi-fips-x86_64"
        when:
          - install.version|default(undercloud_version) | openstack_release >= 17
          - overcloud_image_name is not defined
          - install.fips.mode

      - name: Set overcloud_image_extension
        set_fact:
          overcloud_image_extension: "tar"

      - name: Set overcloud_image_extension when images-task is import
        set_fact:
          overcloud_image_extension: "qcow2"
        when:
          - overcloud_image_name == "hardened-uefi-full"
          - install.images.task == "import"

- name: Preparing the images
  hosts: undercloud
  gather_facts: yes
  any_errors_fatal: true
  tags: images
  vars:
      images_source: "{{ install.images.url|default('') }}"
      images_dest: "{{ ansible_user_dir }}/base_image.qcow2"
      tar_files:
          7:
              - "discovery-ramdisk.tar"
              - "deploy-ramdisk-ironic.tar"
              - "overcloud-{{overcloud_image_name}}.{{overcloud_image_extension}}"
          8:
              - "ironic-python-agent.tar"
              - "overcloud-{{overcloud_image_name}}.{{overcloud_image_extension}}"
          fips:
              - "ironic-python-agent-fips.tar"
              - "overcloud-hardened-uefi-full-fips.tar"
          ppc64le:
              - "ironic-python-agent-latest-{{ undercloud_version }}-x86_64.tar"
              - "overcloud-full-latest-{{ undercloud_version }}-x86_64.tar"
              - "overcloud-full-latest-{{ undercloud_version }}-ppc64le.tar"
              - "ironic-python-agent-latest-{{ undercloud_version }}-ppc64le.tar"
          s390x:
              - "ironic-python-agent-latest-{{ undercloud_version }}-x86_64.tar"
              - "overcloud-full-latest-{{ undercloud_version }}-x86_64.tar"
              - "overcloud-full-latest-{{ undercloud_version }}-s390x.tar"
              - "ironic-python-agent-latest-{{ undercloud_version }}-s390x.tar"
          minimal:
              - "overcloud-minimal-latest-{{ undercloud_version }}.tar"
          # Any higher version defaults to 8
      tar_images: "{{ install.images.files | default(install.download.ppc64le.images | ternary(tar_files.ppc64le, tar_files[undercloud_version|openstack_release])) | default(tar_files[8]) }}"
      multiarch_images: "{{ install.download.ppc64le.images == true | ternary(true, false) }}"
      fips_images: "{{ install.fips.mode == true | ternary(true, false) }}"
      fips_tar_images: "{{ tar_files.fips }}"
      minimal_images:  "{{ install.download.minimal.images == true | ternary(true, false) }}"
      minimal_tar_images: "{{ tar_files.minimal }}"
      tmp_oc_repos_dir: /tmp/oc_repos/yum.repos.d
      overcloud_image_file: "overcloud-{{overcloud_image_name}}.qcow2"
      amphora_image_file: "/usr/share/openstack-octavia-amphora-images/octavia-amphora.qcow2"
      amphora_image_rpm: octavia-amphora-image
      rhos_release_rpm: "https://url.corp.redhat.com/latest-rhos-release-rpm"
      multirhel_tar_images: "overcloud-full-multirhel-latest.tar"
      multirhel_images_dir: "{{ ansible_user_dir }}/images/multirhel"
      multirhel_dnf_repos_dir: "{{ ansible_user_dir }}/multirhel_dnf_repos"
  pre_tasks:
      - setup:
        tags:
          - never
          - multirhel_images
      - block:
          - name: check for subscription
            command: subscription-manager identity
            become: yes
            failed_when: false
            register: cdn_status
            changed_when: false

          - name: check if rhos-release is available
            uri:
                url: "{{ rhos_release_rpm }}"
                validate_certs: false
            ignore_errors: yes
            register: internal_repos

          - fail:
                msg: overcloud image customization currently not supported outside Red Hat internal network or when using CDN
            when:
                - internal_repos is failed or cdn_status.rc == 0
        when: install.images.packages|default('') or install.images['update'] or install.images.remove|default('')

      - name: tmp repos.d for overcloud
        file:
          name: "{{ tmp_oc_repos_dir }}"
          state: directory
  roles:
        # modify images - update to core build and install packages
      - name: prepare repos for the images
        role: rhos-release
        release: "{{ install.version|default(undercloud_version) }}"
        rr_buildmods: "{{ install.buildmods }}"
        build: "{{ install.build | default(omit) }}"
        director_build: "{{ install.get('director', {}).build|default(omit) }}"
        mirror: "{{ install.mirror | default(omit) }}"
        rr_target_directory: "{{ tmp_oc_repos_dir }}"
        rr_discover_build: yes
        rr_distro_version: "{{ install.osrelease|default(omit) }}"
        enable_testing_repos: "{{ install.get('enable', {}).get('testing', {}).repos|default(omit) }}"
        without_ceph: "{{ not install.get('ceph', {}).repos|default(omit) }}"
        rr_extra_ceph_version: "{{ install.ceph.extra.version | default(omit) }}"
        when:
            - install.images.packages|default('') or install.images['update'] or install.images.remove|default('')
            - install.version|default(undercloud_version)|openstack_distribution == 'OSP'
            - not install.registry.skip.puddle
        tags: rhos-release

      - name: prepare RDO repos for the images
        role: rdo-release
        release: "{{ install.version|default(undercloud_version) }}"
        rr_buildmods: "{{ install.buildmods }}"
        build: "{{ install.build | default(omit) }}"
        mirror: "{{ install.mirror | default(omit) }}"
        rr_target_directory: "{{ tmp_oc_repos_dir }}"
        when:
            - install.images.packages|default('') or install.images['update'] or install.images.remove|default('')
            - undercloud_version|default(undercloud_version)|openstack_distribution == 'RDO'
            - not install.registry.skip.puddle
        tags: rhos-release

  tasks:
      - name: prepare undercloud repos for image update
        shell: |
          cp -a /etc/yum.repos.d/* {{ tmp_oc_repos_dir }}
        when:
            - install.registry.skip.puddle

      - name: Downloading extra YUM/DNF repositories
        get_url:
            url: "{{ item }}"
            dest: "{{ tmp_oc_repos_dir }}"
        with_items: "{{ install.get('repos', {}).urls|default([]) }}"
        when: (item|splitext)[-1] == ".repo"
        register: extra_repos_get_url
        until: extra_repos_get_url is not failed or extra_repos_get_url.status_code | quote not in retry_http_codes
        retries: 2
        delay: 10
        tags: extra-repos

      - name: Copy previously enabled custom repos
        become: yes
        shell: |
          cp /etc/yum.repos.d/{{ item | urlsplit('netloc') }}* {{ tmp_oc_repos_dir }}
        register: extra_repos_get_url
        when: (item|splitext)[-1] != ".repo"
        with_items: "{{ install.get('repos', {}).urls|default([]) }}"

      - include_tasks: "tasks/images/{{ install.images.task }}.yml"
        tags: multirhel_images

      - name: modify images - update to core build and install packages
        include_tasks: tasks/images/repos.yml
        # update is a func name (dict.update) so it must be used as str explicitly
        when: install.images.packages|default('') or install.images['update'] or install.images.remove|default('')

      # Trigger only when update kernel flag is specified and new packages installed inside overcloud image
      - name: update default overcloud kernel from modified overcloud image
        include_tasks: tasks/images/update-kernel.yml
        when:
          - install['overcloud']['update']['kernel']
          - install.images.packages

      - name: create fips image symlink for image uploading
        file:
          src: ~{{ install.user.name }}/ironic-python-agent-fips.initramfs
          dest: ~{{ install.user.name }}/ironic-python-agent.initramfs
          state: link
        when: fips_images

      - name: create fips kernel symlink for image uploading
        file:
          src: ~{{ install.user.name }}/ironic-python-agent-fips.kernel
          dest: ~{{ install.user.name }}/ironic-python-agent.kernel
          state: link
        when: fips_images

      - name: create fips kernel symlink for image uploading
        file:
          src: ~{{ install.user.name }}/overcloud-hardened-uefi-full-fips.qcow2
          dest: ~{{ install.user.name }}/overcloud-hardened-uefi-full.qcow2
          state: link
        when: fips_images

       #Need to fix  BZ1462703 to apply --os-cloud
      - name: upload the overcloud images to glance
        shell: |
            set -exuo pipefail
            source ~/stackrc
            openstack overcloud image upload --update-existing {% if overcloud_image_name == "hardened-uefi-full" or overcloud_image_name == "hardened-uefi-full-fips" or multirhel_enabled %}--whole-disk{% endif %}
        tags: skip_ansible_lint
        when:
          - not multiarch_images

      - name: Upload ppc64le images to glance
        shell: |
            set -exuo pipefail
            source ~/stackrc
            openstack overcloud image upload --image-path ~{{ install.user.name }}/images/ppc64le --architecture ppc64le --whole-disk --http-boot /var/lib/ironic/tftpboot/ppc64le
        when: multiarch_images

      - name: Upload x86_64 images to glance
        shell: |
            set -exuo pipefail
            source ~/stackrc
            openstack overcloud image upload --image-path ~{{ install.user.name }}/images/x86_64 {% if overcloud_image_name == "hardened-uefi-full" %}--whole-disk{% endif %} --http-boot /var/lib/ironic/tftpboot/
        when: multiarch_images

      - name: Upload minimal images to glance
        shell: |
            set -exuo pipefail
            source ~/stackrc
            openstack overcloud image upload --image-path ~{{ install.user.name }}/images/ --os-image-name overcloud-minimal.qcow2 --image-type os
        when: minimal_images

      - name: Upload computerhel8/multirhel images
        shell: |
            set -exuo pipefail
            source ~/stackrc
            openstack overcloud image upload --update-existing --image-path {{ multirhel_images_dir }} --os-image-name overcloud-rhel8.qcow2
        when: multirhel_enabled
        tags: multirhel_images

      - name: Upload computerhel8/multirhel images - the legacy way (hardened)
        shell: |
            set -exuo pipefail
            source ~/stackrc
            openstack overcloud image upload --update-existing --image-path {{ multirhel_images_dir }} --os-image-name overcloud-rhel8.qcow2 --whole-disk
        when: multirhel_enabled_legacy
        tags: multirhel_images

      - name: check for existing nodes ( OS <= 10 )
        shell: |
            set -exuo pipefail
            source ~/stackrc
            ironic node-list 2>/dev/null | wc -l
        tags:
            - skip_ansible_lint
        register: oc_nodes_prev
        when:
            - undercloud_version|openstack_release <= 10

      - name: check for existing nodes ( OS >= 11 )
        shell: |
            source ~/stackrc
            openstack baremetal node list -c UUID -f json
        tags:
            - skip_ansible_lint
        register: oc_nodes
        when:
            - undercloud_version|openstack_release >= 11

      - name: configure nodes to use updated kernel and ramdisk ( OS <= 10 )
        shell: |
            source ~/stackrc
            openstack baremetal configure boot
        tags:
            - skip_ansible_lint
        when:
            - undercloud_version|openstack_release <= 10
            - oc_nodes_prev.stdout|int > 4

      # https://access.redhat.com/documentation/en-us/red_hat_openstack_platform/11/html/upgrading_red_hat_openstack_platform/chap-director-minor-update#sect-Updating_Overcloud_and_Introspection_Images
      - name: configure nodes to use updated kernel and ramdisk ( OS >= 11 )
        shell: |
            source ~/stackrc
            openstack overcloud node configure {{ ' '.join(oc_nodes.stdout|from_json|map(attribute='UUID')) }}
        tags:
            - skip_ansible_lint
        when:
            - undercloud_version|openstack_release >= 11
            - oc_nodes.stdout|from_json

      - name: remove downloaded images
        file:
            path: "/home/{{ install.user.name }}/{{ item[1] }}"
            state: absent
        with_subelements:
          - "{{ (image_files|default({})).get('results',{}) }}"
          - "files"
        when: image_files is defined and install.images.cleanup

      - name: remove pre-built images
        file:
            path: "/home/{{ install.user.name }}/{{ item }}"
            state: absent
        with_items:
          - "overcloud-{{ overcloud_image_name }}.qcow2"
        when: >
          overcloud_image_name == "hardened-uefi-full" or
          overcloud_image_name == "hardened-uefi-full-fips" or
          install.images.task == "import"

      - name: remove downloaded images directory for multiarch deployments
        file:
            path: "~{{ install.user.name }}/images"
            state: absent
        when: install.images.cleanup and multiarch_images

      - name: remove downloaded images directory for computerhel8/mutlirhel deployments
        file:
            path: "~{{ install.user.name }}/images/multirhel"
            state: absent
        when:
          - install.images.cleanup
          - multirhel_enabled
        tags: multirhel_images
