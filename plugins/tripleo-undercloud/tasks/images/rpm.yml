---
- name: install the RPM with the pre-built overcloud images
  become: yes
  package:
      name: "{{ install.images.url is defined | ternary(install.images.get('url', '').split(','), install.download.ppc64le.images | ternary (['rhosp-director-images-all'],  ['rhosp-director-images'])) }}"
      state: latest
  register: yum_install
  until: "yum_install is not failed or not yum_install.msg | regex_search('Operation too slow')"
  retries: 2
  # on a regular day this package install takes 120-150sec
  # here we want to allow for mirror/proxy cache to have enough time to download it from main download server before we'll retry
  delay: "{{ install.download.ppc64le.images | ternary(300, 150) }}"

- name: install the RPM with the pre-built minimal overcloud images
  become: yes
  package:
      name: "rhosp-director-images-minimal"
      state: latest
  register: yum_install
  until: "yum_install is not failed or not yum_install.msg | regex_search('Operation too slow')"
  retries: 2
  # on a regular day this package install takes 120-150sec
  # here we want to allow for mirror/proxy cache to have enough time to download it from main download server before we'll retry
  delay: "{{ install.download.minimal.images | ternary(300, 150) }}"

- name: Install the RPM with hardened uefi pre-build overcloud images
  become: yes
  package:
      name: "{{ overcloud_image_rpm_name }}"
      state: latest
  register: yum_hardened_install
  until: "yum_hardened_install is not failed or not yum_hardened_install.msg | regex_search('Operation too slow')"
  retries: 2
  # on a regular day this package install takes 120-150sec
  # here we want to allow for mirror/proxy cache to have enough time to download it from main download server before we'll retry
  delay: 100
  when: >
    overcloud_image_name == "hardened-uefi-full" or
    overcloud_image_name == "hardened-uefi-full-fips" or
    multirhel_enabled

- name: "(multirhel) Ensure {{ multirhel_images_dir }} exists and it's empty"
  file:
    path: "{{ multirhel_images_dir }}"
    state: "{{ item }}"
  with_items:
    - absent
    - directory
  when:
    - multirhel_enabled or multirhel_enabled_legacy

- name: Handle the multi-rhel images (>=RHOS-17.1-RHEL-8-20230525.n.1)
  block:
    - name: install the RPM with the pre-built multirhel overcloud images
      become: yes
      package:
          name: "rhosp-director-images-multirhel-x86_64"
          state: latest
      register: yum_install
      until: "yum_install is not failed or not yum_install.msg | regex_search('Operation too slow')"
      retries: 2
      delay: 100

    - name: untar the images - multirhel deployment
      unarchive:
          src: "/usr/share/rhosp-director-images/{{ item }}"
          dest: "{{ multirhel_images_dir }}"
          copy: no
          owner: "{{ install.user.name }}"
          group: "{{ install.user.name }}"
          list_files: yes
      register: image_files
      with_items: "{{ multirhel_tar_images }}"

  when: multirhel_enabled

- name: Handle the multi-rhel images the legacy way (PRE RHOS-17.1-RHEL-8-20230525.n.1)
  become_user: "{{ install.user.name }}"
  become: yes
  tags: multirhel_images
  block:
    - name: extract the URL of current RHEL9 COMPOSE
      shell: dnf download --url --disablerepo=* --enablerepo rhelosp-17.1 rhosp-director-images | grep http | awk -F '/' '{print $1"/"$2"/"$3"/"$4"/"$5"/"$6"/"$7"/"$8}'
      register: osp17_1rhel9_compose_url

    - name: get RHEL8 COMPOSE ID
      uri:
        url: "{{ osp17_1rhel9_compose_url.stdout + '/RHEL8_COMPOSE_ID' }}"
        return_content: yes
      register: osp17_1rhel8_compose_id

    - name: "ensure {{ multirhel_dnf_repos_dir }} directory exists and it's empty"
      become: true # rhos-release role acts as root, this dir has to be there available for it
      file:
        path: "{{ multirhel_dnf_repos_dir }}"
        state: "{{ item }}"
      with_items:
        - absent
        - directory

    - name: add RHEL8 dnf repos based on RHEL8 COMPOSE ID
      include_role:
        name: rhos-release
      vars:
        release: "{{ install.version|default(undercloud_version) }}"
        rr_distro_version: "8.4"
        rr_buildmods: "{{ install.buildmods }}"
        build: "{{ osp17_1rhel8_compose_id.content }}"
        director_build: "{{ install.get('director', {}).build|default(omit) }}"
        mirror: "{{ install.mirror | default(omit) }}"
        rr_target_directory: "{{ multirhel_dnf_repos_dir }}"

    - name: discover available 17.1 RHEL8 rhosp-director-images
      shell: dnf download --setopt=reposdir={{ multirhel_dnf_repos_dir }} --url rhosp-director-images* | grep rhosp-director-images-uefi-x86_64

    - name: "(multirhel) set fact to user-defined rhosp-director-images.* RPM URLs"
      set_fact:
          multirhel_overcloud_images: "{{ multirhel_overcloud_image_url.split(',') | join(' ') }}"
      when: multirhel_overcloud_image_url != ''

    - when: multirhel_overcloud_image_url == ''
      block:
        - name: "(multirhel) Discover available rhosp-director-images packages based on the above DNF repo"
          shell: dnf download --setopt=reposdir={{ multirhel_dnf_repos_dir }} --url rhosp-director-images* | grep rhosp-director-images-uefi-x86_64
          register: discover_available_rhosp_director_images

        - name: "(multirhel) set fact to automatically discovered rhosp-director-images.* RPM URLs"
          set_fact:
              multirhel_overcloud_images: "{{ discover_available_rhosp_director_images.stdout_lines | join(' ') }}"

    - name: "(multirhel) Download OSP17.1 RHEL-8 rhosp-director-images"
      shell: |
        cd {{ multirhel_images_dir }}
        for url in {{ multirhel_overcloud_images }}; do
          curl -L $url | rpm2cpio | cpio -idmv
        done

    - name: (multirhel) Find .tar files containing osp17.1/rhel8 rhosp-director-images
      find:
        path: "{{ multirhel_images_dir }}"
        patterns: "*"
        recurse: true
      register: overcloud_images_17_1_rhel8_tar_files

    - debug:
        var: overcloud_hardened_uefi_full_17_1_tar_file

    - name: (multirhel) untar the images - computerhel8/multirhel deployment
      unarchive:
          src: "{{ item.path }}"
          dest: "{{ multirhel_images_dir }}"
          copy: no
          owner: "{{ install.user.name }}"
          group: "{{ install.user.name }}"
          list_files: yes
      with_items: "{{ overcloud_images_17_1_rhel8_tar_files.files }}"

  when: multirhel_enabled_legacy

- name: create multiarch image directory structure
  become_user: "{{ install.user.name }}"
  become: yes
  file:
      path: "~/images/"
      state: directory

# create Directory structure for multiarch images
- name: create multiarch image directory structure
  become_user: "{{ install.user.name }}"
  become: yes
  file:
      path: "~/images/{{ item }}"
      state: directory
  with_items:
      - x86_64
      - ppc64le
  when: multiarch_images

#todo(yfried): investigate gtar error "Warning: Cannot stat: No such file or directory")'
- name: untar the images
  become: yes
  unarchive:
      src: "/usr/share/rhosp-director-images/{{ item }}"
      dest: "~{{ install.user.name }}/"
      copy: no
      owner: "{{ install.user.name }}"
      group: "{{ install.user.name }}"
      list_files: yes
  register: image_files
  with_items: "{{ tar_images }}"
  when:
    - not multiarch_images
    - not fips_images

- name: untar the FIPS images
  become: yes
  unarchive:
      src: "/usr/share/rhosp-director-images/{{ item }}"
      dest: "~{{ install.user.name }}/"
      copy: no
      owner: "{{ install.user.name }}"
      group: "{{ install.user.name }}"
      list_files: yes
  register: image_files
  with_items: "{{ fips_tar_images }}"
  when: fips_images

- name: untar the images - Multiarch deployment
  become: yes
  unarchive:
      src: "/usr/share/rhosp-director-images/{{ item }}"
      dest: "~{{ install.user.name }}/images/{{ item | regex_search('(x86_64)|(ppc64le)|(s390x)') }}"
      copy: no
      owner: "{{ install.user.name }}"
      group: "{{ install.user.name }}"
      list_files: yes
  register: image_files
  with_items: "{{ tar_images }}"
  when: multiarch_images

- name: untar the images - minimal deployment
  unarchive:
      src: "/usr/share/rhosp-director-images/{{ item }}"
      dest: "~/images/"
      copy: no
      owner: "{{ install.user.name }}"
      group: "{{ install.user.name }}"
      list_files: yes
  register: image_files
  with_items: "{{ minimal_tar_images }}"
  when: minimal_images

- name: Rename multirhel images for clarity
  become_user: "{{ install.user.name }}"
  become: yes
  tags: multirhel_images
  block:
    - name: "(multirhel) reuse previously downloaded non-RHEL8 ironic-python-agent* files"
      shell: "cp ~{{ install.user.name }}/ironic-python-agent* {{ multirhel_images_dir }}/"

    - find:
        paths: "{{ multirhel_images_dir }}"
        patterns: ".*.qcow2,.*.vmlinuz,.*.initrd"
        use_regex: true
      register: found_files

    - name: Rename these files to the overcloud-rhel8* format used later
      shell: "cp {{ multirhel_images_dir }}/{{ item.0 }} {{ multirhel_images_dir }}/overcloud-rhel8.{{ item.1 }}"
      with_together:
        - "{{ found_files['files'] | map(attribute='path') | map('regex_replace','^.*/(.*)$','\\1') | list }}"
        - "{{ found_files['files'] | map(attribute='path') | map('regex_replace','^.*/.*\\.(.*)$','\\1') | list }}"

  when: multirhel_enabled or multirhel_enabled_legacy

