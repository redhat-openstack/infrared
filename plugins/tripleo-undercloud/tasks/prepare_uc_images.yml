---
- name: set workingr_dir fact
  set_fact:
      working_dir: "/home/{{ install.user.name }}"

- name: Check if we have user input for image preparation
  set_fact:
      container_env:
          container-image-prepare:
              namespace: "{{ install.get('registry', {}).namespace|default('') }}"
              prefix: "{{ install.registry.prefix|default('') }}"
              tag: "{{ install.registry.tag.discover|ternary('AUTODETECT', install.registry.tag ) }}"
  when: install.registry.skip.puddle

- name: Fail non-osp deployment
  fail:
      msg: |
          For non-OSP deployment set --registry-skip-puddle=yes and provide
          '-registy-namespace' '--registry-tag' options.
  when:
      - (install.version|default(undercloud_version)|openstack_distribution) != 'OSP'
      - container_env is not defined

- block:
    - name: containers_images_env facts
      vars:
          cont_img_yml: "{{ (install.version|default(undercloud_version)|openstack_release >= 15) | ternary('container_image_prepare.yaml', 'overcloud_container_image_prepare.yaml') }}"
      set_fact:
          containers_images_env_template_download_basename: "{{ cont_img_yml }}"
          containers_images_env_template_dest_file: "{{ inventory_dir }}/{{ cont_img_yml }}"

    - name: set undercloud_version during installation
      set_fact:
          undercloud_version: "{{ install.version }}"
      when:
          - not install.upgrade|default(false)
          - not install.get('update', {}).undercloud|default(false)

    - name: get puddle url from the repos
      vars:
          upgrade_release: "{{ install.upgrade|default(false)|ternary((undercloud_version|int + 1), undercloud_version) }}"
          install_release: "{{ undercloud_version|default(install.version) }}"
          release: "{{  install.upgrade|default(false)|ternary(upgrade_release,install_release) }}"
          repod_file: "/etc/yum.repos.d/rhos-release-{{ release }}.repo"
      shell: |
          cat {{ repod_file }} | awk -F "=" '/puddle_baseurl/ {print $2}' | head -n1 | grep -Po '(^.*(?=\/compose\/.*\/\$basearch))|(^.*(?=\/.*\/\$basearch))'
      register: containers_puddle_base_url

    - name: get puddle number
      command: "/usr/bin/puddle-version {{ containers_puddle_base_url.stdout }}"
      register: containers_puddle_number

    - name: puddle to be used
      debug:
          msg: "{{ containers_puddle_number.stdout }}"

    - name: Downloading overcloud container images environment file
      vars:
          cont_prep_url_puddle: "{{ containers_puddle_base_url.stdout }}/{{ containers_images_env_template_download_basename }}"
          cont_prep_url: "{{ install.get('container', {}).get('images', {}).get('prepareyaml', cont_prep_url_puddle) }}"
      get_url:
          url: "{{ cont_prep_url }}"
          dest: "{{ containers_images_env_template_dest_file }}"
          force: true
      delegate_to: localhost

    - name: Load variables from container environment file
      include_vars:
          file: "{{ containers_images_env_template_dest_file }}"
          name: container_env

  when: not install.registry.skip.puddle

# This is needed also for rdo deploympent.
- name: generate container images environment file
  shell: |
      set -exo pipefail
      openstack tripleo container image prepare default \
      --output-env-file {{ working_dir }}/containers-prepare-parameter.yaml \
      {% if not install.registry.undercloud.skip %}
      --local-push-destination
      {% endif %}


- block:
    - name: set namespace in containers-prepare-parameter.yaml
      vars:
          registry: "{{ install.registry.mirror|ternary(install.registry.mirror, container_env['container-image-prepare']['namespace'].split('/')[0] )}}"
          namespace: "{{ install.registry.namespace|ternary(install.registry.namespace, container_env['container-image-prepare']['namespace'].split('/')[1] )}}"
      replace:
          path: "{{ working_dir }}/containers-prepare-parameter.yaml"
          regexp: 'registry.access.redhat.com/rhosp.*'
          replace: '{{ registry }}/{{ namespace }}'

    - name: set ceph_namespace in containers-prepare-parameter.yaml
      vars:
          ceph_namespace: "{{ container_env['container-image-prepare']['ceph-namespace'] | default('registry.access.redhat.com/rhceph') }}"
      replace:
          path: "{{ working_dir }}/containers-prepare-parameter.yaml"
          regexp: 'registry.access.redhat.com/rhceph'
          replace: '{{ ceph_namespace }}'

    - name: set ceph_image in containers-prepare-parameter.yaml
      vars:
          ceph_image: "{{ container_env['container-image-prepare']['ceph-image'] | default('rhceph-3-rhel7') }}"
      replace:
          path: "{{ working_dir }}/containers-prepare-parameter.yaml"
          regexp: 'rhceph-3-rhel7'
          replace: '{{ ceph_image }}'

    - name: set ceph_tag in containers-prepare-parameter.yaml
      vars:
          ceph_tag: "{{ container_env['container-image-prepare']['ceph-tag'] | default('latest') }}"
      replace:
          path: "{{ working_dir }}/containers-prepare-parameter.yaml"
          regexp: 'ceph_tag: latest'
          replace: 'ceph_tag: {{ ceph_tag }}'

    - name: set ceph_namespace in undercloud.conf
      vars:
          ceph_namespace: "{{ container_env['container-image-prepare']['ceph-namespace'] }}"
      replace:
          path: "{{ working_dir }}/undercloud.conf"
          regexp: "(docker_insecure_registries.*)"
          replace: '\1,{{ ceph_namespace }}'
      when: container_env['container-image-prepare']['ceph-namespace'] is defined

    - block:
        - name: remove tag_from_label in containers-prepare-parameter.yaml
          lineinfile:
              path: "{{ working_dir }}/containers-prepare-parameter.yaml"
              regexp: '.*tag_from_label.*'
              state: absent

        - name: set tag according to puddle number
          replace:
              path: "{{ working_dir }}/containers-prepare-parameter.yaml"
              regexp: '(^\ +)tag: .*'
              replace: "\\1tag: {{ container_env['container-image-prepare']['tag'] }}"
      when: not install.registry.skip.puddle

    - block:
        - name: set satellite namespace
          replace:
              path: "{{ working_dir }}/containers-prepare-parameter.yaml"
              regexp: '(^\ +)namespace.*'
              replace: "\\1namespace: {{ install.registry.mirror }}"

        - name: set satellite prefix
          replace:
              path: "{{ working_dir }}/containers-prepare-parameter.yaml"
              regexp: '(^\ +)name_prefix.*'
              replace: "\\1name_prefix: {{ install.registry.prefix }}"
      when: install.cdn|default(False)
  when:
      - (install.version|default(undercloud_version)|openstack_distribution) == 'OSP'
