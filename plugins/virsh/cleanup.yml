---
- name: Add host to host list
  hosts: localhost
  gather_facts: no
  any_errors_fatal: true
  vars:
      hypervisor: "{{ provision.host }}"
      hypervisor_name: hypervisor
  tasks:
    - name: add hosts to host list
      add_host:
          name: "{{ hypervisor.name | default(hypervisor_name) }}"
          groups: "{{ hypervisor.groups|default([hypervisor_name]) | join(',') }}"
          ansible_ssh_user: "{{ hypervisor.user }}"
          ansible_ssh_host: "{{ hypervisor.address }}"
          ansible_ssh_private_key_file: "{{ hypervisor.key }}"

- name: Remove all VMs and networks that were created
  hosts: hypervisor
  gather_facts: yes
  any_errors_fatal: true
  vars:
      # ignore virsh's default network
      ignore_virsh_nets:
          - default
  tasks:
    - yum:
          list: libvirt
      register: libvirt_status

    # Don't cleanup if the libvirtd process is unavailable
    - name: Cleanup libvirt artifacts
      vars:
          libvirt_state: "{{  libvirt_status.results|map(attribute='yumstate')|list }}"
      include: tasks/cleanup.yml
      when: "'installed' in libvirt_state"

    - name: remove iptables rules created by infrared, by comment
      # Can't use iptables module, because it can't delete by generic comment
      vars:
          iptables_comment_search: "Infrared"
      shell: |
          set -euo pipefail
          for table in "-t nat" ""
          do
              iptables ${table} -S | awk '/{{ iptables_comment_search }}/ {$1="-D"; print $0}' | xargs -r -L1 iptables ${table}
          done

    - name: check for any vbmc processes
      command: pgrep vbmc
      register: vbmc_proc
      ignore_errors: true

    - name: kill vbmc processes
      command: killall vbmc
      when: vbmc_proc.rc == 0

- name: Clean old inventory file
  hosts: localhost
  gather_facts: no
  tasks:
    - file:
          dest: "{{ inventory_dir }}/hosts"
          state: link
          src: "local_hosts"
