# https://jamielinux.com/docs/libvirt-networking-handbook/bridged-network.html#bridged-network
- name: validate required nic is present
  fail:
      msg: "Cannot find bridge nic: {{ nic_name }}"
  when: nic_data == ''

- name: disable netfilter for bridges
  become: yes
  copy:
      dest: /etc/sysctl.d/bridge.conf
      content: |
          net.bridge.bridge-nf-call-ip6tables=0
          net.bridge.bridge-nf-call-iptables=0
          net.bridge.bridge-nf-call-arptables=0

- name: set bridge rules
  become: yes
  copy:
      dest: /etc/udev/rules.d/99-bridge.rules
      content: |
          ACTION=="add", SUBSYSTEM=="module", KERNEL=="bridge", RUN+="/sbin/sysctl -p /etc/sysctl.d/bridge.conf"

- name: install bridge utils
  package:
      name: bridge-utils

- name: backup interface network configuration
  become: yes
  copy:
      dest: "/etc/sysconfig/network-scripts/ir_bkp_ifcfg-{{ nic_data.device }}"
      src: "/etc/sysconfig/network-scripts/ifcfg-{{ nic_data.device }}"
      remote_src: yes
      force: no

# todo(yfried): replace with nmcli module once this works
- name: interface network configuration
  become: yes
  copy:
      force: yes
#      backup: yes
      dest: "/etc/sysconfig/network-scripts/ifcfg-{{ nic_data.device }}"
      content: |
          DEVICE={{ nic_data.device }}
          NAME={{ nic_data.device }}
          HWADDR={{ nic_data.macaddress }}
          BRIDGE={{ nic_settings.name }}
          # Change to 'no' to disable NetworkManager for this interface.
          NM_CONTROLLED=no
          ONBOOT=yes
          TYPE=Ethernet

- name: bridge network configuration
  become: yes
  copy:
      dest: "/etc/sysconfig/network-scripts/ifcfg-{{ nic_settings.name }}"
      content: |
          DEVICE={{ nic_settings.name }}
          NAME={{ nic_settings.name }}
          TYPE=Bridge

          BOOTPROTO={{ nic_settings.bootproto|default('none') }}
          {% if nic_settings.ip_address|default(false) %}
          IPADDR={{ nic_settings.ip_address }}
          {% endif %}
          {% if nic_settings.netmask|default(false) %}
          NETMASK={{ nic_settings.netmask }}
          {% endif %}
          NM_CONTROLLED=no
          ONBOOT=yes
          # If you want to turn on Spanning Tree Protocol, ask your hosting
          # provider first as it may conflict with their network.
          STP=off
          # If STP is off, set to 0. If STP is on, set to 2 (or greater).
          DELAY=0

- name: restart interface
  become: yes
  shell: "ifdown {{ nic_data.device }} && ifup {{ nic_settings.name }} && ifup {{ nic_data.device }}"
# TODO(yfried): why doesn't this work?
#  shell: "nmcli connection reload && nmcli connection down {{ nic_data.device }} && nmcli connection up {{ nic_data.device }}"
