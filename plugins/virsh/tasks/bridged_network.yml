# https://jamielinux.com/docs/libvirt-networking-handbook/bridged-network.html#bridged-network
- name: validate required nic is present
  fail:
      msg: "Cannot find bridge nic: {{ nic_name }}"
  when: nic_data == ''

- name: disable netfilter for bridges
  become: yes
  copy:
      dest: /etc/sysctl.d/bridge.conf
      content: |
          net.bridge.bridge-nf-call-ip6tables=0
          net.bridge.bridge-nf-call-iptables=0
          net.bridge.bridge-nf-call-arptables=0

- name: set bridge rules
  become: yes
  copy:
      dest: /etc/udev/rules.d/99-bridge.rules
      content: |
          ACTION=="add", SUBSYSTEM=="module", KERNEL=="bridge", RUN+="/sbin/sysctl -p /etc/sysctl.d/bridge.conf"

- name: backup interface network configuration
  become: yes
  copy:
      dest: "/etc/sysconfig/network-scripts/ir_bkp_ifcfg-{{ nic_data.device }}"
      src: "/etc/sysconfig/network-scripts/ifcfg-{{ nic_data.device }}"
      remote_src: yes
      force: no
  ignore_errors: yes

- name: Setting the MTU size of {{ provision.host.mtu.size }}
  nmcli:
    conn_name: "{{ nic_data['device'] }}"
    mtu: "{{ provision['host']['mtu']['size'] }}"
    type: ethernet
    state: present
  when: provision['host']['mtu']['size'] | default('False')

- name: Reset the ip_addr variable
  set_fact:
    ip_addr: ''

- name: Calculate network cidr
  set_fact:
    ip_cidr: "{{ (nic_settings['ip_address'] + '/' + nic_settings['netmask']) | ipaddr('prefix') }}"
  when:
    - nic_settings['ip_address'] is defined
    - nic_settings['netmask'] is defined

- name: Set ip address for the bridge
  set_fact:
    ip_addr: "{{ nic_settings['ip_address'] }}/{{ ip_cidr }}"
  when:
    - nic_settings['ip_address'] is defined
    - ip_cidr is defined

- name: Create Bridge Interface {{ nic_settings['name'] }}
  nmcli:
    conn_name: "{{ nic_settings['name'] }}"
    state: present
    type: bridge
    ip4: "{{ ip_addr | default(omit) }}"
    autoconnect: True
    stp: "{{ nic_settings['stp'] | default(False) }}"

- name: Disable DEFROUTE For Bridge Network
  command: "nmcli connection mod {{ nic_settings['name'] }} ipv4.never-default yes"

# This is a workaround since the are no parameters exposed in nmcli module
- name: Disble DHCP Failures In Bridge Interface Without IPv4 settings
  block:
    # nmcli doesn't allow to set interface with bootproto none
    - name: Set BOOTPROTO to 'none' For Bridge {{ nic_settings['name'] }}
      lineinfile:
        path: "/etc/sysconfig/network-scripts/ifcfg-{{ nic_settings['name'] }}"
        regexp: '^BOOTPROTO=.*'
        line: 'BOOTPROTO=none'
      ignore_errors: yes

    # Network<Manager doesn't allow to disable DHCP, and will cause interface to go down if
    # it will fail to retrieve an IP address, set DHCP timeout to infinite
    - name: Set DHCP Timeout To Infinite For Bridge {{ nic_settings['name'] }}
      command: "nmcli connection modify {{ nic_settings['name'] }} ipv4.dhcp-timeout infinity"

    - name: Restart Network Interface {{ nic_settings['name'] }}
      shell: "nmcli connection down {{ nic_settings['name'] }};nmcli connection up {{ nic_settings['name'] }}"
  when: '"ip_address" not in nic_settings'

- name: Attach interface {{ nic_data['device'] }} to bridge {{ nic_settings['name'] }}
  nmcli:
     conn_name: "{{ nic_data.device }}"
     master: "{{ nic_settings.name }}"
     state: present
     type: bridge-slave
     hairpin: False

# Need to ensure interface is up before restarting
- name: restart interface
  become: yes
  shell: "nmcli connection up {{ nic_data.device }} && nmcli connection reload && nmcli connection down {{ nic_data.device }} && nmcli connection up {{ nic_data.device }}"
