---
- name: create a temporary directory for {{ vswitch_type }} configuration scripts
  tempfile:
    state: directory
  register: temp_dir

- name: get host name
  set_fact:
    host_name: "{{ vswitch_type }}-{{ num }}"

- name: set SSH key path
  set_fact:
    switch_ssh_key: "{{ temp_dir.path }}/id_rsa-{{ host_name }}"

- name: set switch IP
  set_fact:
    switch_ip: "{{ hostvars[host_name]['ansible_host'] }}"

- name: copy SSH keys to the hypervisor
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  with_items:
    - src: "{{ hostvars[host_name]['ansible_ssh_private_key_file'] }}"
      dest: "{{ switch_ssh_key }}"
      mode: "0600"
    - src: "{{ hostvars[host_name]['ansible_ssh_private_key_file'] }}.pub"
      dest: "{{ switch_ssh_key }}.pub"
      mode: "0644"

- name: copy {{ vswitch_type }} SSH key install script to the temp directory
  template:
    src: "vswitch_{{ vswitch_type }}_setup.sh.j2"
    dest: "{{ temp_dir.path }}/vswitch_{{ vswitch_type }}_setup.sh"
    mode: 0755

- name: install SSH keys on {{ vswitch_type }} switch
  command: "{{ temp_dir.path }}/vswitch_{{ vswitch_type }}_setup.sh"

# Specific wait for vqfx
- name: wait for xe interfaces to show up on vqfx
  command: |
      ssh -i {{ switch_ssh_key }} root@{{ switch_ip }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "
      #!/bin/tcsh

      foreach x (1 2 3 4 5 6 7 8 9 10)
        ifconfig > ifc
        if { grep xe-0 ifc } then
          break
        endif
        sleep 10
      end"
  when: vswitch_type == 'vqfx'

# Get ports from the switch to pass into openstack

- name: get undercloud ports on {{ vswitch_type }} from hypervisor
  shell: echo $(virsh domiflist {{ vswitch_type }}-0 | awk "/unde0/{ print NR}")
  register: undercloud_port

- name: save undercloud switchport
  set_fact:
    undercloud_switchport: "{{ undercloud_port.stdout }}"

- name: get controller ports on {{ vswitch_type }} from hypervisor
  shell: echo $(for i in $(virsh domiflist {{ vswitch_type }}-0 | grep cont | awk '{print $3}'); do echo "$(virsh domiflist {{ vswitch_type }}-0 | awk "/$i/{ print NR}")"; done)
  register: controller_ports

- name: save controller switchports
  set_fact:
    controller_switchports: "{{ controller_ports.stdout }}"

- name: get compute ports on {{ vswitch_type }} from hypervisor
  shell: echo $(for i in $(virsh domiflist {{ vswitch_type }}-0 | grep comp | awk '{print $3}'); do echo "$(virsh domiflist {{ vswitch_type }}-0 | awk "/$i/{ print NR}")"; done)
  register: compute_ports

- name: save compute switchports
  set_fact:
    compute_switchports: "{{ compute_ports.stdout }}"

- name: get ironic ports on {{ vswitch_type }} from hypervisor
  shell: echo $(for i in $(virsh domiflist {{ vswitch_type }}-0 | grep iron | awk '{print $3}'); do echo "$(virsh domiflist {{ vswitch_type }}-0 | awk "/$i/{ print NR}")"; done)
  register: ironic_ports

- name: save ironic switchports
  set_fact:
    ironic_switchports: "{{ ironic_ports.stdout }}"
