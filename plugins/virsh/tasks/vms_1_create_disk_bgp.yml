---
- name: set BGP facts topology_node and node_name
  set_fact:
    topology_node: "{{ node.value }}"
    node_name: "{{ node.key }}"
- name: Create disks
  shell: |
    set -ex
    {% set node_fullname = '-'.join((node_name, item | string())) %}
    mkdir {{ tmp_virt_dir }} || /bin/true
    qemu-img create -f qcow2 -o preallocation=metadata "{{ base_image_path }}/{{ node_fullname }}.qcow2" "{{ topology_node.disks.disk1.size }}"
    rm -rf {{ tmp_ifcfg_dir }}/ifcfg-{{ node_fullname }} ; mkdir -p {{ tmp_ifcfg_dir }}/ifcfg-{{ node_fullname }}
    echo -e "NETWORKING=yes\nNOZEROCONF=yes" > {{ tmp_ifcfg_dir }}/ifcfg-{{ node_fullname }}/network
    {% if 'gws' in topology_node %}
      echo -e "GATEWAY={{ topology_node.gws[provision.bgp.topology.mode][item] }}" >> {{ tmp_ifcfg_dir }}/ifcfg-{{ node_fullname }}/network
    {% endif %}
    
    {% for n in topology_node.interfaces[provision.bgp.topology.mode][item] %}
      echo -e "ONBOOT=yes\nHOTPLUG=no\nNM_CONTROLLED=no\nBOOTPROTO=static" > {{ tmp_ifcfg_dir }}/ifcfg-{{ node_fullname }}/ifcfg-eth{{ loop.index0 }}
      {% if networks.get(n) is mapping and 'net' in networks.get(n) %}
      echo -e "PREFIX={{ networks.get(n).get('prefix') }}\nIPADDR={{ networks.get(n).get('net')[:-2] }}.{{ topology_node.ips[provision.bgp.topology.mode][item] }}" >> {{ tmp_ifcfg_dir }}/ifcfg-{{ node_fullname }}/ifcfg-eth{{ loop.index0 }}
      {% endif %}
      echo -e "DEVICE=eth{{ loop.index0 }}" >> {{ tmp_ifcfg_dir }}/ifcfg-{{ node_fullname }}/ifcfg-eth{{ loop.index0 }}
      {% if 'gw' in n %}
      echo -e "GATEWAY={{ n.get('gw') }}" >> {{ tmp_ifcfg_dir }}/ifcfg-{{ node_fullname }}/ifcfg-eth{{ loop.index0 }}
      {% elif networks.get(n) is mapping and 'gw' in networks.get(n) %}
      echo -e "GATEWAY={{ networks.get(n).get('gw') }}" >> {{ tmp_ifcfg_dir }}/ifcfg-{{ node_fullname }}/ifcfg-eth{{ loop.index0 }}
      {% endif %}
      echo -e "PEERDNS=yes" >> {{ tmp_ifcfg_dir }}/ifcfg-{{ node_fullname }}/ifcfg-eth{{ loop.index0 }}
      echo -e "DNS1={{ dns1 }}" >> {{ tmp_ifcfg_dir }}/ifcfg-{{ node_fullname }}/ifcfg-eth{{ loop.index0 }}
      echo -e "DNS2={{ dns2 }}" >> {{ tmp_ifcfg_dir }}/ifcfg-{{ node_fullname }}/ifcfg-eth{{ loop.index0 }}
    {% endfor %}
  loop: '{{ topology_node.node_indexes }}'

- name: Create disks from vm base images
  shell: |
    set -ex
    {% set image_name = provision.image.url | basename %}
    {% set node_fullname = '-'.join((node_name, item | string())) %}
    root_part=`virt-filesystems --csv --long --no-title -a {{ base_image_path }}/{{ image_name }} | awk -F "," '{ if ($4 == "root") {print $1; exit;} else if ($3 == "xfs") {print $1; exit;} }'`
    root_part=${root_part:-/dev/sda1}
    virt-resize --expand $root_part {{ base_image_path }}/{{ image_name }} {{ base_image_path }}/{{ node_fullname }}.qcow2
    {% if 'ceph_additional_disks_count' in topology_node %}
    for i in $(seq {{ topology_node.ceph_additional_disks_count }}); do
      qemu-img create -f qcow2 -o preallocation=metadata {{ base_image_path }}/{{ node_fullname }}-ceph-$i.qcow2  {{ topology_node.ceph_additional_disks_size }}
    done
    {% endif %}
  register: vms_jobs0
  async: 7200
  poll: 0
  loop: '{{ topology_node.node_indexes }}'

- name: wait for vms base images
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: vm_tasks0
  until: vm_tasks0.finished
  retries: 300
  with_items: "{{ vms_jobs0.results }}"

- name: Customize disks from base images (virt-customize)
  vars:
    net_scripts: /etc/sysconfig/network-scripts
  shell: |
    set -ex
    {% set node_fullname = '-'.join((node_name, item | string())) %}
    {% set default_bgp_packages = 'network-scripts,vim,frr,mtr,tcpdump' %}
    virt-sysprep -a {{ base_image_path }}/{{ node_fullname }}.qcow2 --operations machine-id
    virt-customize -v -a {{ base_image_path }}/{{ node_fullname }}.qcow2 \
      --hostname "{{ node_fullname }}" \
      --run-command "rm -f /etc/sysconfig/network-scripts/ifcfg-e*" \
      --run-command "dnf remove -y cloud-init" \
      --run-command "rpm -Uvh http://download.eng.bos.redhat.com/rcm-guest/puddles/OpenStack/rhos-release/rhos-release-latest.noarch.rpm" \
      --run-command "rhos-release -x; rhos-release {{ provision.version }} -p {{ provision.build }}" \
      --copy-in {{ tmp_ifcfg_dir }}/ifcfg-{{ node_fullname }}/network:/etc/sysconfig \
    {% for n in topology_node.interfaces[provision.bgp.topology.mode][item] %}
      --copy-in {{ tmp_ifcfg_dir }}/ifcfg-{{ node_fullname }}/ifcfg-eth{{ loop.index0 }}:{{ net_scripts }} \
    {% endfor %}
      --timezone 'UTC' \
    {% if 'rpms' in topology_node %}
      --install {{ default_bgp_packages }},{{ topology_node.rpms }} \
    {% else %}
      --install {{ default_bgp_packages }} \
    {% endif %}
      --run-command 'systemctl enable network' \
      --run-command 'systemctl enable NetworkManager' \
      --selinux-relabel
  loop: '{{ topology_node.node_indexes }}'
  register: vms_jobs1
  async: 7200
  poll: 0

- name: wait for vms and disks
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: vm_tasks1
  until: vm_tasks1.finished
  retries: 300
  with_items: "{{ vms_jobs1.results }}"

- name: Start up VMs
  shell: |
    set -ex
    {% set node_fullname = '-'.join((node_name, item | string())) %}
    virt-install --name "{{ node_fullname }}" \
      --disk path="{{ base_image_path }}/{{ node_fullname }}.qcow2,device=disk,bus=virtio,format=qcow2,cache=unsafe" \
    {% if provision.bootmode == 'uefi' %}
      --boot {{ 'hd' if topology_node.deploy_os|default(True) else 'uefi' }} \
    {% else %}
      --boot {{ 'hd' if provision.bootmode == 'bios' else provision.bootmode }} \
    {% endif %}
    {% if 'ceph_additional_disks_count' in topology_node %}
      {% for n in range(topology_node.ceph_additional_disks_count | int) %}
      --disk path="{{ base_image_path }}/{{ node_fullname }}-ceph-{{ n + 1 }}.qcow2,device=disk,bus=virtio,format=qcow2,cache=unsafe" \
      {% endfor %}
    {% endif %}
    {% for n in topology_node.interfaces[provision.bgp.topology.mode][item] %}
      {% if 'introspection_macs' in topology_node and topology_node.introspection_nets[provision.bgp.topology.mode][item] == n %}
      --network network={{ n }},model=virtio,mac={{ topology_node.introspection_macs[provision.bgp.topology.mode][item] }} \
      {% else %}
      --network network={{ n }},model=virtio \
      {% endif %}
    {% endfor %}
      --virt-type kvm \
      --cpu {{ topology_node.cpumodel|default('host-passthrough') }} \
      --ram "{{ topology_node.memory }}" \
      --vcpus "{{ topology_node.cpu }}" \
      {% if topology_node.machine_type is defined and topology_node.machine_type %}
      --machine {{ topology_node.machine_type }} \
      {% endif %}
      --os-variant "{{ topology_node.os.variant }}" \
      --import \
      --graphics vnc,listen={{ provision.vnc.external | ternary('0.0.0.0','127.0.0.1') }},password={{ provision.vnc.password if provision.vnc.password is defined else '' }} \
      --noautoconsole \
      --autostart \
      --rng /dev/urandom {{ provision.get('virtopts', '') }}
  loop: '{{ topology_node.node_indexes }}'


