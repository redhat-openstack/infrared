---
- name: make sure that libvirt service is running
  service:
      name: libvirtd
      state: started

- block:
  - name: get the list of VMs
    virt:
        command: list_vms
    register: vm_names

  - name: get the list of networks
    virt_net:
        command: info
    register: vm_nets

  when: provision.cleanup|default(False)

- block:
  - name: get the list of VMs and networks
    virt_util:
        hosts: "{{ groups['all'] }}"
        command: domains_and_networks
    register: doms_and_nets
    tags: skip_ansible_lint

  - name:
    set_fact:
        vm_names: "{{ doms_and_nets.domains }}"

  - name:
    set_fact:
        vm_nets: "{{ doms_and_nets.networks }}"

  when: provision.cleanup_workspace | default(False)

#in case VM was created in UEFI mode libvirt requires undefine task first
- name: undefine relevant VMs
  virt:
      name: "{{ item }}"
      command: undefine
  with_items: "{{ vm_names.list_vms }}"
  when: provision.bootmode == 'uefi'

- name: destroy undfined vms
  virt:
      name: "{{ item }}"
      state: destroyed
  with_items: "{{ vm_names.list_vms }}"

- name: undefine relevant VMs
  virt:
      name: "{{ item }}"
      command: undefine
  with_items: "{{ vm_names.list_vms }}"
  when: provision.bootmode != 'uefi'

- name: Clean /etc/hostshosts file
  become: yes
  lineinfile:
      dest: /etc/hosts
      regexp: ".*{{ item }}.*"
      state: absent
  with_items: "{{ vm_names.list_vms }}"

# ignoring errors in the known-hosts tasks
# because this module validates known_hosts files
# and we cannot ensure that this file is always
# correct on the user machine.
# So do whatever we can and continue with cleanup.
- name: cleanup known-hosts by name
  known_hosts:
      state: absent
      name: "{{ item }}"
  with_items: "{{ vm_names.list_vms }}"
  ignore_errors: yes

- name: cleanup known-hosts by ip
  tags: networks
  known_hosts:
      state: absent
      name: "{{ item.1.ipaddr }}"
  with_subelements:
      - "{{ vm_nets.networks }}"
      - dhcp_leases
      - skip_missing: yes
  when: item.0.bridge|default('') not in ignore_virsh_nets
  ignore_errors: yes

- name: remove the networks we created
  tags: networks
  virt_net:
      name: "{{ item.key }}"
      state: absent
  with_dict: "{{ vm_nets.networks }}"
  when: item.key not in ignore_virsh_nets

- name: restore bridge
  tags: networks
  include: restore_bridged_interface.yml
  with_dict: "{{ vm_nets.networks }}"
  vars:
      bridge_name: "{{ item.key }}"
  when:
      - item.key not in ignore_virsh_nets
      - item.value.forward_mode|default('') == 'bridge'

- name: remove any existing VM disks that we created
  shell: "rm -f {{ item }}*disk*.qcow*"
  args:
      chdir: /var/lib/libvirt/images
  with_items: "{{ vm_names.list_vms }}"
