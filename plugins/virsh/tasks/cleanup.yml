---
- name: get the list of VMs
  virt:
      command: list_vms
  register: vm_names

- name: get the list of networks
  virt_net:
      command: info
  register: vm_nets

#in case VM was created in UEFI mode libvirt requires undefine task first
- name: undefine relevant VMs
  virt:
      name: "{{ item }}"
      command: undefine
  with_items: "{{ vm_names.list_vms }}"
  when:
      - provision.bootmode == 'uefi'
      - "item not in ignore_virsh_nodes"

- name: destroy undfined vms
  virt:
      name: "{{ item }}"
      state: destroyed
  with_items: "{{ vm_names.list_vms }}"
  when: "item not in ignore_virsh_nodes"

- name: undefine relevant VMs
  virt:
      name: "{{ item }}"
      command: undefine
  with_items: "{{ vm_names.list_vms }}"
  when:
      - provision.bootmode != 'uefi'
      - "item not in ignore_virsh_nodes"

- name: Clean /etc/hostshosts file
  become: yes
  lineinfile:
      dest: /etc/hosts
      regexp: ".*{{ item }}.*"
      state: absent
  with_items: "{{ vm_names.list_vms }}"
  when: item not in ignore_virsh_nodes

- name: remove the networks we created
  virt_net:
      name: "{{ item.key }}"
      state: absent
  with_dict: "{{ vm_nets.networks }}"
  when: item.key not in ignore_virsh_nets

- name: restore bridge
  include: tasks/restore_bridged_interface.yml
  with_dict: "{{ vm_nets.networks }}"
  vars:
      bridge_name: "{{ item.key }}"
  when:
      - item.key not in ignore_virsh_nets
      - item.value.forward_mode|default('') == 'bridge'

- name: remove any existing VM disks that we created
  shell: "rm -f {{ item }}*disk*.qcow*"
  args:
      chdir: /var/lib/libvirt/images
  with_items: "{{ vm_names.list_vms }}"
  when: "item not in ignore_virsh_nodes"
