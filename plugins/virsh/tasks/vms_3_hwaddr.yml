---
- set_fact:
    topology_node: "{{ node.value }}"

- name: Set default node_start_index
  set_fact:
      node_start_index: 0

- name: Calculate node_start_index
  set_fact:
      node_start_index: "{{ node_start_index|int + 1 if (topology_node.name + '-' in item ) and hostvars[item].get('ansible_connection') == 'ssh' else node_start_index|int }}"
  with_items: "{{ groups.all }}"
  when: provision.topology.extend | default(False)

- block:
  - name: get MAC list
    vars:
        inv_clear_int: "{{ topology_node.provision_network if 'provision_network' in topology_node else topology_node.external_network.network }}"
        inv_int: "{{ prefix|default('')+ (prefix is defined|ternary('-','')) + inv_clear_int }}"
    shell: "virsh domiflist {{ topology_node.name }}-{{ item }} | awk '/{{ inv_int }}/ {print $5};'"
    with_sequence: start={{ node_start_index|int }} end={{ topology_node.num|int + node_start_index|int - 1 }}
    register: mac_list

  - name: Set inventory netwrok info
    vars:
        inv_clear_net: "{{ topology_node.provision_network if 'provision_network' in topology_node else topology_node.external_network.network }}"
        inv_net: "{{ prefix|default('') + (prefix is defined|ternary('-','')) + inv_clear_net }}"
    set_fact:
        vm_inv_info: "{{ vm_inv_info | default({})|combine({ item.cmd.split()[2]: { 'mac': item.stdout, 'groups': topology_node.groups, 'net': inv_net, 'deploy_os': topology_node.deploy_os|default(True) }}) }}"
    with_items: "{{ mac_list.results }}"

  when: "not topology_node.external_network.bridged|default(False)"
