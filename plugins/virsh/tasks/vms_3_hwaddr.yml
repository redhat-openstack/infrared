---
# save current node to "{{ node_dict }}"
- include_vars:
    file: "{{ node.key }}"
    name: node_dict

- include_vars:
    file: "{{ provision.topology.network }}"
    name: network_info

- name: merge overriden settings to the separate var
  set_fact:
      topology_node: "{{ node_dict|default({}) | combine((override|default({})).get(node.key|basename|splitext|first, {}), recursive=True) }}"

- name: update node network info if needed
  set_fact:
      topology_node: "{{ topology_node | combine(network_info.nodes[topology_node.name]|default(network_info.nodes.default), recursive=True) }}"
  when: not topology_node.interfaces

- name: Set default node_start_index
  set_fact:
      node_start_index: 0

- name: Calculate node_start_index
  set_fact:
      node_start_index: "{{ node_start_index|int + 1 if (topology_node.name + '-' in item ) and hostvars[item].get('ansible_connection') == 'ssh' else node_start_index|int }}"
  with_items: "{{ groups.all }}"
  when: provision.topology.extend | default(False)

- block:
  - name: get MAC list
    vars:
        inv_int: "{{ topology_node.provision_network if 'provision_network' in topology_node else topology_node.external_network.network }}"
    shell: "virsh domiflist {{ topology_node.name }}-{{ item }} | awk '/{{ inv_int }}/ {print $5};'"
    with_sequence: start={{ node_start_index|int }} end={{ node.value|int + node_start_index|int - 1 }}
    register: mac_list

  - name: Set inventary netwrok info
    vars:
        inv_net: "{{ topology_node.provision_network if 'provision_network' in topology_node else topology_node.external_network.network }}"
    set_fact:
        vm_inv_info: "{{ vm_inv_info | default([]) + [{'name': item.cmd.split()[2], 'mac': item.stdout, 'groups': topology_node.groups, 'net': inv_net }] }}"
    with_items: "{{ mac_list.results }}"

  when: "not topology_node.external_network.bridged|default(False)"
