# Set IP for natted VMs with ssh tunneling

- name: get networks dict
  include_vars: "{{ provision.topology.network }}"

- name: gether networks dhcp ranges
  set_fact:
      dhcp_ranges: "{{ dhcp_ranges | default({})| combine({item.value.name: {'start': item.value.dhcp.range.start, 'end': item.value.dhcp.range.end }}) }}"
  with_dict: "{{ networks }}"
  when: "{{ item.value.dhcp is defined }}"

- name: ip adresses list from subnet range
  local_action: 'shell python -c "import netaddr;print \"\\n\".join(map(lambda x: x.__str__(), netaddr.iter_iprange(\"{{ item.value.start }}\", \"{{ item.value.end }}\")))"'
  with_dict: "{{ dhcp_ranges }}"
  register: ip_list

- name: populate dhcp_ranges with addresses
  set_fact:
      dhcp_ranges: "{{ dhcp_ranges | combine({item.item.key: {'ips': item.stdout_lines}}) }}"
  with_items: "{{ ip_list.results }}"

- name: remove already used ips from dhcp_ranges
  include: remove_used_ips.yml
  with_dict: "{{ networks|default({}) }}"
  loop_control:
          loop_var: network
  when: provision.topology.extend|default(False)

- name: update vms info with ip addresses
  set_fact:
      vms_info: "{{ vms_info | default({}) | combine({dhcp_ranges[item.net].ips | difference(vms_info | default({}) | list) | first | ipaddr('address'): item}) }}"
  with_items: "{{ vm_inv_info }}"

- name: make IPs persistent
  shell: "virsh net-update {{ item.value.net }} add ip-dhcp-host \"<host mac='{{ item.value.mac }}' name='{{ item.value.name }}' ip='{{ item.key }}' />\" --live --config"
  with_dict: "{{ vms_info }}"

# We can write nodes to inventory while we wait for ips
- name: add hosts to host list
  add_host:
      name: "{{ item.value.name }}"
      groups: "{{ item.value.groups | join(',') }}"
      ansible_ssh_user: "root"
      ansible_ssh_host: "{{ item.key }}"
      ansible_ssh_private_key_file: "{{ inventory_dir }}/id_rsa"
      ansible_ssh_common_args: "
          -o ForwardAgent=yes
          -o ServerAliveInterval=30
          -o ControlMaster=auto
          -o ControlPersist=30m
          -o StrictHostKeyChecking=no
          -o UserKnownHostsFile=/dev/null
          -o ProxyCommand=\"ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -W %h:%p -i {{ ansible_ssh_private_key_file }} {{ ansible_ssh_user }}@{{ ansible_ssh_host }}\""
      inventory_dir: "{{ inventory_dir }}"
  with_dict: "{{ vms_info }}"
