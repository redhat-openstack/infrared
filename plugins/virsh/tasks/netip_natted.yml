# Set IP for natted VMs with ssh tunneling

- name: get networks dict
  include_vars: "{{ provision.topology.network }}"

- name: wait for VMs IPs
  shell: |
      virsh net-dhcp-leases {{ item.value.net }} | awk '($4 == "ipv4")  && ($3 == "{{ item.value.mac }}") {print $5}'
  when: item.value.deploy_os
  register: ip_list
  until: "ip_list.stdout != ''"
  retries: 40
  delay: 5
  with_dict: "{{ vm_inv_info }}"
  tags: skip_ansible_lint

- name: construct dict with node name as key and with ip as value
  set_fact:
      vm_ip_dict: "{{ vm_ip_dict | default({}) | combine({ item.item.key: { 'ip': item.stdout|ipaddr('address') }}) }}"
  when: item.stdout|default(False)
  with_items: "{{ ip_list.results }}"

- name: merge ip addresses to the vm_inv_info dict
  set_fact:
      vm_inv_info: "{{ vm_inv_info | default({}) | combine(vm_ip_dict|default({}), recursive=True) }}"

- name: make IPs persistent
  shell: "virsh net-update {{ item.value.net }} add ip-dhcp-host \"<host mac='{{ item.value.mac }}' name='{{ item.key }}' ip='{{ item.value.ip }}' />\" --live --config"
  when: item.value.ip is defined
  with_dict: "{{ vm_inv_info }}"

- name: wait for hosts to be reachable
  wait_for:
      port: 22
      host: "{{ item.value.ip }}"
      search_regex: OpenSSH
      delay: 10
      sleep: 3
  delegate_to: hypervisor
  when: (item.value.deploy_os|default(True)) and (item.value.ip is defined)
  with_dict: "{{ vm_inv_info }}"

- name: detect python interpreter
  vars:
      sshkey: "{{ inventory_dir }}/id_rsa"
      sshopts: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
      proxyhost: "{{ ansible_user|default(ansible_ssh_user) }}@{{ ansible_host|default(ansible_ssh_host) }}"
  shell: |
      ssh -o BatchMode=yes {{ sshopts }} \
      -o ProxyCommand="ssh -W %h:%p -i {{ sshkey }} {{ proxyhost }}" \
      -i {{ sshkey }} root@{{ item.value.ip }} 'command -v python python3 /usr/libexec/platform-python|head -n1'
  delegate_to: localhost
  when: (item.value.deploy_os|default(True)) and (item.value.ip is defined)
  register: py_interpreter
  with_dict: "{{ vm_inv_info }}"

- name: add hosts to host list
  add_host:
      name: "{{ item.key }}"
      groups: "{{ item.value.groups | join(',') }}"
      ansible_user: "root"
      ansible_host: "{{ item.value.ip | default('NA') }}"
      ansible_ssh_private_key_file: "{{ inventory_dir }}/id_rsa"
      # Set 'ansible_connection' explicitly here, because in vms_2_install.yaml it was initially set to 'local'.
      ansible_connection: "ssh"
      ansible_python_interpreter: "{{ ( ( py_interpreter.results | selectattr('item.key', 'equalto', item.key) | first | default(None) )['stdout'] | default('') ) | trim | default(omit, true) }}"
      ansible_ssh_common_args: "
          -o BatchMode=yes
          -o ForwardAgent=yes
          -o ServerAliveInterval=30
          -o ControlMaster=auto
          -o ControlPersist=30m
          -o StrictHostKeyChecking=no
          -o UserKnownHostsFile=/dev/null
          -o ProxyCommand=\"ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -W %h:%p -i {{ ansible_ssh_private_key_file }} {{ ansible_user|default(ansible_ssh_user) }}@{{ ansible_host|default(ansible_ssh_host) }}\""
      inventory_dir: "{{ inventory_dir }}"
  with_dict: "{{ vm_inv_info }}"

- include_role:
      name: inventory-update
  delegate_to: localhost
  vars:
      inventory_file_name: 'hosts-prov'
