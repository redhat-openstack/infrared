---
- name: Provision VMs
  hosts: hypervisor
  gather_facts: yes
  any_errors_fatal: true
  vars:
      base_image_path: /var/lib/libvirt/images
      url: "{{ provision.image.url }}"
      infrared_vswitch_types:
        - vqfx
  tasks:
    - name: Get uniq id for current deployment
      set_fact:
            prefix: "{{ ansible_local.run.keys()[0] }}"
      when: provision.prefix is defined

    - name: load nodes topology configuration
      include_tasks: tasks/load_topology.yml
      with_dict: "{{ provision.topology.nodes }}"
      loop_control:
          loop_var: node

    - name: provision image for each node
      include_tasks: tasks/download_images.yml
      with_dict: "{{ topology_nodes }}"
      loop_control:
          loop_var: node
      tags: images

    # Create Disks
    - block:
        - name: create disks for each VM if not import
          include_tasks: tasks/vms_1_create_disk.yml
          with_dict: "{{ topology_nodes }}"
          loop_control:
              loop_var: node

        - name: Wait for all disks to be created
          async_status:
              jid: "{{ item }}"
          register: disk_tasks
          until: disk_tasks.finished
          retries: 300
          with_items: "{{ async_disks }}"
      tags: disks

    # Build VMs
    - block:
        - name: define libvirt VMs
          include_tasks: tasks/vms_2_install.yml
          with_dict: "{{ topology_nodes }}"
          loop_control:
              loop_var: node

        - name: Wait for VMs to be created
          async_status:
              jid: "{{ item }}"
          register: install_tasks
          until: install_tasks.finished
          retries: 300
          with_items: "{{ async_install }}"
      tags: install

    # Fetch IP addresses
    - block:
        - name: Get VMs hardware adresses
          include_tasks: tasks/vms_3_hwaddr.yml
          with_dict: "{{ topology_nodes }}"
          loop_control:
              loop_var: node

        - name: Set ip VMs ip addresses and add to inventory
          include_tasks: tasks/netip_natted.yml
          when: "not topology_node.external_network.bridged|default(False)"
      tags: ips

    - name: Post-configure VMs
      include_tasks: tasks/vms_4_post_configure.yml
      with_dict: "{{ topology_nodes }}"
      loop_control:
          loop_var: node

    # TODO(obaranov) This is deprecated config. Remove it.
    - name: update tunneling conf
      template:
          src: ansible.ssh.config.j2
          dest: "{{ inventory_dir }}/ansible.ssh.config"
      delegate_to: localhost
      tags: ssh_tunnel
