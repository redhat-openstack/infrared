---
- name: Prepare the hypervisor
  hosts: "{{ (_run_condition | bool) | ternary('hypervisor', 'none') }}"
  gather_facts: yes
  any_errors_fatal: true
  tasks:
    - name: Load a variable file based on the OS type
      include_vars: "{{ lookup('first_found', params) }}"
      vars:
        params:
          files:
            - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}-hypervisor.yml"
            - 'hypervisor.yml'
          paths:
            - 'vars'

    - name: Make sure that directory for custom facts exists
      file:
          path: "{{ custom_facts }}"
          state: directory
          mode: 0755

    - block:
        - name: Get deployment prefix
          set_fact:
              prefix: "{{ provision.prefix }}"

        - set_fact:
              net_list: [0]

        - set_fact:
              data_net_list: [14]

        - block:
            - set_fact:
                  net_list: "{{ net_list + [item.value.net|int] }}"
              with_dict: "{{ ansible_local.deployment_info }}"

            - set_fact:
                  data_net_list: "{{ data_net_list + [item.value.data_net|int] }}"
              with_dict: "{{ ansible_local.deployment_info }}"
          when: ansible_local.deployment_info is defined

        - name: generate deployment info dict
          vars:
              id: "{{ prefix }}"
              net_prefix: "{{ (net_list|max)|int+10 }}"
              data_net: "{{ (data_net_list|max)|int+10 }}"
          set_fact:
              deployments_info: "{{ deployments_info|default({})| combine( {id:{'net': net_prefix, 'data_net': data_net }}) }}"
          when: not (provision.net_subnet is defined and provision.data_subnet is defined)

        - name: generate deployment info dict with predefined values
          vars:
              id: "{{ prefix }}"
              net_prefix: "{{ provision.net_subnet }}"
              data_net: "{{ provision.data_subnet }}"
          set_fact:
              deployments_info: "{{ deployments_info|default({})| combine( {id:{'net': net_prefix, 'data_net': data_net }}) }}"
          when: provision.net_subnet is defined and provision.data_subnet is defined

        - name: Create running deployment custom fact
          template:
              src: deployments.fact.j2
              dest: "{{ custom_facts }}/run.fact"
              mode: 0644

      when: provision.prefix is defined

    - name: install packages
      package:
          name: "{{ packages }}"
          state: present
      register: yum_result

    - block:
        - name: check for OVMF package
          action: "{{ ansible_pkg_mgr }} list=OVMF"
          register: ovmf_status

        - name: install OVMF package
          action: "{{ ansible_pkg_mgr }} name=OVMF state=present"
          when: ovmf_status.results|list|length > 0

        - name: check if UEFI binaries are installed from OVMF
          command: "rpm -q OVMF"
          args:
              warn: no
          register: rpm_check_ovmf
          ignore_errors: True
          changed_when: False
          when: ovmf_status.results|list|length == 0

        - name: check if UEFI binaries are installed from edk2.git-ovmf-x64
          command: "rpm -q edk2.git-ovmf-x64"
          args:
              warn: no
          register: rpm_check_edk2
          ignore_errors: True
          changed_when: False
          when: ovmf_status.results|list|length == 0

        - name: "Fail if UEFI related binaries are missing"
          fail:
              msg: "UEFI related binaries are missing, please refer http://infrared.readthedocs.io/en/stable/advance_features.html#uefi-mode-related-binaries"
          when:
              - ovmf_status.results|list|length == 0
              - rpm_check_ovmf.stdout.find('is not installed') != -1
              - rpm_check_edk2.stdout.find('is not installed') != -1

      when: provision.bootmode == 'uefi'

    - name: stop libvirtd
      service:
          name: "libvirtd"
          state: "stopped"
      when: yum_result.changed

    # NOTE(psedlak): due to some flakiness in >few days running libvirt/dbus
    # lets always restart libvirt at beginning of provisioning
    - name: "always restart libvirtd"
      service:
          name: "libvirtd"
          state: "restarted"
          enabled: yes

    - name: check if host supports virtualization
      include_tasks: tasks/enable_virtualization.yml

    - name: check if private key exist on system
      stat:
          path: "/root/.ssh/id_rsa"
      register: result

    - name: if private key doesn't exist, create it
      command: "ssh-keygen -f /root/.ssh/id_rsa -t rsa -N ''"
      when: not result.stat.exists | bool

    - name: copy server private key from hypervisor for SSH proxy
      vars:
          validate_checksum:  "{{ (groups.hypervisor|count == 1) | ternary('yes', 'no') }}"
      fetch:
          src: "{{ item.src }}"
          dest: "{{ item.dest }}"
          flat: yes
          validate_checksum: "{{ validate_checksum }}"
      with_items:
          - {src: "~/.ssh/id_rsa", dest: "{{ inventory_dir }}/id_rsa"}
          - {src: "~/.ssh/id_rsa.pub", dest: "{{ inventory_dir }}/id_rsa.pub"}

    - name: update file permissions
      file:
          path: "{{ item }}"
          mode: 0600
      with_items:
          - "{{ inventory_dir }}/id_rsa"
          - "{{ inventory_dir }}/id_rsa.pub"
      delegate_to: localhost

    - name: Increase ssh session limits
      lineinfile:
          dest: "/etc/ssh/sshd_config"
          regexp: "{{ item.regexp }}"
          line: "{{ item.line }}"
      with_items:
        - regexp: 'MaxSessions'
          line: 'MaxSessions 100'
        - regexp: 'MaxStartups'
          line: 'MaxStartups 100:30:100'

    - name: Restart ssh server to apply parameters
      service:
          name: "sshd"
          state: "restarted"
          enabled: yes

    - name: Set up authorized_keys for the deploy user
      authorized_key:
          user: root
          key: "{{ lookup('file', item) }}"
      with_first_found:
          - files:
            - "{{ inventory_dir }}/id_rsa.pub"
            skip: true

    - block:
        - name: Change timezone to {{ provision.topology.timezone }}
          timezone:
              name: "{{ provision.topology.timezone }}"
          register: timezone_change

        - debug:
              msg: "Changing timezone from {{ timezone_change.diff.before.name }} to {{ timezone_change.diff.after.name }}"

        - name: Restart libvirtd after timezone change
          service:
              name: "libvirtd"
              state: "restarted"

      tags: timezone
      when: provision.topology.timezone|default('')

    - name: Get Appliance files to allow virt-customize on RHEL hypervisors
      get_url:
        dest: /opt/appliance-{{ appliance_version }}.tar.xz
        checksum: "{{ appliance_checksum }}"
        url: http://download.libguestfs.org/binaries/appliance/appliance-{{ appliance_version }}.tar.xz
      register: appliance_archive
      vars:
        appliance_version: '1.46.0'
        appliance_checksum: 'sha1:b614c0dc09accca057f79ec35843651ad64035f8'

    - name: Unpack Appliance files
      when: appliance_archive is changed
      unarchive:
        src: "{{ appliance_archive.dest }}"
        dest: /opt/
        remote_src: yes

    - name: Setup selinux policy for RHEL8.1 to use /var/lib/libvirt/qemu for console logs
      when:
        - "ansible_os_family == 'RedHat'"
        - "ansible_distribution_version is version('8.1', '>=')"
      become: yes
      block:
        - name: Install required packages
          package:
            name:
              - policycoreutils
              - policycoreutils-devel
              - policycoreutils-python-utils
            state: present

        - name: Create local policy directory
          file:
            state: directory
            dest: /etc/selinux/targeted/local
            mode: 0755
            owner: root
            group: root

        - name: Create local policy
          copy:
            content: |-
              policy_module(var_lib_libvirt_qemu, 1.0)
              require {
                      type qemu_var_run_t;
                      type virtlogd_t;
                      class capability dac_override;
                      class dir { add_name remove_name write };
                      class file { append create getattr open unlink };
              }
              allow virtlogd_t qemu_var_run_t:dir { add_name remove_name write };
              allow virtlogd_t qemu_var_run_t:file getattr;
              allow virtlogd_t qemu_var_run_t:file { append create open unlink };
              allow virtlogd_t self:capability dac_override;
            dest: /etc/selinux/targeted/local/var_lib_libvirt_qemu.te

        - name: Compile local policy
          shell: |-
            make -f /usr/share/selinux/devel/Makefile
          args:
            chdir: /etc/selinux/targeted/local
            executable: /bin/bash

        - name: Install and load local policy
          shell: |-
            semodule -i var_lib_libvirt_qemu.pp
          args:
            chdir: /etc/selinux/targeted/local
            executable: /bin/bash
