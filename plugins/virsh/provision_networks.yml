---
- name: Create networks
  hosts: hypervisor
  gather_facts: yes
  any_errors_fatal: true
  tasks:
    - name: get networks dict
      include_vars: "{{ provision.topology.network }}"

    - name: merge overriden settings to the separate var
      set_fact:
          networks: "{{ networks|default({}) | combine(item.value, recursive=True) }}"
      when: item.key == 'networks'
      with_dict: "{{ override|default({}) }}"
    - name: Get uniq id for current deployment
      set_fact:
            prefix: "{{ ansible_local.run.keys()[0] }}"
      when: provision.prefix is defined

    - name: set net prefix
      set_fact:
          net: "{{ ansible_local.run[prefix].net if prefix is defined else 10 }}"

    - name: set data net prefix
      set_fact:
          data_net: "{{ ansible_local.run[prefix].data_net if prefix is defined else 24 }}"

    - name: Update network dict with prefix
      set_fact:
          networks: "{{ networks|combine({item.key: {'name': prefix|default('') + (prefix is defined|ternary('-','')) + item.value.name}}, recursive=True) }}"
      with_dict: "{{ networks }}"

    - name: Check if interfaces have inet6 address family capabilities
      shell: "ip addr show | grep inet6"
      ignore_errors: True
      register: ipv6_addr

    - name: Check if IPv6 enabled on host
      shell: "grep -q ^0$ /sys/module/ipv6/parameters/disable"
      ignore_errors: True
      register: ipv6_sys

    - fail:
          msg: "Network '{{ item.value.name }}' requires IPv6, but modules aren't loaded..."
      when:
          - item.value.ipv6 is defined
          - (ipv6_addr.rc != 0 or ipv6_sys.rc != 0 )
      with_dict: "{{ networks }}"

    - name: enable router advertisements
      sysctl:
        name: "net.ipv6.conf.{{ ansible_default_ipv6['interface'] }}.accept_ra"
        value: 2
        sysctl_set: yes
        state: present
        reload: yes
      when: "'interface' in ansible_default_ipv6"

    - name: create bridged network
      include_tasks: tasks/bridged_network.yml
      vars:
          nic_settings: "{{ item }}"
          nic_data: "{{ (item.nic == '') | ternary(hostvars[inventory_hostname]['ansible_' + ansible_default_ipv4.interface],
              hostvars[inventory_hostname]['ansible_' + item.nic]|default('')) }}"
      with_items:
          "{{ networks.values() | selectattr('forward', 'defined') | selectattr('forward', 'equalto', 'bridge') | list }}"
      when: "networks is defined"

    - name: check for existing networks
      virt_net:
          command: "list_nets"
      register: network_list

    - name: create the networks for the topology
      virt_net:
          command: "define"
          name: "{{ item.value.name }}"
          xml: "{{ lookup('template', 'templates/network.xml.j2') }}"
      when: "item.value.name not in network_list.list_nets"
      with_dict: "{{ networks }}"

    - name: set autostart to the created networks
      virt_net:
          autostart: "{{ item.value.autostart | default('yes') }}"
          name: "{{ item.value.name }}"
      with_dict: "{{ networks }}"

    - name: check if network is active
      virt_net:
          name: "{{ item.value.name }}"
          state: active
      with_dict: "{{ networks }}"
