---
# This file includes tasks for instances and floating IPs creation.
# These tasks done for each type of node according to 'amount' variable.

# save current node to "{{ node_dict }}"
- debug: var=node.key

- include_vars:
    file: "{{ node.key }}"
    name: node_dict

- name: merge overriden settings to the separate var
  set_fact:
      topology_node: "{{ node_dict|default({}) | combine((override|default({})).get(node.key|basename|splitext|first, {}), recursive=True) }}"

- name: Get nics list ordered
  command: "echo net-name={{ provision.prefix }}{{ topology_node.interfaces[item].network }}"
  with_items: "{{ topology_node.interfaces | sort }}"
  register: nics
  changed_when: false

- name: Create instances
  vars:
      resources: "{{ lookup('file', inventory_dir + '/resources.yml') | from_yaml }}"
      secgroups: "{% if provision.anti.spoofing | bool %}{{ topology_node.security_groups }}{% endif %}"
  os_server:
      cloud: "{{ provision.cloud | default(omit) }}"
      auto_ip: "{{ topology_node.auto_ip | default(auto_ip) }}"
      config_drive: "{{ topology_node.config_drive | default(config_drive) }}"
      flavor: "{{ topology_node.flavor | default(flavor_id) }}"
      image: "{{ (topology_node.image|default({})).name | default(provision.image) }}"
      name: "{{ prefix }}{{ topology_node.name }}-{{ item|int - 1 }}"
      nics: "{{ nics.results | map(attribute='stdout') | join(',') }}"
      key_name: "{{ provision.key.name if provision.key.name else (prefix + provision.key.file | basename) }}"
      security_groups: "{{ secgroups | default([]) | map('regex_replace', '^(.*)$', prefix + '\\1') | list or omit }}"
      state: present
      wait: "{{ topology_node.wait | default(wait) }}"
      timeout: "{{ provision.os.server.timeout | int }}"
      meta:
        submitter_user: "{{ lookup('env', 'USER') }}"
        submitter_hostname: "{{ lookup('env', 'HOSTNAME') }}"
        BUILD_NUMBER: "{{ lookup('env', 'BUILD_NUMBER') }}"
        BUILD_TAG: "{{ lookup('env', 'BUILD_TAG') }}"
        BUILD_TIMESTAMP: "{{ lookup('env', 'BUILD_TIMESTAMP') }}"
        BUILD_URL: "{{ lookup('env', 'BUILD_URL') }}"
        BUILD_USER_EMAIL: "{{ lookup('env', 'BUILD_USER_EMAIL') }}"
        GERRIT_CHANGE_OWNER_EMAIL: "{{ lookup('env', 'GERRIT_CHANGE_OWNER_EMAIL') }}"
        group: "{{ prefix }}"
        hostname: "{{ prefix }}{{ topology_node.name }}-{{ item|int - 1 }}"
        JOB_BASE_NAME: "{{ lookup('env', 'JOB_BASE_NAME') }}"
        JOB_URL: "{{ lookup('env', 'JOB_URL') }}"
        NODE_NAME: "{{ lookup('env', 'NODE_NAME') }}"
      userdata: |
        {%- raw -%}
        #!/bin/bash
        for i in $(ip l | awk '$2 ~ /eth[1-9]/ {gsub(":", ""); print $2}'); do ip l set down dev $i; done
        {% endraw %}
  with_sequence: "count={{ node.value }}"

- name: Register servers
  os_server_facts:
      cloud: "{{ provision.cloud | default(omit) }}"
      server: "{{ prefix }}*"
  register: servers

- name: save servers for registration
  set_fact:
      server_list: "{{ server_list|default([]) + (servers.ansible_facts.openstack_servers) }}"

- block:
      - name: Create volumes
        async: "{{ provision.os.server.timeout | int + 10 }}"
        poll: 0
        os_volume:
            cloud: "{{ provision.cloud | default(omit) }}"
            state: present
            wait: "{{ topology_node.wait | default(wait) }}"
            timeout: "{{ provision.os.server.timeout | int }}"
            size: 40
            name: "{{ prefix }}{{ topology_node.name }}-{{ item|int - 1 }}-ceph"
        register: volumes_creation
        with_sequence: "count={{ node.value }}"

      - name: Check volume creation status
        async_status:
          jid: "{{ async_result_item.ansible_job_id }}"
        loop: "{{ volumes_creation.results }}"
        loop_control:
          loop_var: "async_result_item"
        register: volumes
        until: volumes.finished
        retries: 300

      - set_fact:
            volume_results: "{{ volumes.results | map(attribute='volume') | list }}"
  when: "'ceph' in topology_node.groups"

- name: save volumes for registration
  set_fact:
      volume_list: "{{ volume_list|default([]) + volumes_results|default([]) }}"

- block:
      - name: Attach volumes to the ceph nodes
        vars:
            srv: "{{ servers.results | map(attribute='server') | list }}"
            vol: "{{ volumes.results | map(attribute='volume') | list }}"
        async: "{{ provision.os.server.timeout | int + 10 }}"
        poll: 0
        os_server_volume:
            cloud: "{{ provision.cloud | default(omit) }}"
            state: present
            wait: "{{ topology_node.wait | default(wait) }}"
            timeout: "{{ provision.os.server.timeout | int }}"
            server: "{{ item.0.id }}"
            volume: "{{ item.1.id }}"
        register: volume_attach
        loop: "{{ srv | zip(vol) | list }}"

      - name: Check volume creation status
        async_status:
          jid: "{{ async_result_item.ansible_job_id }}"
        loop: "{{ volume_attach.results }}"
        loop_control:
          loop_var: "async_result_item"
        register: volumes_attached_results
        until: volumes_attached_results.finished
        retries: 300
  when: "'ceph' in topology_node.groups"

- name: Create floating IPs and generate fip_dict
  vars:
    os_cloud: "{{ provision.cloud is defined | ternary('--os-cloud ' + provision.cloud, '') }}"
    public_network: "{{ (provision.provider|default({})).network|default(openstack_networks[0].id) }}"
    private_network: "{{ prefix }}{{ topology_node.external_network }}"
    timeout: "{{ provision.os.server.timeout | int }}"
  include_tasks: create_fips.yml
  with_items: "{{ server_list }}"
  loop_control:
    loop_var: server

- name: Get flavor facts
  os_flavor_facts:
      cloud: "{{ provision.cloud | default(omit) }}"
      name: "{{ topology_node.flavor | default(flavor_id) }}"
      limit: 1

# ovn nodes are faking baremetal, they have no OS at this stage.
- name: Wait for hosts to be reachable (all but ovb)
  wait_for:
      port: 22
      host: "{{ item.value }}"
      search_regex: OpenSSH
      delay: 10
      sleep: 3
      timeout: 500
  with_dict: "{{ fip_dict }}"
  when: "'ovb' not in topology_node.groups"

- name: Detect the python interpreter
  vars:
      sshopts: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o BatchMode=yes"
  shell: |
      ssh {{ sshopts }} -i {{ provision.key.file }} \
      {{ topology_node.get('image', {}).ssh_user | default(provision.username) }}@{{ item.value }} \
      'command -v python python3 /usr/libexec/platform-python|head -n1'
  register: py_interpreter
  with_dict: "{{ fip_dict }}"
  when: "'ovb' not in topology_node.groups"

- name: Add created servers to inventory
  vars:
      instance_flavor: "{{ openstack_flavors | first }}"
  add_host:
      # item.key is the server name
      name: "{{ item.key }}"
      ansible_host: "{{ item.value }}"
      groups: "{{ topology_node.groups | join(',') }}"
      ansible_ssh_private_key_file: "{{ provision.key.file | expanduser }}"
      ansible_python_interpreter: "{{ ( ( py_interpreter.results | selectattr('item.key', 'equalto', item.key) | first | default(None) )['stdout'] | default('') ) | trim | default(omit, true) }}"
      ansible_user: "{{ topology_node.get('image', {}).ssh_user | default(provision.username) }}"
#      eth1_interface_ip: "{{ item.item.addresses[data_network.name][0].addr }}"
      ram: "{{ instance_flavor.ram }}"
      disk: "{{ instance_flavor.disk }}"
      vcpus: "{{ instance_flavor.vcpus }}"
  with_dict: "{{ fip_dict }}"
