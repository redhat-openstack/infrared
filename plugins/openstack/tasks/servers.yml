---
# This file includes tasks for instances and floating IPs creation.
# These tasks done for each type of node according to 'amount' variable.

# save current node to "{{ node_dict }}"
- debug: var=node.key

- name: get node_dict
  include: var_lookup.yml
  vars:
      var_file: "{{ node.key }}"
      partial_path: topology/nodes

- name: Set the nic order
  command: "echo net-name={{ provision.prefix }}{{ topology_node.interfaces[item].network }}"
  with_items: "{{ topology_node.interfaces | sort }}"
  register: nics

- name: Create instances
  vars:
      resources: "{{ lookup('file', inventory_dir + '/resources.yml') | from_yaml }}"
  os_server:
      cloud: "{{ provision.cloud | default(omit) }}"
      auto_ip: "{{ topology_node.auto_ip | default(auto_ip) }}"
      config_drive: "{{ topology_node.config_drive | default(config_drive) }}"
      flavor: "{{ topology_node.flavor | default(flavor_id) }}"
      image: "{{ (topology_node.image|default({})).name | default(provision.image) }}"
      name: "{{ prefix }}{{ topology_node.name }}-{{ item|int - 1 }}"
      nics: "{{ nics.results | map(attribute='stdout') | list }}"
      key_name: "{{ provision.key.name if provision.key.name else (prefix + provision.key.file | basename) }}"
      security_groups: "{{ topology_node.security_groups | default(omit) }}"
      state: present
      wait: "{{ topology_node.wait | default(wait) }}"
  register: servers
  with_sequence: "count={{ node.value }}"

# need to write all servers to file at once
- name: save servers for registration
  set_fact:
      server_list: "{{ server_list|default([]) + (servers.results | map(attribute='server') | list) }}"

- name: Create floating IPs
  vars:
      external_network_id: "{{ openstack_networks[0].id }}"
  os_floating_ip:
      cloud: "{{ provision.cloud | default(omit) }}"
      network: "{{ external_network_id }}"
      nat_destination: "{{ prefix }}{{ topology_node.external_network }}"
      server: "{{ item.id }}"
      state: present
      # always wait for floating ip
      wait: yes
  register: floating_ips
  with_items: "{{ servers.results | map(attribute='server') | list }}"

- name: Get flavor facts
  os_flavor_facts:
      cloud: "{{ provision.cloud | default(omit) }}"
      name: "{{ topology_node.flavor | default(flavor_id) }}"
      limit: 1

- name: Add created servers to inventory
  vars:
      instance_flavor: "{{ openstack_flavors | first }}"
  add_host:
      # item.item is the server object
      name: "{{ item.item.name }}"
      ansible_ssh_host: "{{ item.floating_ip.floating_ip_address }}"
      groups: "{{ topology_node.groups | join(',') }}"
      ansible_ssh_private_key_file: "{{ provision.key.file }}"
      ansible_ssh_user: "{{ topology_node.get('image', {}).ssh_user | default(provision.username) }}"
#      eth1_interface_ip: "{{ item.item.addresses[data_network.name][0].addr }}"
      ram: "{{ instance_flavor.ram }}"
      disk: "{{ instance_flavor.disk }}"
      vcpus: "{{ instance_flavor.vcpus }}"
  with_items: "{{ floating_ips.results }}"
