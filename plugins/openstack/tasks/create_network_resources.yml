---
- name: Provision OpenStack network resources
  hosts: localhost
  tasks:
    - name: Create networks
      os_network:
          cloud: "{{ provision.cloud | default(omit) }}"
          external: "{{ item.value.external | default(omit) }}"
          name: "{{ provision.prefix }}{{ item.value.name }}"
          state: present
          shared: "{{ item.value.shared | default(omit) }}"
          timeout: "{{ item.value.timeout | default(timeout_network) }}"
      register: networks
      with_dict: "{{ provision.topology.network.networks }}"
      when: provision.topology.network.networks is defined

    - name: Register externally accessible networks
      os_networks_facts:
          cloud: "{{ provision.cloud | default(omit) }}"
          filters:
              router:external: true
      register: networks_details
    - debug: var=networks_details

    - name: Set external network id
      set_fact:
          external_network_id: "{{ item.value[0].id }}"
      with_dict: "{{ networks_details.ansible_facts }}"

    - name: Create subnets
      os_subnet:
          allocation_pool_start: "{{ item.value.allocation_pool_start }}"
          allocation_pool_end: "{{ item.value.allocation_pool_end }}"
          cidr: "{{ item.value.cidr | default(omit) }}"
          cloud: "{{ provision.cloud | default(omit) }}"
          dns_nameservers: "{{ provision.dns }}"
          enable_dhcp: "{{ item.value.enable_dhcp | default(enable_dhcp) }}"
          name: "{{ provision.prefix }}{{ item.value.name }}"
          network_name: "{{ provision.prefix }}{{ item.value.network_name }}"
          state: present
      register: subnets
      with_dict: "{{ provision.topology.network.subnets }}"
      when: provision.topology.network.subnets is defined

    - name: Create routers
      os_router:
          cloud: "{{ provision.cloud | default(omit) }}"
          external_fixed_ips: "{{ item.value.external_fixed_ips | default(omit) }}"
          interfaces: "{{ item.value.attach_subnets | map('add_prefix', provision.prefix) | join(',') }}"
          name: "{{ provision.prefix }}{{ item.value.name | default(router_name) }}"
          network: "{{ external_network_id }}"
          state: present
      register: routers
      with_dict: "{{ provision.topology.network.routers }}"
      when: provision.topology.network.routers is defined

#    TODO(abregman): Enable 'security groups' tasks when ansible 2.1 is out
#    - name: Create security groups
#      os_security_group:
#          cloud: "{{ provision.cloud | default(omit) }}"
#          name: "{{ provision.prefix }}{{ item.value.name | default(security_group_name) }}"
#          state: present
#      register: security_groups
#      with_dict: "{{ provision.topology.network.security_groups }}"
#      when: provision.topology.network.security_groups is defined
#
#    - name: Create security group rules
#      os_security_group_rule:
#          cloud: "{{ provision.cloud | default(omit) }}"
#          security_group: "{{ provision.prefix }}{{ item.value.name | default(security_group_name) }}"
#          protocol: "{{ item.value.protocol | default(omit) }}"
#          port_range_min: "{{ item.value.port_range_min | default(omit) }}"
#          port_range_max: "{{ item.value.port_range_max | default(omit) }}"
#          remote_ip_prefix: "{{ item.value.remote_ip_prefix | default(omit) }}"
#          state: present
#      register: security_group_rules
#      with_dict: "{{ provision.topology.network.security_groups.rules }}"
#      when: provision.topology.network.security_groups is defined