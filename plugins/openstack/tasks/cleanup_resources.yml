---
# If file is missing, nothing to do.
- name: include resource registery file
  include_vars: "{{ inventory_dir }}/resources.yml"

- name: Cleanup keypairs
  os_keypair:
      cloud: "{{ provision.cloud | default(omit) }}"
      name: "{{ item.id }}"
      state: absent
  with_items: "{{ keypairs|default([]) }}"
  register: keypairs_cleanup
  ignore_errors: yes
  retries: 3
  delay: 3
  until: keypairs_cleanup is success

- name: Remove floating IPs
  os_floating_ip:
      cloud: "{{ provision.cloud | default(omit) }}"
      server: "{{ item.id }}"
      state: absent
      # always wait for floating ip
      wait: yes
      timeout: "{{ provision.os.server.timeout | int }}"
  register: floating_ips_removal
  retries: 3
  until: floating_ips_removal is successful
  with_items: "{{ servers|default([]) }}"
  ignore_errors: yes

- name: Cleanup servers
  async: "{{ provision.os.server.timeout | int + 10 }}"
  poll: 0
  os_server:
      cloud: "{{ provision.cloud | default(omit) }}"
      name: "{{ item.id }}"
      state: absent
      delete_fip: yes
  with_items: "{{ servers|default([]) }}"
  register: servers_cleanup_async
  ignore_errors: yes

- name: Check servers cleanup
  async_status:
    jid: "{{ async_result_item.ansible_job_id }}"
  loop: "{{ servers_cleanup_async.results }}"
  loop_control:
    loop_var: "async_result_item"
  register: servers_cleanup
  until: servers_cleanup.finished
  retries: 300

- name: Cleanup volumes
  async: "{{ provision.os.server.timeout | int +10 }}"
  poll: 0
  os_volume:
      cloud: "{{ provision.cloud | default(omit) }}"
      name: "{{ item.id }}"
      state: absent
  with_items: "{{ volumes|default([]) }}"
  register: volumes_cleanup_async
  ignore_errors: yes

- name: Check volumes cleanup
  async_status:
    jid: "{{ async_result_item.ansible_job_id }}"
  loop: "{{ volumes_cleanup_async.results }}"
  loop_control:
    loop_var: "async_result_item"
  register: volumes_cleanup
  until: volumes_cleanup.finished
  retries: 300

# Block tasks are needed for shade >= 1.24.0
- block:
    - name: Clean subnets dhcp and gateway settings
      os_subnet:
          cloud: "{{ provision.cloud | default(omit) }}"
          name: "{{ item.id }}"
          network_name: "{{ item.name }}"
          enable_dhcp: false
          no_gateway_ip: yes
          use_default_subnetpool: yes
      when: item.enable_dhcp is defined
      with_items: "{{ subnets|default([]) }}"
      register: clean_subnets_dhcp_and_gw
      ignore_errors: yes
      retries: 3
      delay: 3
      until: clean_subnets_dhcp_and_gw is success

    - os_port_facts:
          cloud: "{{ provision.cloud | default(omit) }}"

    - set_fact:
          os_ports: "{{ os_ports|default([]) + subnet_ports }}"
      vars:
          subnet_ports: "{{ openstack_ports | selectattr('network_id', 'equalto', item.id) | list }}"
      with_items: "{{ networks|default([]) }}"

    - name: Disable ports
      os_port:
          cloud: "{{ provision.cloud | default(omit) }}"
          name: "{{ item.id }}"
          admin_state_up: false
          fixed_ips: []
      with_items: "{{ os_ports }}"
      register: disable_ports
      ignore_errors: yes
      retries: 3
      delay: 3
      until: disable_ports is success

    - name: Delete ports
      os_port:
          cloud: "{{ provision.cloud | default(omit) }}"
          name: "{{ item.id }}"
          state: absent
      with_items: "{{ os_ports }}"
      register: delete_ports
      ignore_errors: yes
      retries: 3
      delay: 3
      until: delete_ports is success

- name: Cleanup routers
  os_router:
      cloud: "{{ provision.cloud | default(omit) }}"
      name: "{{ item.id }}"
      state: absent
  with_items: "{{ routers|default([]) }}"
  register: routers_cleanup
  ignore_errors: yes
  retries: 3
  delay: 3
  until: routers_cleanup is success

- name: Cleanup subnets
  os_subnet:
      cloud: "{{ provision.cloud | default(omit) }}"
      name: "{{ item.id }}"
      state: absent
  with_items: "{{ subnets|default([]) }}"
  register: subnets_cleanup
  ignore_errors: yes
  retries: 3
  delay: 3
  until: subnets_cleanup is success

- name: Cleanup networks
  os_network:
      cloud: "{{ provision.cloud | default(omit) }}"
      name: "{{ item.id }}"
      state: absent
  with_items: "{{ networks|default([]) }}"
  register: networks_cleanup
  ignore_errors: yes
  retries: 3
  delay: 3
  until: networks_cleanup is success

- name: Cleanup security groups
  os_security_group:
     cloud: "{{ provision.cloud | default(omit) }}"
     state: absent
     name: "{{ item.id }}"
  with_items: "{{ security_group_list | default([]) }}"
  register: sg_cleanup
  when: provision.anti.spoofing | bool
  retries: 3
  delay: 3
  until: sg_cleanup is success

- name: Fail run if one of neutron cleanups tasks failed/skipped
  fail:
      msg: "The run failed because one of cleanup tasks failed/skipped"
  when: >
      not (routers_cleanup is succeeded and
           subnets_cleanup is succeeded and
           networks_cleanup is succeeded and
           keypairs_cleanup is succeeded and
           servers_cleanup is succeeded and
           volumes_cleanup is succeeded and
           sg_cleanup is succeeded)
