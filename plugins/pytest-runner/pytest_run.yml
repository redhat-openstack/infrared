- name: Run Pytest
  hosts: tester
  gather_facts: yes
  any_errors_fatal: true
  vars:
      repo_folder: 'pytest-repo/'
      output_prefix: '{{ item }}-{{ ansible_date_time.epoch }}.xml'
  tasks:
      - block:
        # TODO(aopincar): Check executables path (which) and if missing or not before editing the file
        - name: "Add '/usr/local/bin' to secure_path in RHEL8"
          become: true
          replace:
            path: /etc/sudoers
            regexp: '^(Defaults\s*secure_path.*)'
            replace: '\g<1>:/usr/local/bin'
        when:
          - ansible_distribution in ['CentOS', 'RedHat']
          - ansible_distribution_version|int >= 8

      - name: install python-pip
        shell: |
          curl https://bootstrap.pypa.io/get-pip.py | python
        when: ansible_python_version is version('3', '<')
        become: true

      - name: install python3-pip
        package:
          name: python3-pip
          state: present
        when: ansible_python_version  is version('3', '>=')
        become: true

      - name: install python virtualenv
        pip:
          name: virtualenv
          state: present
          extra_args: --user
        become: true
        become_user: '{{ ansible_user }}'

      - name: install pytest via pip
        pip:
          name: pytest
          state: present
          virtualenv: /tmp/pytest_venv

      - name: Install packages
        become: true
        package:
            name:
              - git
            state: latest

      - name: Clean old folder
        file:
          path: "{{ repo_folder }}"
          state: absent

      - name: Cloning git repo
        shell: |
            export GIT_SSL_NO_VERIFY=true
            git clone {{ test.repo }} {{ repo_folder }}
        tags: skip_ansible_lint

      - name: check for requirements.txt file
        stat:
          path: "{{ repo_folder }}requirements.txt"
        register: stat_result

      - name: install requirements.txt file
        pip:
          requirements: "requirements.txt"
          virtualenv: /tmp/pytest_venv
          chdir: "{{ repo_folder }}"
        when: stat_result.stat.exists | bool

      - name: Execute test
        ignore_errors: true
        shell: source /tmp/pytest_venv/bin/activate && pytest -v {{ repo_folder }}{{ item }}
          --junitxml={{ output_prefix }} 2>&1 --tb=no -r fp || true
        when: test.run|default(False)
        loop: "{{ test.file }}"
        register: pytest_execution

      - name: Fetch JUnit XML results file
        fetch:
          src: "{{ output_prefix }}"
          dest: "{{ inventory_dir }}/pytest_results/{{ output_prefix }}"
          flat: yes
          fail_on_missing: yes
        loop: "{{ test.file }}"
