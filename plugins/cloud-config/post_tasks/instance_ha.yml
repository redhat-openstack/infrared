- name: Stop and disable openstack services and libvirtd
  hosts: compute
  become: yes
  gather_facts: no
  any_errors_fatal: true
  tasks:
      - service:
            name: "{{ item }}"
            state: stopped
            enabled: no
        with_items:
            - openstack-nova-compute

- name: Generate authkey for remote pacemaker
  hosts: localhost
  tasks:
      - command: "dd if=/dev/urandom of='{{ inventory_dir }}/authkey' bs=4096 count=1"

- name: Deploy auth key
  hosts: controller:compute
  become: yes
  gather_facts: no
  any_errors_fatal: true
  tasks:
      - name: Make sure pacemaker config dir exists
        file:
            path: /etc/pacemaker
            state: directory
            mode: 0755

      - name: Copy generated autkey to overcloud nodes
        copy:
            src: "{{ inventory_dir }}/authkey"
            dest: /etc/pacemaker/
            mode: 0644

- name: Enable and start remote_pacemaker on computes
  hosts: compute
  become: yes
  gather_facts: no
  any_errors_fatal: true
  tasks:
      - name: Open pacemaker_remote port
        shell: |
           iptables -I INPUT -p tcp --dport 3121 -j ACCEPT
           /sbin/service iptables save;

      - name: Open pacemaker_remote IPv6 port
        shell: |
           ip6tables -I INPUT -p tcp --dport 3121 -j ACCEPT
           /sbin/service ip6tables save;

      - name: Start pacemaker remote service at compute nodes
        service:
            name: pacemaker_remote
            enabled: yes
            state: started

- name: Setup credentials
  hosts: undercloud
  gather_facts: yes
  any_errors_fatal: yes
  tasks:
      # for openstack v11 the OS_TENANT_NAME is replaced with OS_PROJECT_NAME
      # Trying to resolve OS_PROJECT_NAME and then OS_TENANT_NAME
      - name: grab auth data from openstackrc file and publish it as YAML
        vars:
        shell: |
            source ~/overcloudrc
            echo "
            auth_url: $OS_AUTH_URL
            username: $OS_USERNAME
            password: $OS_PASSWORD
            project_name: ${OS_PROJECT_NAME:-$OS_TENANT_NAME}
            "
            if [ -n "$OS_PROJECT_DOMAIN_NAME" ]; then
                echo "project_domain_name: $OS_PROJECT_DOMAIN_NAME"
            fi
            if [ -n "$OS_USER_DOMAIN_NAME" ]; then
                echo "user_domain_name: $OS_USER_DOMAIN_NAME"
            fi
        register: creds


- name: Run setup as root, to get all Ansible facts
  hosts: controller:compute
  gather_facts: no
  become: yes
  become_method: sudo
  any_errors_fatal: true
  tasks:
      - setup:

- name: Setup pacemaker for instance HA
  hosts: controller[0]
  gather_facts: no
  become: yes
  vars:
      auth: "{{ hostvars['undercloud-0']['creds']['stdout'] | from_yaml }}"
  environment:
      OS_USERNAME: "{{ auth.username | default('admin') }}"
      OS_PASSWORD: "{{ auth.password }}"
      OS_AUTH_URL: "{{ auth.auth_url }}"
      OS_TENANT_NAME: "{{ auth.project_name | default('admin') }}"
  any_errors_fatal: true
  tasks:
      - name: Create NovaEvacuate resource
        shell: "pcs resource create nova-evacuate ocf:openstack:NovaEvacuate auth_url=$OS_AUTH_URL username=$OS_USERNAME password=$OS_PASSWORD tenant_name=$OS_TENANT_NAME no_shared_storage=0;"

      - name: Create pacemaker constraints to start VIP resources before nova-evacuate
        shell: |
            for i in $(pcs status | grep IP | awk '{ print $1 }')
              do pcs constraint order start $i then nova-evacuate
            done

      - name: Set controller pacemaker property on controllers
        shell: "pcs property set --node {{ hostvars[item]['ansible_hostname'] }} osprole=controller;"
        with_items: "{{ groups['controller'] }}"

      - name: Get stonith devices
        shell: "pcs stonith | awk '{print $1}' | tr '\n' ' '"
        register: stonithdevs

      - name: Setup stonith devices
        shell: |
            for i in $(sudo cibadmin -Q --xpath //primitive --node-path | awk -F "id='" '{print $2}' | awk -F "'" '{print $1}' | uniq); do
              found=0
              if [ -n "{{ stonithdevs.stdout }}" ]; then
                for x in {{ stonithdevs.stdout }}; do
                  if [ "$x" == "$i" ]; then
                    found=1
                  fi
                done
              fi
              if [ $found = 0 ]; then
                sudo pcs constraint location $i rule resource-discovery=exclusive score=0 osprole eq controller
              fi
            done

      - name: Create compute pacemaker resources and constraints
        shell: |
            pcs resource create nova-compute-checkevacuate ocf:openstack:nova-compute-wait auth_url=$OS_AUTH_URL \
                                username=$OS_USERNAME password=$OS_PASSWORD tenant_name=$OS_TENANT_NAME \
                                domain=localdomain op start timeout=300 --clone interleave=true --disabled --force
            pcs constraint location nova-compute-checkevacuate-clone rule resource-discovery=exclusive score=0 osprole eq compute
            pcs resource create nova-compute systemd:openstack-nova-compute op start timeout=60s --clone interleave=true --disabled --force
            pcs constraint location nova-compute-clone rule resource-discovery=exclusive score=0 osprole eq compute
            pcs constraint order start nova-compute-checkevacuate-clone then nova-compute-clone require-all=true
            pcs constraint order start nova-compute-clone then nova-evacuate require-all=false

      - name: Add stonith devices for computes
        command: pcs stonith create ipmilan-{{ hostvars[item]['ansible_hostname' ] }} fence_ipmilan \
                                    pcmk_host_list={{ hostvars[item]['ansible_hostname' ] }} ipaddr=172.16.0.1 \
                                    login=admin passwd=password lanplus=1 cipher=1 op monitor interval=60s
        with_items: "{{ groups['compute'] }}"

      - name: Create fence-nova pacemaker resource
        shell: "pcs stonith create fence-nova fence_compute auth-url=$OS_AUTH_URL login=$OS_USERNAME passwd=$OS_PASSWORD \
                                   tenant-name=$OS_TENANT_NAME domain=localdomain record-only=1 no-shared-storage=False --force;"

      - name: Configure constraints for fence-nova
        shell: |
            pcs constraint location fence-nova rule resource-discovery=never score=0 osprole eq controller
            pcs constraint order promote galera-master then fence-nova require-all=false
            pcs constraint order start fence-nova then nova-compute-clone
            pcs property set cluster-recheck-interval=1min;

      - name: Create pacemaker remote resource on compute nodes
        shell: "pcs resource create {{ hostvars[item]['ansible_hostname'] }} ocf:pacemaker:remote reconnect_interval=240 op monitor interval=20;"
        with_items: "{{ groups['compute'] }}"

      - name: Set osprole for compute nodes
        shell: "pcs property set --node {{ hostvars[item]['ansible_hostname'] }} osprole=compute;"
        with_items: "{{ groups['compute'] }}"

      - name: Add pacemaker stonith devices of compute nodes to level 1
        shell: "pcs stonith level add 1 {{ hostvars[item]['ansible_hostname'] }} ipmilan-{{ hostvars[item]['ansible_hostname'] }},fence-nova;"
        with_items: "{{ groups['compute'] }}"

      - name: Cleanup pacemaker resources
        command: "pcs resource cleanup --force"
