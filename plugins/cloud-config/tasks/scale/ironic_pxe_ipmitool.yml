- name: Get current count of used vbmc ports
  shell: vbmc list | grep 62 | wc -l
  register: vbmc_used_ports

- name: Define vbmc_port for each VM
  set_fact:
      vbmc_ports: "{{ vbmc_ports|default({})|combine({ item.1: vbmc_start_port + vbmc_used_ports.stdout|int + item.0 }) }}"
  with_indexed_items: "{{ install.scale.nodes }}"

- name: Add nodes to vbmc
  command: "vbmc add {{ item.key }} --port {{ item.value }} --username {{ install.vbmc.username }} --password {{ install.vbmc.password }} --address ::ffff:{{ ansible_default_ipv4.address }} \
            --libvirt-uri \"qemu+ssh://{{ hostvars['hypervisor'].ansible_user_id }}@{{ hostvars['hypervisor'].ansible_management.ipv4.address }}/system?no_verify=1&no_tty=1\""
  with_dict: "{{ vbmc_ports }}"

- name: Start nodes using vbmc
  command: "vbmc start {{ item.key }}"
  with_dict: "{{ vbmc_ports }}"

- name: Setting nodes power status using ipmitool
  command: "ipmitool -I lanplus -U {{ install.vbmc.username }} -P {{ install.vbmc.password }} -H {{ ansible_default_ipv4.address }} -p {{ item.value }} chassis power on"
  with_dict: "{{ vbmc_ports }}"
  register: command_result
  until: command_result.rc == 0
  retries: 5
  delay: 5

- name: Get vbmc VMs power status using ipmitool
  command: "ipmitool -I lanplus -U {{ install.vbmc.username }} -P {{ install.vbmc.password }} -H {{ ansible_default_ipv4.address }} -p {{ item.value }} power status"
  register: ipmitool_results
  with_dict: "{{ vbmc_ports }}"
  until: ipmitool_results.rc == 0
  retries: 5
  delay: 5

- name: Validate that all VMs are powered on
  fail:
      msg: "Node is not powered on! (ipmitool stdout: '{{ item.stdout }}')"
  when: "item.stdout != 'Chassis Power is on'"
  with_items: "{{ ipmitool_results.results }}"