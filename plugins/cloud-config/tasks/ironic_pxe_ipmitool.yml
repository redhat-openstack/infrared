- name: Configure vbmc (ironic's 'pxe_ipmitool' driver)
  hosts: hypervisor
  gather_facts: yes
  any_errors_fatal: true
  vars:
      vbmc_start_port: 6230
      undercloud_node: "{{ groups.undercloud | first }}"
  tasks:
      - name: Get current count of used vbmc ports
        shell: vbmc list | grep 62 | wc -l
        register: vbmc_used_ports

      - name: Define vbmc_port for each VM
        set_fact:
            vbmc_ports: "{{ vbmc_ports|default({})|combine({ item.1: vbmc_start_port + vbmc_used_ports.stdout|int + item.0 }) }}"
        with_indexed_items: "{{ install.scale.nodes }}"

      - name: allow access to port vbmc ports from undercloud
        become: True
        iptables:
            action: insert
            comment: "Infrared: vbmc ports"
            table: filter
            chain: INPUT
            jump: ACCEPT
            protocol: "{{ item.2 }}"
            source: "{{ hostvars[undercloud_node].ansible_default_ipv4.address }}"
            destination_port: "{{ item.1 }}"
        with_nested:
            - "{{ vbmc_ports.items() }}"
            # That's a nested list:
            -
                - udp
                - tcp

      - name: Add nodes to vbmc
        command: "vbmc add {{ item.key }} --port {{ item.value }} --username {{ install.vbmc.username }} --password {{ install.vbmc.password }} --address ::ffff:{{ ansible_management.ipv4.address }}"
        with_dict: "{{ vbmc_ports }}"

      - name: Start nodes using vbmc
        command: "vbmc start {{ item.key }}"
        with_dict: "{{ vbmc_ports }}"

      - name: Setting nodes power status using ipmitool
        command: "ipmitool -I lanplus -U {{ install.vbmc.username }} -P {{ install.vbmc.password }} -H {{ ansible_management.ipv4.address }} -p {{ item.value }} chassis power on"
        with_dict: "{{ vbmc_ports }}"
        register: command_result
        until: command_result.rc == 0
        retries: 5
        delay: 5

      - name: Get vbmc VMs power status using ipmitool
        command: "ipmitool -I lanplus -U {{ install.vbmc.username }} -P {{ install.vbmc.password }} -H {{ ansible_management.ipv4.address }} -p {{ item.value }} power status"
        register: ipmitool_results
        with_dict: "{{ vbmc_ports }}"
        until: ipmitool_results.rc == 0
        retries: 5
        delay: 5

      - name: Validate that all VMs are powered on
        fail:
            msg: "Node is not powered on! (ipmitool stdout: '{{ item.stdout }}')"
        when: "item.stdout != 'Chassis Power is on'"
        with_items: "{{ ipmitool_results.results }}"