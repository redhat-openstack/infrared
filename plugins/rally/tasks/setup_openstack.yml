- name: Find openstackrc file
  find:
      file_type: file
      pattern: "{{ test.openstackrc | basename }}"
      paths:
          - "{{ lookup('env', 'PWD') }}/{{ test.openstackrc | dirname }}"
          - "{{ test.openstackrc | expanduser | dirname }}"
  register: openstackrc_find
  delegate_to: localhost
  when: test.openstackrc|default('')

- name: Fail when rc file was not found
  fail:
      msg: "Unable to find rc file: {{ test.openstackrc }}"
  when: test.openstackrc|default('') and openstackrc_find.matched == 0

- name: Copy openstackrc file
  copy:
      src: "{{ openstackrc_find.files[0].path }}"
      dest: "~/keystonerc"
      force: yes
  when: test.openstackrc|default('')

- name: Copy default keystonerc from active profile
  copy:
      src: "{{ inventory_dir }}/keystonerc"
      dest: "~/keystonerc"
      force: yes
  when: not test.openstackrc|default('')

- block:
    - name: Install virtualenv requirments for pip
      become: yes
      package:
          name: "{{ item }}"
          state: present
      with_items:
          - python-virtualenv
          - gcc
          - python-devel

    - name: Create shade virtualenv
      pip:
          name: "{{ item.key }}"
          version: "{{ item.value }}"
          virtualenv: "{{ path_venv }}"
      with_dict:
          setuptools: "17.0"
          pytz: "2016.4"
          shade: "1.19.0"
          pip: "8.1"
  vars:
      path_venv: "/var/tmp/venv_shade"

- name: Grab auth data from openstackrc file and publish it as YAML
  vars:
  shell: |
      source ~/keystonerc
      echo "
      auth_url: $OS_AUTH_URL
      username: $OS_USERNAME
      password: $OS_PASSWORD
      project_name: ${OS_PROJECT_NAME:-$OS_TENANT_NAME}
      "
      if [ -n "$OS_PROJECT_DOMAIN_NAME" ]; then
          echo "project_domain_name: $OS_PROJECT_DOMAIN_NAME"
      fi
      if [ -n "$OS_USER_DOMAIN_NAME" ]; then
          echo "user_domain_name: $OS_USER_DOMAIN_NAME"
      fi
  register: creds

- name: Download cirros image
  get_url:
      url: " {{ guest_image.url }}"
      dest: "/var/tmp/{{ guest_image.name }}"

- name: Create nano flavor
  vars:
      ansible_python_interpreter: "/var/tmp/venv_shade/bin/python"
  os_nova_flavor:
      auth: "{{ creds.stdout | from_yaml }}"
      name: m1.nano
      flavorid: 42
      ram: 64
      vcpus: 1
      disk: 0

- name: Create Glance Image
  vars:
      ansible_python_interpreter: "/var/tmp/venv_shade/bin/python"
  os_image:
      auth: "{{ creds.stdout | from_yaml }}"
      name: "{{ guest_image.name }}"
      disk_format: qcow2
      container_format: bare
      state: present
      filename: "/var/tmp/{{ guest_image.name }}"
      properties:
          visibility: public
