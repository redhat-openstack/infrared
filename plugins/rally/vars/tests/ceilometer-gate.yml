---
CeilometerAlarms.create_alarm:
  -
    args:
      meter_name: "ram_util"
      threshold: 10.0
      type: "threshold"
      statistic: "avg"
      alarm_actions: ["http://localhost:8776/alarm"]
      ok_actions: ["http://localhost:8776/ok"]
      insufficient_data_actions: ["http://localhost:8776/notok"]
    runner:
      type: "constant"
      times: 10
      concurrency: 10
    context:
      users:
        tenants: 1
        users_per_tenant: 1
    sla:
      max_failure_percent: 0

CeilometerAlarms.create_and_delete_alarm:
  -
    args:
      meter_name: "ram_util"
      threshold: 10.0
      type: "threshold"
      statistic: "avg"
      alarm_actions: ["http://localhost:8776/alarm"]
      ok_actions: ["http://localhost:8776/ok"]
      insufficient_data_actions: ["http://localhost:8776/notok"]
    runner:
      type: "constant"
      times: 10
      concurrency: 10
    context:
      users:
        tenants: 1
        users_per_tenant: 1
    sla:
      max_failure_percent: 0

CeilometerAlarms.create_and_list_alarm:
  -
    args:
      meter_name: "ram_util"
      threshold: 10.0
      type: "threshold"
      statistic: "avg"
      alarm_actions: ["http://localhost:8776/alarm"]
      ok_actions: ["http://localhost:8776/ok"]
      insufficient_data_actions: ["http://localhost:8776/notok"]
    runner:
      type: "constant"
      times: 10
      concurrency: 10
    context:
      users:
        tenants: 1
        users_per_tenant: 1
    sla:
      max_failure_percent: 0

CeilometerAlarms.create_and_update_alarm:
  -
    args:
      meter_name: "ram_util"
      threshold: 10.0
      type: "threshold"
      statistic: "avg"
      alarm_actions: ["http://localhost:8776/alarm"]
      ok_actions: ["http://localhost:8776/ok"]
      insufficient_data_actions: ["http://localhost:8776/notok"]
    runner:
      type: "constant"
      times: 10
      concurrency: 10
    context:
      users:
        tenants: 1
        users_per_tenant: 1
    sla:
      max_failure_percent: 0

CeilometerAlarms.list_alarms:
  -
    runner:
      type: "constant"
      times: 10
      concurrency: 10
    context:
      users:
        tenants: 1
        users_per_tenant: 1
    sla:
      max_failure_percent: 0

CeilometerMeters.list_meters:
  -
    runner:
      type: "constant"
      times: 10
      concurrency: 10
    context:
      users:
        tenants: 1
        users_per_tenant: 1
    sla:
      max_failure_percent: 0

CeilometerResource.list_resources:
  -
    runner:
      type: "constant"
      times: 10
      concurrency: 10
    context:
      users:
        tenants: 1
        users_per_tenant: 1
    sla:
      max_failure_percent: 0

CeilometerStats.create_meter_and_get_stats:
 -
    args:
      user_id: "user-id"
      resource_id: "resource-id"
      counter_volume: 1.0
      counter_unit: ""
      counter_type: "cumulative"
    runner:
      type: "constant"
      times: 20
      concurrency: 10
    context:
      users:
        tenants: 1
        users_per_tenant: 1
    sla:
      max_failure_percent: 0

CeilometerQueries.create_and_query_alarms:
  -
    args:
      filter: {"and": [{"!=": {"state": "dummy_state"}}, {"=": {"type": "threshold"}}]}
      orderby: !!null
      limit: 10
      meter_name: "ram_util"
      threshold: 10.0
      type: "threshold"
      statistic: "avg"
      alarm_actions: ["http://localhost:8776/alarm"]
      ok_actions: ["http://localhost:8776/ok"]
      insufficient_data_actions: ["http://localhost:8776/notok"]
    runner:
      type: "constant"
      times: 20
      concurrency: 10
    context:
      users:
        tenants: 1
        users_per_tenant: 1
    sla:
      max_failure_percent: 0

CeilometerQueries.create_and_query_alarm_history:
  -
    args:
      orderby: !!null
      limit: !!null
      meter_name: "ram_util"
      threshold: 10.0
      type: "threshold"
      statistic: "avg"
      alarm_actions: ["http://localhost:8776/alarm"]
      ok_actions: ["http://localhost:8776/ok"]
      insufficient_data_actions: ["http://localhost:8776/notok"]
    runner:
      type: "constant"
      times: 20
      concurrency: 10
    context:
      users:
        tenants: 1
        users_per_tenant: 1
    sla:
      max_failure_percent: 0

CeilometerQueries.create_and_query_samples:
  -
    args:
      filter: {"=": {"counter_unit": "instance"}}
      orderby: !!null
      limit: 10
      counter_name: "cpu_util"
      counter_type: "gauge"
      counter_unit: "instance"
      counter_volume: "1.0"
      resource_id: "resource_id"
    runner:
      type: "constant"
      times: 20
      concurrency: 10
    context:
      users:
        tenants: 1
        users_per_tenant: 1
    sla:
      max_failure_percent: 0
