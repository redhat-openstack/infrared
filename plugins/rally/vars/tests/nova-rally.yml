---
Authenticate.validate_nova:
  -
    args:
      repetitions: 2
    runner:
      type: "constant"
      times: 10
      concurrency: 5
    context:
      users:
        tenants: 3
        users_per_tenant: 5
    sla:
      failure_rate:
        max: 0

EC2Servers.boot_server:
  -
    args:
      flavor:
        name: "m1.nano"
      image:
        name: "{{ guest_image.name }}"
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 3
        users_per_tenant: 1
    sla:
      failure_rate:
        max: 0

EC2Servers.list_servers:
  -
    runner:
      type: "constant"
      times: 3
      concurrency: 3
    context:
      users:
        tenants: 3
        users_per_tenant: 1
      ec2_servers:
        flavor:
          name: "m1.nano"
        image:
          name: "{{ guest_image.name }}"
        servers_per_tenant: 2
    sla:
      failure_rate:
        max: 0

Quotas.nova_update_and_delete:
  -
    args:
      max_quota: 1024
    runner:
      type: "constant"
      times: 4
      concurrency: 1
    context:
      users:
        tenants: 3
        users_per_tenant: 2
    sla:
      failure_rate:
        max: 0

Quotas.nova_update:
  -
    args:
      max_quota: 1024
    runner:
      type: "constant"
      times: 10
      concurrency: 2
    context:
      users:
        tenants: 3
        users_per_tenant: 2
    sla:
      failure_rate:
        max: 0

NovaServers.boot_and_delete_server:
  -
    args:
      flavor:
          name: "m1.nano"
      image:
          name: "{{ guest_image.name }}"
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 3
        users_per_tenant: 2
    sla:
      failure_rate:
        max: 0

  -
    args:
      flavor:
          name: "m1.nano"
      image:
          name: "{{ guest_image.name }}"
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 3
        users_per_tenant: 2
      network:
        start_cidr: "10.2.0.0/24"
        networks_per_tenant: 2
    sla:
      failure_rate:
        max: 0

  -
    args:
      flavor:
          name: "m1.nano"
      image:
          name: "{{ guest_image.name }}"
      force_delete: true
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 3
        users_per_tenant: 2
    sla:
      failure_rate:
        max: 0

NovaServers.boot_and_list_server:
  -
    args:
      flavor:
          name: "m1.nano"
      image:
          name: "{{ guest_image.name }}"
      detailed: True
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 3
        users_per_tenant: 1
    sla:
      failure_rate:
        max: 0

NovaServers.suspend_and_resume_server:
  -
    args:
      flavor:
          name: "m1.nano"
      image:
          name: "{{ guest_image.name }}"
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 3
        users_per_tenant: 1
    sla:
      failure_rate:
        max: 0

NovaServers.pause_and_unpause_server:
  -
    args:
      flavor:
          name: "m1.nano"
      image:
          name: "{{ guest_image.name }}"
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 3
        users_per_tenant: 1
    sla:
      failure_rate:
        max: 0

NovaServers.shelve_and_unshelve_server:
  -
    args:
      flavor:
          name: "m1.nano"
      image:
          name: "{{ guest_image.name }}"
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 3
        users_per_tenant: 1
    sla:
      failure_rate:
        max: 0

NovaServers.boot_and_rebuild_server:
  -
    args:
      flavor:
        name: "m1.nano"
      from_image:
        name: "{{ guest_image.name }}"
      to_image:
        name: "{{ guest_image.name }}"
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 3
        users_per_tenant: 1
    sla:
      failure_rate:
        max: 0

NovaServers.boot_and_associate_floating_ip:
  -
    args:
      flavor:
        name: "m1.nano"
      image:
        name: "{{ guest_image.name }}"
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 3
        users_per_tenant: 1
      network: {}
    sla:
      failure_rate:
        max: 0

NovaServers.list_servers:
  -
    args:
      detailed: True
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 3
        users_per_tenant: 1
      servers:
        flavor:
            name: "m1.nano"
        image:
            name: "{{ guest_image.name }}"
        servers_per_tenant: 2
      network:
        networks_per_tenant: 2
    sla:
      failure_rate:
        max: 0

NovaServers.resize_server:
  -
    args:
      flavor:
          name: "m1.nano"
      image:
          name: "{{ guest_image.name }}"
      to_flavor:
          name: "m1.small"
      confirm: true
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 2
        users_per_tenant: 1
    sla:
      failure_rate:
        max: 0

NovaServers.boot_and_bounce_server:
  -
    args:
      flavor:
          name: "m1.nano"
      image:
          name: "{{ guest_image.name }}"
      actions:
        -
          hard_reboot: 1
        -
          stop_start: 1
        -
          rescue_unrescue: 1
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 2
        users_per_tenant: 1
    sla:
      failure_rate:
        max: 0

NovaServers.boot_lock_unlock_and_delete:
  -
    args:
      flavor:
          name: "m1.nano"
      image:
          name: "{{ guest_image.name }}"
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 2
        users_per_tenant: 1
    sla:
      failure_rate:
        max: 0

NovaServers.boot_server_from_volume_and_delete:
  -
    args:
      flavor:
          name: "m1.nano"
      image:
          name: "{{ guest_image.name }}"
      volume_size: 1
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 3
        users_per_tenant: 3
    sla:
      failure_rate:
        max: 0

NovaServers.boot_server_from_volume:
  -
    args:
      flavor:
          name: "m1.nano"
      image:
          name: "{{ guest_image.name }}"
      volume_size: 1
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 2
        users_per_tenant: 2
    sla:
      failure_rate:
        max: 0


NovaServers.snapshot_server:
  -
    args:
      flavor:
          name: "m1.nano"
      image:
          name: "{{ guest_image.name }}"
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 2
        users_per_tenant: 2
    sla:
      failure_rate:
        max: 0

NovaServers.boot_server:
  -
    args:
      flavor:
          name: "^ram64$"
      image:
          name: "{{ guest_image.name }}"
      auto_assign_nics: false
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 3
        users_per_tenant: 2
      flavors:
        -
          name: "ram64"
          ram: 64
    sla:
      failure_rate:
        max: 0
  -
    args:
      flavor:
          name: "m1.nano"
      image:
          name: "{{ guest_image.name }}"
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 3
        users_per_tenant: 2
    sla:
      failure_rate:
        max: 0

NovaHypervisors.list_hypervisors:
  -
    args:
      detailed: True
    runner:
      type: "constant"
      times: 5
      concurrency: 2
    sla:
      failure_rate:
        max: 0

NovaImages.list_images:
  -
    args:
      detailed: True
    runner:
      type: "constant"
      times: 5
      concurrency: 2
    context:
      users:
        tenants: 2
        users_per_tenant: 2
    sla:
      failure_rate:
        max: 0

NovaSecGroup.create_and_delete_secgroups:
  -
    args:
      security_group_count: 5
      rules_per_security_group: 5
    runner:
      type: "constant"
      times: 4
      concurrency: 4
    context:
      users:
        tenants: 3
        users_per_tenant: 2
      quotas:
        nova:
          security_groups: -1
          security_group_rules: -1
    sla:
      failure_rate:
        max: 0

NovaSecGroup.create_and_update_secgroups:
  -
    args:
      security_group_count: 5
    runner:
      type: "constant"
      times: 4
      concurrency: 4
    context:
      users:
        tenants: 3
        users_per_tenant: 2
      quotas:
        nova:
          security_groups: -1
    sla:
      failure_rate:
        max: 0

NovaSecGroup.create_and_list_secgroups:
  -
    args:
      security_group_count: 5
      rules_per_security_group: 5
    runner:
      type: "constant"
      times: 4
      concurrency: 4
    context:
      users:
        tenants: 3
        users_per_tenant: 2
      quotas:
        nova:
          security_groups: -1
          security_group_rules: -1
    sla:
      failure_rate:
        max: 0

NovaSecGroup.boot_and_delete_server_with_secgroups:
  -
    args:
      flavor:
        name: "m1.nano"
      image:
        name: "{{ guest_image.name }}"
      security_group_count: 5
      rules_per_security_group: 5
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 3
        users_per_tenant: 2
      network:
        start_cidr: "10.2.0.0/24"
      quotas:
        nova:
          security_groups: -1
          security_group_rules: -1
    sla:
      failure_rate:
        max: 0

NovaKeypair.create_and_delete_keypair:
  -
    runner:
      type: "constant"
      times: 4
      concurrency: 4
    context:
      users:
        tenants: 3
        users_per_tenant: 2
    sla:
      failure_rate:
        max: 0
  -
    args:
      key_type: "x509"
    runner:
      type: "constant"
      times: 4
      concurrency: 4
    context:
      users:
        tenants: 3
        users_per_tenant: 2
      api_versions:
        nova:
          version: 2.2
    sla:
      failure_rate:
        max: 0

NovaKeypair.create_and_list_keypairs:
  -
    runner:
      type: "constant"
      times: 4
      concurrency: 4
    context:
      users:
        tenants: 3
        users_per_tenant: 2
    sla:
      failure_rate:
        max: 0

NovaKeypair.boot_and_delete_server_with_keypair:
  -
    args:
      flavor:
        name: "m1.nano"
      image:
        name: "{{ guest_image.name }}"
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 3
        users_per_tenant: 2
      network:
        start_cidr: "10.2.0.0/24"
    sla:
      failure_rate:
        max: 0
  -
    args:
      flavor:
        name: "m1.nano"
      image:
        name: "{{ guest_image.name }}"
      key_type: "x509"
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 3
        users_per_tenant: 2
      network:
        start_cidr: "10.2.0.0/24"
      api_versions:
        nova:
          version: 2.2
    sla:
      failure_rate:
        max: 0

NovaServers.boot_and_delete_multiple_servers:
  -
    args:
      flavor:
        name: "m1.nano"
      image:
        name: "{{ guest_image.name }}"
      count: 5
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 2
        users_per_tenant: 2
    sla:
      failure_rate:
        max: 0

NovaFloatingIpsBulk.create_and_list_floating_ips_bulk:
  -
    args:
      start_cidr: "10.2.0.0/27"
    runner:
      type: "constant"
      times: 4
      concurrency: 2
    context:
      users:
        tenants: 2
        users_per_tenant: 2
    sla:
      failure_rate:
        max: 0

NovaFloatingIpsBulk.create_and_delete_floating_ips_bulk:
  -
    args:
      start_cidr: "10.2.0.0/27"
    runner:
      type: "constant"
      times: 4
      concurrency: 2
    context:
      users:
        tenants: 2
        users_per_tenant: 2
    sla:
      failure_rate:
        max: 0

VMTasks.boot_runcommand_delete:
  -
    args:
      flavor:
        name: "m1.nano"
      image:
        name: "{{ guest_image.name }}"
      floating_network: "public"
      use_floatingip: true
      command:
        script_inline: |
          time_seconds(){ (time -p $1 ) 2>&1 |awk '/real/{print $2}'; }
          file=/tmp/test.img
          c=100 #100M
          write_seq=$(time_seconds "dd if=/dev/zero of=$file bs=1M count=$c")
          read_seq=$(time_seconds "dd if=$file of=/dev/null bs=1M count=$c")
          [ -f $file ] && rm $file

          echo "{
              \"write_seq\": $write_seq,
              \"read_seq\": $read_seq
              }"
        interpreter: "/bin/sh"
      username: "cirros"
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 1
        users_per_tenant: 1
    sla:
      failure_rate:
        max: 0

  -
    args:
      flavor:
        name: "m1.nano"
      image:
        name: "{{ guest_image.name }}"
      volume_args:
          size: 2
      use_floatingip: true
      command:
        script_file: "{{ rally.dir }}/samples/tasks/support/instance_test.sh"
        interpreter: "/bin/sh"
      username: "cirros"
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 1
        users_per_tenant: 1
    sla:
      failure_rate:
        max: 0

  -
    args:
      flavor:
        name: "m1.nano"
      image:
        name: "{{ guest_image.name }}"
      use_floatingip: false
      command:
        script_file: "{{ rally.dir }}/samples/tasks/support/instance_test.sh"
        interpreter: "/bin/sh"
      username: "cirros"
    runner:
      type: "constant"
      times: 2
      concurrency: 2
    context:
      users:
        tenants: 1
        users_per_tenant: 1
    sla:
      failure_rate:
        max: 0
