---
- name: Include test vars
  include_vars: "{{ test_suite }}"

- name: Get plugins from cli
  vars:
    item_src: "{{ item.split(',')[0] }}"
    item_ver: "{{ item.split(',')[1] | default('HEAD') }}"
  set_fact:
      cli_plugins: "{{ cli_plugins|default({}) | combine({ (item_src|basename): { 'repo': item_src, 'version': item_ver }}) }}"
  with_items: "{{ test.plugin|default([]) }}"

- name: Set plugins list iterator for "{{ test_suite }}"
  set_fact:
      plugins: "{{ test_dict.plugins | default({}) | combine(cli_plugins|default({})) }}"
      plugins_dir: "{{ ansible_user_dir }}/{{ test.dir | dirname }}/plugins"

- name: Install extra system requirements for tests
  package:
      name: "{{ test.packages.split(',') | reject('equalto', '') | list }}"
      state: present
  when: test.packages is defined
  become: yes

# not using easy_install due to problems similar to https://github.com/pypa/pip/issues/4596
- block:
    - name: Install pip using get-pip.py
      shell: |
          curl https://bootstrap.pypa.io/get-pip.py | {{ ansible_python_interpreter | default('python') }}
      become: true
      when: ansible_python_version is version('3', '<')

    - name: Install python3-pip
      package:
          name: python3-pip
          state: present
      become: true
      when: ansible_python_version  is version('3', '>=')
  when: pip_packages is defined

- name: Install extra pip packages before installing plugins
  pip:
      name: "{{ item }}"
      state: present
      extra_args: '-U'
      version: "{{ ir_default_pip_versions[item] | default(omit) }}"
  with_items: "{{ pip_packages }}"
  when: item is defined
  become: yes

- name: Install plugin packages for "{{ test_suite }}" suite
  become: yes
  package:
      name: "{{ item.value.package[test.openstack.version |default(overcloud_version) | int]|default(item.value.package.default) }}"
      state: present
  with_dict: "{{ plugins | default({}) }}"
  when: item.value.package is defined

- name: Install plugin from source "{{ test_suite }}" suite
  include_tasks: install_plugins_source.yml
  loop_control:
      loop_var: plugin_dict
  when: plugin_dict.value.package is not defined
  with_dict: "{{ plugins | default({}) }}"
