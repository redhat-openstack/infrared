- name: set facts for test suite
  set_fact:
      test_suite: "{{ test_suite_file | basename | splitext | first }}"

- name: initialize max_seq_number to 0
  set_fact:
      max_seq_number: 0

# Find the test_output_file.N.xml with maximal N (if exists)
- name: find max file seq
  vars:
      file_name: "{{ item | basename | splitext | first }}"
      seq_number: "{{ file_name | regex_replace('^(?P<basename>.+)\\.(?P<seq_num>\\d+)$', '\\g<seq_num>') }}"
  set_fact:
      max_seq_number: "{{ [seq_number|int, max_seq_number|int] | max }}"
      test_output_file: "tempest-results-{{ test_suite }}.{{ max_seq_number | int + 1 }}.xml"
  with_fileglob:
      - "{{ inventory_dir }}/tempest_results/*.xml"

- name: set facts
  set_fact:
      test_output_file: "tempest-results-{{ test_suite }}.{{ max_seq_number | int + 1 }}.xml"
      blacklistfile: ''
      whitelistfile: ''
      regex: ''

- name: Include test suite vars
  include_vars: "{{ test_suite_file }}"

- name: remove old test list for "{{ test_suite }}"
  file:
      state: absent
      name: "{{ test.dir }}/{{ item }}"
  with_items:
      - "white_list_{{ test_suite }}"
      - "black_list_{{ test_suite }}"
      - "{{ test_output_file }}"

- block:
    - name: create Test List - Whitelist for "{{ test_suite }}"
      lineinfile:
          create: yes
          dest: "{{ test.dir }}/white_list_{{ test_suite }}"
          line: "{{ item }}"
          regexp: "^{{ item }}$"
      with_items: "{{ test_dict.whitelist | default([]) }}"

    - name: add whitelist invocation
      set_fact:
          whitelistfile: "--whitelist_file white_list_{{ test_suite }}"

  when: test_dict.whitelist is defined and test_dict.whitelist

- block:
    - name: create Test List - Blacklist for "{{ test_suite }}"
      lineinfile:
          create: yes
          dest: "{{ test.dir }}/black_list_{{ test_suite }}"
          line: "{{ item }}"
          regexp: "^{{ item }}$"
      with_items: "{{ test_dict.blacklist | default([]) }}"

    - name: add blacklist invocation
      set_fact:
          blacklistfile: "--blacklist_file black_list_{{ test_suite }}"
  when: test_dict.blacklist is defined and test_dict.blacklist

# For getting ostestr version, if tempest is installed from git, then it will
# first check for venv then activate the venv then get the ostestr version.
# else tempest is installed from rpm then venv will be not available it will
# directly get the ostestr version.
- name: Get ostestr version
  shell: >
      test -e .venv/bin/activate && source .venv/bin/activate;
      ostestr --version | sed 's/ostestr\ version\ //g'
  register: ostestr_version
  when: test.openstack.version|default(overcloud_version)|openstack_release >= 7

- name: add regex invoke for "{{ test_suite }}"
  set_fact:
      regex: "{{ test_dict.test_regex }}"
  when: test_dict.test_regex is defined and test_dict.test_regex

- block:
      - name: run tempest "{{ test_suite }}" suite
        shell: >
            test -e .venv/bin/activate && source .venv/bin/activate;
            ostestr -s --no-pretty --regex '{{ regex | default('') }}'
            {{ whitelistfile }}
            {{ blacklistfile }}
            {{ ('--concurrency ' + test.threads|string )
            if test.threads|default('') else '' }}
            {{ ('--black-regex ' + test.blackre|string|quote )
            if test.blackre|default('') else '' }}
            | subunit2junitxml --output-to={{ test_output_file }}
            | subunit2pyunit
        args:
            executable: /bin/bash
            chdir: "{{ test.dir }}"
        ignore_errors: true
        when:
            - test.openstack.version|default(overcloud_version)|openstack_release >= 7
            - ostestr_version.stdout_lines | version_compare('0.8.0', '>=')

      - name: run tempest "{{ test_suite }}" suite 7
        shell: |
            {% if test_dict is not defined or test_dict.whitelist is not defined -%}{% set parts = [] -%}
            {%- else %} {% set parts = test_dict.whitelist -%}{%- endif -%}
            {% if regex is defined -%}
            {% set  parts = parts + [regex] -%}
            {%- endif -%}
            {% if not parts -%}{% set parts = [''] -%}{%- endif -%}
            set -x
            echo "Warning: Test black listing is not implemented!" >&2
            test -e ".testrepository" || testr init
            testr run {{ ('--parallel --concurrency=' + test.threads|string) if test.threads|default('') else '' }} --subunit '{{ '|'.join(parts) }}' | subunit2junitxml --output-to={{ test_output_file }} | subunit2pyunit
        args:
            executable: /bin/bash
            chdir: "{{ test.dir }}"
        ignore_errors: true
        when:
            - test.openstack.version|default(overcloud_version)|openstack_release == 7
            - ostestr_version.stdout_lines | version_compare('0.8.0', '<')

      - name: inject the test suite name to the XML name atribute
        command: "sed '/^<testsuite/s/name=\"\"/name=\"{{ test_suite }}\"/' -i {{ test_output_file }}"
        args:
            chdir: "{{ test.dir }}"

      - name: Fetch resulting file
        fetch:
            src: "{{ test.dir }}/{{ test_output_file }}"
            dest: "{{ inventory_dir }}/tempest_results/{{ test_output_file }}"
            flat: yes
            fail_on_missing: yes

      - name: cleanup the resources created by the test and not cleaned
        shell: >
            test -e .venv/bin/activate && source .venv/bin/activate;
            tempest cleanup
        args:
            executable: /bin/bash
            chdir: "{{ test.dir }}"
        when: test.cleanup
  when: test_dict.test_regex is defined or whitelistfile is defined or blacklistfile is defined
