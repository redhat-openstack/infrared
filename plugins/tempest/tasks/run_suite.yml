- name: Set the directory to store all the generated test results
  set_fact:
      test_results_dir: "{{ test.results.dir if test.results.dir is defined else inventory_dir + '/test_results' }}"

- name: set facts for test suite
  set_fact:
      test_suite: "{{ test_suite_file | basename | splitext | first }}"
      test_suite_prefix: '{{ test.test.suite.prefix }}'
      blacklistfile: ''
      whitelistfile: ''
      regex: ''

- block:
    - name: initialize max_seq_number to 0
      set_fact:
          max_seq_number: 0

    # Find the test_output_file.N.xml with maximal N (if exists)
    - name: find max file seq
      vars:
          file_name: "{{ item | basename | splitext | first }}"
          seq_number: "{{ file_name | regex_replace('^(?P<basename>.+)\\.(?P<seq_num>\\d+)$', '\\g<seq_num>') }}"
      set_fact:
          max_seq_number: "{{ [seq_number|int, max_seq_number|int] | max }}"
          test_output_filename: "tempest-results-{{ test_suite }}.{{ max_seq_number | int + 1 }}"
      with_fileglob:
          - "{{ inventory_dir }}/tempest_results/tempest-results-{{ test_suite }}.*.subunit"

    - name: set the output file suffix to the highest number + 1
      set_fact:
          test_output_filename: "tempest-results-{{ test_suite }}.{{ max_seq_number | int + 1 }}"
  when: test.test.step.id is not defined

- name: set the output file suffix to the requested step ID
  set_fact:
      test_output_filename: "tempest-results-{{ test_suite }}.{{ test.test.step.id }}"
  when: test.test.step.id is defined

- name: Include test suite vars
  include_vars: "{{ test_suite_file }}"

- block:
    - name: backup existing tempest config
      copy:
          src: "~/{{ test.dir }}/etc/tempest.conf"
          dest: "~/{{ test.dir }}/etc/tempest.conf.{{ test_suite }}.bak"
          remote_src: yes
          force: yes

    - name: apply config changes
      include_tasks: "override_config_options.yml"
      loop_control:
        loop_var: config_options
      with_dict: "{{ test_dict.override_tempest_config_options }}"
  when: test_dict.override_tempest_config_options is defined and test_dict.override_tempest_config_options

- name: remove old test list for "{{ test_suite }}"
  file:
      state: absent
      name: "{{ test.dir }}/{{ item }}"
  with_items:
      - "white_list_{{ test_suite }}"
      - "black_list_{{ test_suite }}"
      - "{{ test_output_filename }}.subunit"
      - "{{ test_output_filename }}.xml"
      - "{{ test_output_filename }}.html"

- block:
    - name: create Test List - Whitelist for "{{ test_suite }}"
      lineinfile:
          create: yes
          dest: "{{ test.dir }}/white_list_{{ test_suite }}"
          line: "{{ item }}"
          regexp: "^{{ item }}$"
      with_items: "{{ test_dict.whitelist | default([]) }}"
  when: test_dict.whitelist is defined and test_dict.whitelist

- block:
    - name: create Test List - Blacklist for "{{ test_suite }}"
      lineinfile:
          create: yes
          dest: "{{ test.dir }}/black_list_{{ test_suite }}"
          line: "{{ item }}"
          regexp: "^{{ item }}$"
      with_items: "{{ test_dict.blacklist | default([]) }}"
  when: test_dict.blacklist is defined and test_dict.blacklist

# NOTE: FileValue parameter is not suitable in this case since
# one has to be able to specify --regexlist-file parameter to
# a possibly non existing file
- block:
    - name: Check the existance of regexlist-file
      stat:
        path: "{{ test.regexlist.file }}"
      register: regexlist_islnk
      delegate_to: localhost

    - name: Add blacklisted/whitelisted tests from regexlist-file
      include_tasks: regexlist.yml
      when: regexlist_islnk.stat.exists

  when:
      - test.regexlist is defined
      - test.regexlist.file is defined

- name: Check for the existance of black_list_file
  stat:
    path: "{{ test.dir }}/black_list_{{ test_suite }}"
  register: black_list_file

- name: Add blacklist invocation
  set_fact:
      blacklistfile: "--blacklist_file black_list_{{ test_suite }}"
  when: black_list_file.stat.exists

- name: Check for the existance of white_list_file
  stat:
    path: "{{ test.dir }}/white_list_{{ test_suite }}"
  register: white_list_file

- name: Add whitelist invocation
  set_fact:
      whitelistfile: "--whitelist_file white_list_{{ test_suite }}"
  when: white_list_file.stat.exists

- name: Add regex invoke for "{{ test_suite }}"
  set_fact:
      regex: "{{ test_dict.test_regex[test.openstack.version |default(overcloud_version) | int]|default(test_dict.test_regex.default) }}"
  when: test_dict.test_regex is defined and test_dict.test_regex

- name: Add number of threads for test suite
  set_fact:
     comp_threads: "{{ test.component_threads[test_suite] | default(False) }}"
  when: test.component_threads is defined

- block:
      - name: Set python interpreter for tempest
        vars:
          test_openstack_version: "{{ test.openstack.version | default(overcloud_version) | openstack_release }}"
        set_fact:
          python_interpreter: "{{ (test_openstack_version | float > 14.0) | ternary('python3', 'python') }}"

      - name: run tempest "{{ test_suite }}" suite with tempest run
        shell: >
            test -e {{ virtualenvs.tempest }}/bin/activate && source {{ virtualenvs.tempest }}/bin/activate;
            tempest run --subunit --regex '{{ regex | default('') }}'
            {{ whitelistfile }}
            {{ blacklistfile }}
            {{ ('--concurrency ' + comp_threads|default(False)|ternary(comp_threads,test_dict.threads)|default(test.threads)|string ) }}
            {{ ('--black-regex ' + test.blackre|string|quote )
            if test.blackre|default('') else '' }}
            {{ (test.list) | ternary ('--list','') }}
            > {{ test_output_filename }}.subunit;
        environment:
            PYTHON: "{{ python_interpreter | default(python_interpreter) or 'python' }}"
            PYTHONHASHSEED: 0
        args:
            executable: /bin/bash
            chdir: "{{ test.dir }}"
        ignore_errors: true
        when:
            - test.openstack.version|default(overcloud_version)|openstack_release >= 13

      - name: run tempest "{{ test_suite }}" suite with ostestr
        shell: >
            test -e {{ virtualenvs.tempest }}/bin/activate && source {{ virtualenvs.tempest }}/bin/activate;
            ostestr -s --no-pretty --regex '{{ regex | default('') }}'
            {{ whitelistfile }}
            {{ blacklistfile }}
            {{ ('--concurrency ' + comp_threads|default(False)|ternary(comp_threads,test_dict.threads)|default(test.threads)|string ) }}
            {{ ('--black-regex ' + test.blackre|string|quote )
            if test.blackre|default('') else '' }}
            {{ (test.list) | ternary ('--list','') }}
            > {{ test_output_filename }}.subunit;
        environment:
            PYTHON: "{{ python_interpreter | default(python_interpreter) or 'python' }}"
            PYTHONHASHSEED: 0
        args:
            executable: /bin/bash
            chdir: "{{ test.dir }}"
        ignore_errors: true
        when:
            - test.openstack.version|default(overcloud_version)|openstack_release < 13

      - name: generate results report in HTML format
        shell: |
            test -e {{ virtualenvs.tempest }}/bin/activate && source {{ virtualenvs.tempest }}/bin/activate
            subunit2html {{ test_output_filename }}.subunit {{ test_output_filename }}.html
        args:
            chdir: "{{ test.dir }}"
        when:
            results_formats.html is defined

      - name: generate results report in JunitXML format
        shell: |
            test -e {{ virtualenvs.tempest }}/bin/activate && source {{ virtualenvs.tempest }}/bin/activate
            subunit2junitxml --output-to={{ test_output_filename }}.xml \
                < {{ test_output_filename }}.subunit | subunit2pyunit
        args:
            chdir: "{{ test.dir }}"
        when:
            results_formats.junitxml is defined

      - name: inject the test suite name to the XML name atribute
        command: "sed '/^<testsuite/s/name=\"\"/name=\"{{ test_suite_prefix }}{{ test_suite }}\"/' -i {{ test_output_filename }}.xml"
        args:
            chdir: "{{ test.dir }}"
        when:
            results_formats.junitxml is defined

      - name: add the test suite name in the HTML report title
        command: "sed 's#<title>\\(.*Test Report\\)</title>#<title>\\1 - {{ test_suite_prefix }}{{ test_suite }}</title>#' \
                  -i {{ test_output_filename }}.html"
        args:
            chdir: "{{ test.dir }}"
        when:
            results_formats.html is defined

      - name: Fetch subunit results file
        fetch:
            src: "{{ test.dir }}/{{ test_output_filename }}.subunit"
            dest: "{{ test_results_dir }}/{{ test_output_filename }}.subunit"
            flat: yes
            fail_on_missing: yes

      - name: Fetch JUnit XML results file
        fetch:
            src: "{{ test.dir }}/{{ test_output_filename }}.xml"
            dest: "{{ test_results_dir }}/{{ test_output_filename }}.xml"
            flat: yes
            fail_on_missing: yes
        when:
            results_formats.junitxml is defined

      - name: Fetch HTML results file
        fetch:
            src: "{{ test.dir }}/{{ test_output_filename }}.html"
            dest: "{{ test_results_dir }}/{{ test_output_filename }}.html"
            flat: yes
            fail_on_missing: no
        when:
            results_formats.html is defined

      - name: cleanup the resources created by the test and not cleaned
        shell: >
            test -e {{ virtualenvs.tempest }}/bin/activate && source {{ virtualenvs.tempest }}/bin/activate;
            tempest cleanup
        args:
            executable: /bin/bash
            chdir: "{{ test.dir }}"
        when: test.cleanup and test.openstack.version|default(overcloud_version)|openstack_release > 7
  when: test_dict.test_regex is defined or whitelistfile is defined or blacklistfile is defined

- name: restore backuped tempest config
  copy:
      src: "~/{{ test.dir }}/etc/tempest.conf.{{ test_suite }}.bak"
      dest: "~/{{ test.dir }}/etc/tempest.conf"
      force: yes
      remote_src: yes
  when: test_dict.override_tempest_config_options is defined and test_dict.override_tempest_config_options
