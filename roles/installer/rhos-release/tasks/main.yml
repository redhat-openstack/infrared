---
- set_fact:
    rr_download_fqdn: ''
    rr_distro_version: "{{ rr_distro_version | default(ansible_distribution_version) }}"
    rr_target_directory: "{{ rr_target_directory|default('/etc/yum.repos.d') }}"

- block:
    - name: copy select-mirror.sh into home
      copy:
          src: "select-mirror.sh"
          dest: "~/select-mirror.sh"
          mode: "0755"

    - name: run select-mirror with provided mirror value
      command: "~/select-mirror.sh {{ mirror }}"
      register: selected_mirror

    - name: process results of mirror selection
      set_fact:
          mirror_fqdn: "{{ selected_mirror.stdout | trim }}"
          rr_download_fqdn: "{{ selected_mirror.stdout | trim | ternary('-H ' + selected_mirror.stdout|trim, '') }}"
  when: "mirror is defined and mirror"

- name: gather repo file names to remove
  find:
      path: "{{ rr_target_directory }}"
  register: files_to_remove

- name: remove all repo files
  file:
      state: absent
      path: "{{ item.path }}"
  with_items: "{{ files_to_remove.files }}"

- name: get the rhos-release RPM
  get_url:
      url: "{{ rr_rpm_url }}"
      dest: "/tmp/rhos-release-latest.rpm"
      validate_certs: "no"

- name: install the rhos-release RPM
  shell: "yum localinstall -y /tmp/rhos-release-latest.rpm"

- name: remove rhos-release repos if needed
  shell: "rhos-release -x -t {{ rr_target_directory }}"

- block:
    - name: build rhos-release command
      set_fact:
          rr_command_director: "
              rhos-release
              {{ director_version }}-director
              -P -p {{ director_build }}
              {{ rr_download_fqdn }}
              -t {{ rr_target_directory }}
              -r {{ rr_distro_version }}"

    - debug:
          var: rr_command_director

    - name: create necessary repos for director using rhos-release
      command: "{{ rr_command_director }}"
      register: command_result
      until: command_result.stderr.find('Connection reset by peer') == -1
      retries: 40
      delay: 5

    - name: parse specific number of director puddle used from rhos-release output
      set_fact:
          director_puddle_version: "{{ command_result | regex_replace('^.*director[ ]+-p (?P<puddle>\\d{4}-\\d{2}-\\d{2}\\.\\d).*$', '\\g<puddle>') }}"

    - debug:
          msg: "Build mark: director_puddle={{ director_puddle_version }}"
  when: "director_version is defined and director_version | int < 10 and director_build is defined"

- name: build rhos-release command
  set_fact:
      rr_command: "
          rhos-release
          {{ core_version }}
          -P -p {{ core_build }}
          {{ rr_download_fqdn }}
          -t {{ rr_target_directory }}
          -r {{ rr_distro_version }}"

- debug:
      var: rr_command

- name: create necessary repos for core using rhos-release
  command: "{{ rr_command }}"
  register: command_result
  until: command_result.stderr.find('Connection reset by peer') == -1
  retries: 40
  delay: 5

- name: parse specific number of puddle used from rhos-release output
  set_fact:
      core_puddle_version: "{{ command_result | regex_replace('^.*-p (?P<puddle>\\d{4}-\\d{2}-\\d{2}\\.\\d).*$', '\\g<puddle>') }}"

- debug:
      msg: "Build mark: core_puddle={{ core_puddle_version }}"

- block:
    - name: copy use-mirror.sh to home
      copy:
          src: "use-mirror.sh"
          dest: "~/use-mirror.sh"
          mode: 0755

    - name: reconfigure system to use mirror
      command: "~/use-mirror.sh {{ mirror_fqdn }}"
      args:
          chdir: "{{ rr_target_directory }}"
      register: mirror_used_cmd
      changed_when: "'Skipping mirror' not in mirror_used_cmd.stdout"
  when: "mirror_fqdn is defined and mirror_fqdn"

- name: refresh yum cache
  yum:
      name: kernel
      state: present
      update_cache: yes

- name: repolist
  command: yum -d 7 repolist
