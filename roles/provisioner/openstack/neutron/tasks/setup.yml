---
# This file is used to create OpenStack neutron resources

- name: Create networks
  os_network:
      cloud: "{{ provisioner.cloud | default(omit) }}"
      external: "{{ item.value.external | default(omit) }}"
      name: "{{ prefix }}{{ item.value.name }}"
      state: present
      shared: "{{ item.value.shared | default(omit) }}"
      timeout: "{{ item.value.timeout | default(timeout_network) }}"
  register: networks
  with_dict: "{{ provisioner.neutron.networks }}"
  when: provisioner.neutron.networks is defined

- name: Register external network
  os_networks_facts:
      cloud: "{{ provisioner.cloud | default(omit) }}"
      filters:
          router:external: true
  register: external_network_details
- debug: var=external_network_details

- name: Set fact for external network's id
  set_fact:
      external_network_id: "{{ item.value[0].id }}"
  with_dict: "{{ external_network_details.ansible_facts }}"

# Since CI-RHOS, where our packstack jobs are deployed, has strict security which can
# not be disabled using ansible, we need to use shell explicitely.
# With port-security enabled, arbitary IP and MAC can not work on these ports
# since ARP and MAC spoofing is therefore in place. See JIRA RHOSINFRA-1360 for details.
- name: Workaround - disable port security in CI-RHOS for all networks (JIRA RHOSINFRA-1360)
  shell: "openstack --os-cloud {{ provisioner.cloud }} network set --disable-port-security {{ item.network.id }}"
  with_items: "{{ networks.results }}"

- name: Create subnets
  os_subnet:
      allocation_pool_start: "{{ item.value.allocation_pool_start }}"
      allocation_pool_end: "{{ item.value.allocation_pool_end }}"
      cidr: "{{ item.value.cidr | default(omit) }}"
      cloud: "{{ provisioner.cloud | default(omit) }}"
      dns_nameservers: "{{ provisioner.dns }}"
      enable_dhcp: "{{ item.value.enable_dhcp | default(enable_dhcp) }}"
      name: "{{ prefix }}{{ item.value.name }}"
      network_name: "{{ prefix }}{{ item.value.network_name }}"
      state: present
  register: subnets
  with_dict: "{{ provisioner.neutron.subnets }}"
  when: provisioner.neutron.subnets is defined

- name: Create routers
  os_router:
      cloud: "{{ provisioner.cloud | default(omit) }}"
      external_fixed_ips: "{{ item.value.external_fixed_ips | default(omit) }}"
      interfaces: "{{ item.value.attach_subnets | map('add_prefix', prefix) | join(',') }}"
      name: "{{ prefix }}{{ item.value.name | default(router_name) }}"
      network: "{{ external_network_id }}"
      state: present
  register: routers
  with_dict: "{{ provisioner.neutron.routers }}"
  when: provisioner.neutron.routers is defined

#TODO(abregman): Enable 'security groups' tasks when ansible 2.1 is out
#- name: Create security groups
#  os_security_group:
#      cloud: "{{ provisioner.cloud | default(omit) }}"
#      name: "{{ prefix }}{{ item.value.name | default(security_group_name) }}"
#      state: present
#  register: security_groups
#  with_dict: "{{ provisioner.neutron.security_groups }}"
#  when: provisioner.neutron.security_groups is defined

#- name: Create security group rules
#  os_security_group_rule:
#      cloud: "{{ provisioner.cloud | default(omit) }}"
#      security_group: "{{ prefix }}{{ item.value.name | default(security_group_name) }}"
#      protocol: "{{ item.value.protocol | default(omit) }}"
#      port_range_min: "{{ item.value.port_range_min | default(omit) }}"
#      port_range_max: "{{ item.value.port_range_max | default(omit) }}"
#      remote_ip_prefix: "{{ item.value.remote_ip_prefix | default(omit) }}"
#      state: present
#  register: security_group_rules
#  with_dict: "{{ provisioner.neutron.security_groups.rules }}"
#  when: provisioner.neutron.security_groups is defined
