---
- name: get the list of VMs
  virt:
    command: list_vms
  register: vm_names

- name: get MAC list
  shell: "virsh domiflist {{ node.value.name }}-{{ item }} | awk '/{{ node.value.external_network }}/ {print $5};'"
  with_sequence: start=0 end={{ node.value.amount | int - 1 }}
  register: mac_list

- set_fact:
      vm_mac_list: "{{ mac_list.results }}"

- name: wait until one of the VMs gets an IP
  shell: |
        virsh net-dhcp-leases {{ node.value.external_network }} | awk '($4 == "ipv4")  && ($3 == "{{ item.1 }}") {print $5}'
  register: ip_list
  until: "'{{ ip_list.stdout }}' != ''"
  retries: 40
  delay: 5
  with_subelements:
      - "{{ vm_mac_list }}"
      - stdout_lines

- set_fact:
      # todo(yfried): filter results - grap 'stdout' and convert to ip using ipaddr
      vm_ip_list: "{{ ip_list.results }}"

- name: make IPs persistent
  shell: "virsh net-update {{ node.value.external_network }} add ip-dhcp-host \"<host mac='{{ item.item[1] }}' name='{{ item.item[0].cmd.split()[2] }}' ip='{{ item.stdout | ipaddr('address') }}' />\" --live --config"
  with_items: "{{ vm_ip_list }}"

- name: add hosts to host list
  add_host:
      name="{{ item.item[0].cmd.split()[2] }}"
      groups="{{ node.value.groups | join(',') }}"
      ansible_ssh_user="root"
      ansible_ssh_host="{{ item.stdout | ipaddr('address') }}"
      ansible_ssh_private_key_file="{{ inventory_dir }}/id_rsa"
  with_items: "{{ vm_ip_list }}"
