---
# For disks usually it will be only 1 disk so the async will run on nodes rather than disks creation
- name: create disk(s) from vm base image
  shell: |
      {% for num in range(1, item.value.amount + 1, 1) %}
      {% for disk_name, disk_values in item.value.disks.iteritems() %}
      {% set node_image = '{0}-{1}-{2}.qcow2'.format(item.value.name, num - 1, disk_name) %}
      {% if not disk_values.import_url %}

      {% if disk_name == 'disk1' -%}
      # create system disk by copy-expanding base image
      virt-resize --expand /dev/sda1 {{ base_image_path }}/{{ base_image }} {{ disk_values.path }}/{{ node_image }}
      chown qemu:qemu {{ disk_values.path }}/{{ node_image }}
      virt-customize -a {{ disk_values.path }}/{{ node_image }} \
      {%- for index in range(item.value.interfaces | length - 1) %}
          --run-command 'cp /etc/sysconfig/network-scripts/ifcfg-eth{0,{{ index + 1 }}} && sed -i s/DEVICE=.*/DEVICE=eth{{ index + 1 }}/g /etc/sysconfig/network-scripts/ifcfg-eth{{ index +1 }}' {% if not loop.last %}\
          {% endif %}
      {% endfor %}

      {% else %}
      # create additional disks as empty
      qemu-img create -f qcow2 -o preallocation={{ disk_values.preallocation }} {{ disk_values.path  }}/{{ node_image }} {{ disk_values.size }}
      chown qemu:qemu {{ disk_values.path  }}/{{ node_image }}

      {% endif %}

      {% endif %}{# endif not import_url #}
      {% endfor %}{# endfor vm disks #}
      {% endfor %}{# endfor vm-type(controller etc).amount #}
  with_dict: "{{ provisioner.topology.nodes }}"
  register: "vm_disks"
  async: 7200
  poll: 0

- name: Wait for our disks to be created
  async_status:
      jid: "{{ item.ansible_job_id }}"
  register: disk_tasks
  until: disk_tasks.finished
  retries: 300
  with_items: "{{ vm_disks.results }}"
