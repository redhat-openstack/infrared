---
- name: import vm disk image(s) for node if specified
  get_url:
      url: "{{ item.value.import_url }}"
      dest: "{{ base_image_path }}/{{ node.value.name }}-{{ item.key }}.qcow2"
      timeout: 30
  register: result
  until: result.msg.find("Request failed") == -1
  retries: 5
  delay: 5
  when: item.value.import_url is defined and item.value.import_url
  with_dict: "{{ node.value.disks }}"

- name: create disk(s) from vm base image
  shell: |
      {% for num in range(1, node.value.amount + 1, 1) %}
      cp {{ base_image_path }}/{{ node.value.name }}-{{ item.key }}.qcow2 {{ base_image_path }}/{{ node.value.name }}-{{ num - 1 }}-{{ item.key }}.qcow2
      qemu-img create -f qcow2 -o preallocation={{ item.value.preallocation }} {{ base_image_path }}/{{ node.value.name }}-{{ num - 1 }}-{{ item.key }}.qcow2 {{ item.value.size }}
      {% if item.key == 'disk1' %}
      virt-resize --expand /dev/sda1 {{ base_image_path }}/{{ base_image }} {{ item.value.path }}/{{ node.value.name }}-{{ num - 1 }}-{{ item.key }}.qcow2
      {% endif %}
      {% endfor %}
  with_dict: "{{ node.value.disks }}"

- debug:
      msg: |
          virt-install --name {{ node.value.name }}-{{ item | int - 1 }} \
            {% for disk_name, disk_values in node.value.disks.iteritems() %}
            {% if disk_values.import_url is defined and disk_values.import_url %}
             --disk path={{ base_image_path }}/{{ node.value.name }}-{{ item|int - 1 }}-{{ disk_name }}.qcow2,device=disk,bus=virtio,format=qcow2,cache={{ disk_values.cache }} \
            {% else %}
             --disk path={{ disk_values.path }}/{{ node.value.name }}-{{ item|int - 1 }}-{{ disk_name }}.qcow2,device=disk,bus=virtio,format=qcow2,cache={{ disk_values.cache }} \
            {% endif %}
            {% endfor %}
             --network network:data \
             --network network:management \
             --network network:external \
             --virt-type kvm \
             --cpu host-model \
             --ram {{ node.value.memory }} \
             --vcpus {{ node.value.cpu }} \
             --os-variant {{ node.value.os.variant }} \
             --import \
             --noautoconsole \
             --autostart \
             --vnc
  with_sequence: count={{ node.value.amount | int }}

- name: create vm's
  shell: |
      virt-install --name {{ node.value.name }}-{{ item | int - 1 }} \
        {% for disk_name, disk_values in node.value.disks.iteritems() %}
        {% if disk_values.import_url is defined and disk_values.import_url %}
         --disk path={{ base_image_path }}/{{ node.value.name }}-{{ item|int - 1 }}-{{ disk_name }}.qcow2,device=disk,bus=virtio,format=qcow2,cache={{ disk_values.cache }} \
        {% else %}
         --disk path={{ disk_values.path }}/{{ node.value.name }}-{{ item|int - 1 }}-{{ disk_name }}.qcow2,device=disk,bus=virtio,format=qcow2,cache={{ disk_values.cache }} \
        {% endif %}
        {% endfor %}
         --network network:data \
         --network network:management \
         --network network:external \
         --virt-type kvm \
         --cpu host-model \
         --ram {{ node.value.memory }} \
         --vcpus {{ node.value.cpu }} \
         --os-variant {{ node.value.os.variant }} \
         --import \
         --noautoconsole \
         --autostart \
         --vnc
  with_sequence: count={{ node.value.amount | int }}

- name: get the list of VM's
  shell: "virsh list --all | grep -P '[\\w-]+' | grep {{ node.value.name }} | sed -n '1,$p' | awk '{print $2}'"
  register: vm_names

- set_fact:
      vm_name_list: "{{ vm_names.stdout_lines }}"

- name: get MAC list
  shell: "virsh domiflist {{ item[0] }} | awk '/{{ item[1] }}/ {print $5};'"
  with_nested:
      - "{{ vm_name_list }}"
      - "{{ provisioner.topology.network }}"
  register: mac_list

- set_fact:
      vm_mac_list: "{{ mac_list.results }}"

- name: wait until one of the VMs gets an IP
  shell: |
      virsh net-dhcp-leases {{ item.item[1] }} | awk '($4 == "ipv4")  && ($3 == "{{ item.stdout }}") {print $5}'
  when: >
      provisioner.topology.network[item.item[1]].dhcp is defined and
      item.stdout is defined and item.stdout != ""
  register: ip_list
  until: "'{{ ip_list.stdout }}' != ''"
  retries: 40
  delay: 5
  with_items: "{{ vm_mac_list }}"

- set_fact:
      # todo(yfried): filter results - grap 'stdout' and convert to ip using ipaddr
      vm_ip_list: "{{ ip_list.results }}"

- name: make IPs persistent
  shell: "virsh net-update {{ item[0] }} add ip-dhcp-host \"<host mac='{{ item[1].item.stdout }}' name='{{ item[1].item.item[0] }}' ip='{{ item[1].stdout | ipaddr('address') }}' />\" --live --config"
  when: >
      provisioner.topology.network[item[1].item.item[1]].dhcp is defined and
      item[1].item is defined and
      item[1].item.item[1] == item[0]
  with_nested:
      - "{{ provisioner.topology.network }}"
      - "{{ vm_ip_list }}"

- name: add hosts to host list
  add_host:
      name="{{ item.item.item[0] }}"
      groups="{{ provisioner.topology.nodes['%s' % item.item.item[0].rstrip('1234567890-')].groups | join(',') }}"
      ansible_ssh_user="root"
      ansible_ssh_host="{{ item.stdout | ipaddr('address') }}"
      ansible_ssh_private_key_file="{{ inventory_dir }}/id_rsa"
  when: item.item is defined and item.item.item[1] == "external"
  with_items: "{{ vm_ip_list }}"

- name: update ansible.ssh.config template
  template:
      src: ansible.ssh.config.j2
      dest: "{{ inventory_dir }}/ansible.ssh.config"
  delegate_to: localhost
