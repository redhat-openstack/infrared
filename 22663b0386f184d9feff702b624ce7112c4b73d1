{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "467c79ac_a2f3bc26",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1008329
      },
      "writtenOn": "2021-06-11T12:13:20Z",
      "side": 1,
      "message": "Pavel, how about adding a new feature to tox-extras that does that? I added https://github.com/tox-dev/tox-extra/issues/15 but I do not have time write the patch myself.\n\nStill, injecting the cleanup code in tox is extreamly easy, look at https://github.com/tox-dev/tox-extra/blob/main/src/tox_extra/hooks.py#L14 -- mainly you only need to add another function called `tox_runtest_pre` and to the cleanup there.",
      "revId": "22663b0386f184d9feff702b624ce7112c4b73d1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff72b945_cb4d1bbb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1010634
      },
      "writtenOn": "2021-06-11T13:51:12Z",
      "side": 1,
      "message": "looks good, altho I didn\u0027t run it myself so I\u0027m relying it on your testing Pavel",
      "revId": "22663b0386f184d9feff702b624ce7112c4b73d1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed517ccf_75c77924",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1010634
      },
      "writtenOn": "2021-06-11T13:57:20Z",
      "side": 1,
      "message": "@Sorin ... Pavel mentioned something about multithreded execution of these tox environments and possibility that some threads may start to cleanup things whic are still being used by other threads... while such bash\u0027y cleanup should account for that for sure as well... I\u0027m more referring to your proposal about pre_test hook, probably worth considering multithreaded execution (especially temp/random workspaces etc.)...\n\nre using your hook proposal here in this tox-pycache ... sure why not... just need to have it in the python3-tox rpm first ;-)",
      "revId": "22663b0386f184d9feff702b624ce7112c4b73d1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae8a88a5_ebefcc76",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1008329
      },
      "writtenOn": "2021-06-14T08:23:52Z",
      "side": 1,
      "message": "You do NOT need to have the tox plugin packaged as rpm, mentioning it inside requires is enough. Tox knows to install and use plugins on demand, in fact it even knows to upgrade itself inside an intermediary virtualenv when you require a version of tox newer than the system one. From this point of view is really smart.\n\nAround the multithreaded execution, that it can become more problematic: is about running tox environments in parallel or something else?\n\nIn fact the funny bit is that if you run them in parallel any amount of cleanup would not be sufficient as files could be created after you did the cleanup, fixing nothing.\n\nI think it would be better to avoid parallel execution or correctly configure python to not create cache files.",
      "revId": "22663b0386f184d9feff702b624ce7112c4b73d1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa54c106_11d10f51",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001189
      },
      "writtenOn": "2021-06-16T07:56:32Z",
      "side": 1,
      "message": "@Sorin: tox-extra is interesting, did not knew about it, thanks, though likely i will not now or soon be looking into that (this is quite low priority fix anyway)\n\nAs mentioned it is related to parallel execution of tox test envs, and as You suggested it\u0027s trying to minimize the writing of such cache files by all/each of the envs to minimize collision surface (by expanding use of DONTWRITEBYTECODE, but with varying versions of python around, currently none being 3.8+ yet where i checked, we cannot utilize PYTHONPYCACHEPREFIX to properly isolate the caches so need solution working without that) ...\n... that together with more targeted cleanup behaviour -  to even further minimize now already small possible collision area.",
      "revId": "22663b0386f184d9feff702b624ce7112c4b73d1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}